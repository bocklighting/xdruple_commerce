<?php

/**
 * Implements hook_views_api().
 */
function xdruple_fields_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'xdruple_fields') . '/includes/views',
  );
}

/**
 * Implements hook_menu()
 */
function xdruple_fields_menu() {
  $items = array();

  $items['user/%user/preferences/customer/autocomplete'] = array(
    'title'            => 'Customer Autocomplete',
    'page callback'    => 'xdruple_fields_get_customer_callback',
    'access callback'  => 'xdruple_fields_user_preferences_access',
    'access arguments' => array(1),
    'type'             => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_init()
 */
function xdruple_fields_init() {
  $order_defaults = xdruple_fields_order_defaults_form_default_values(array());
  drupal_add_js(array(
    'xdruple_fields' => array(
      'order_defaults' => $order_defaults,
    ),
  ), 'setting');
}


/**
 * Implements hook_user_access_extend().
 *
 * Determine what type of xTuple user this is and grant them the correct
 * field permissions.
 *
 * @param $user_id Drupal uid of the user.
 *
 * @return array of permissions names for the user.
 */
function xdruple_fields_user_access_extend($user_id) {
  $permissions = array();

  // Determine the xTuple user type.
  if (isset($_SESSION['rescued']['user_type'])) {
    // Define fields that need special permissions to access them.
    $fields = array(
      'xd_customer',
      'xd_bill_to_contact',
      'xd_bill_to_address',
      'xd_ship_to',
      'xd_ship_to_contact',
      'xd_ship_to_address',
    );

    // Assign field permissions based on the user_type.
    switch ($_SESSION['rescued']['user_type']) {
      case 'rescued_contact':
        foreach ($fields as $field) {
          $permissions[] = 'view own ' . $field;
        }

        break;
      case 'rescued_personal':
        foreach ($fields as $field) {
          $permissions[] = 'create ' . $field;
          $permissions[] = 'view own ' . $field;
        }

        break;
      case 'rescued_employee':
        foreach ($fields as $field) {
          $permissions[] = 'create ' . $field;
          $permissions[] = 'edit ' . $field;
          $permissions[] = 'edit own ' . $field;
          $permissions[] = 'view ' . $field;
          $permissions[] = 'view own ' . $field;
        }

        break;
      case 'rescued_limited':
        foreach ($fields as $field) {
          $permissions[] = 'create ' . $field;
          $permissions[] = 'view own ' . $field;
        }

        break;
    }
  }

  return $permissions;
}

/**
 * Implements hook_rescued_register_clients_resources_alter().
 */
function xdruple_fields_rescued_register_clients_resources_alter(&$rescued_clients_url_resources) {
  if (!in_array('Url', $rescued_clients_url_resources['xtuple'])) {
    $rescued_clients_url_resources['xtuple'][] = 'Url';
  }
  if (!in_array('XdrupleUserContact', $rescued_clients_url_resources['xtuple'])) {
    $rescued_clients_url_resources['xtuple'][] = 'XdrupleUserContact';
  }
  if (!in_array('XdrupleCommerceProduct', $rescued_clients_url_resources['xtuple'])) {
    $rescued_clients_url_resources['xtuple'][] = 'XdrupleCommerceProduct';
  }
  if (!in_array('XdrupleCommerceCustomer', $rescued_clients_url_resources['xtuple'])) {
    $rescued_clients_url_resources['xtuple'][] = 'XdrupleCommerceCustomer';
  }
  if (!in_array('XdrupleCustomer', $rescued_clients_url_resources['xtuple'])) {
    $rescued_clients_url_resources['xtuple'][] = 'XdrupleCustomer';
  }

  return $rescued_clients_url_resources;
}

/**
 * Implements hook_rescued_handle_create_child_fields_alter().
 */
function xdruple_fields_rescued_handle_create_child_fields_alter(&$handled_properties) {
  if (isset($handled_properties['xtuple'])) {
    // Handle product URLs as item and file fields.
    // @See: xdruple_fields_rescued_create_child_fields()
    if (isset($handled_properties['xtuple']['XdrupleCommerceProduct']) &&
      is_array($handled_properties['xtuple']['XdrupleCommerceProduct'])) {

      array_push($handled_properties['xtuple']['XdrupleCommerceProduct'], 'urls');
    } else {
      $handled_properties['xtuple']['XdrupleCommerceProduct'] = array('urls');
    }

    // QueryOptions should not have any fields. It's just a POST method, not full entity.
    if (isset($handled_properties['xtuple']['QueryOptions']) &&
      is_array($handled_properties['xtuple']['QueryOptions'])) {

      array_push($handled_properties['xtuple']['QueryOptions'], 'query');
    } else {
      $handled_properties['xtuple']['QueryOptions'] = array('query');
    }

    // TODO: Customer ItemPrice is adding instances too:
    // xtuple_xdruplecustomer
  }

  return $handled_properties;
}

/**
 * Implements hook_rescued_create_child_fields().
 */
function xdruple_fields_rescued_create_child_fields($name, $resource, $property, $child, $title, $cardinality, $weight) {
  if ($name === 'xtuple' && $resource === 'XdrupleCommerceProduct' && $property === 'urls') {
    // Add image field instances.
    $field_name = 'xt_url_image_field';

    // This field should get created in xdruple_fields.install.
    if (field_info_field($field_name)) {
      // Add 'commerce_product' instance.
      $instance = field_info_instance('commerce_product', $field_name, 'product');
      if (is_null($instance)) {
        $instance = array(
          'field_name' => $field_name,
          'entity_type' => 'commerce_product',
          'bundle' => 'product',
          'label' => 'Product Images',
        );
        $instance['widget']['weight'] = $weight;
        $instance['display']['default']['weight'] = $weight;
        field_create_instance($instance);
      }

      // Add 'xtuple_xdruplecommerceproduct' instance.
      $entity_type = $name . '_' . strtolower($resource);
      $instance = field_info_instance($entity_type, $field_name, $entity_type);
      if (is_null($instance)) {
        $instance = array(
          'field_name' => $field_name,
          'entity_type' => $name . '_' . strtolower($resource),
          'bundle' => $name . '_' . strtolower($resource),
          'label' => 'Product Images',
        );
        $instance['widget']['weight'] = $weight;
        $instance['display']['default']['weight'] = $weight;
        field_create_instance($instance);
      }
    }

    // Add file field instances.
    $field_name = 'xt_url_file_field';

    // This field should get created in xdruple_fields.install.
    if (field_info_field($field_name)) {
      // Add 'commerce_product' instance.
      $instance = field_info_instance('commerce_product', $field_name, 'product');
      if (is_null($instance)) {
        $instance = array(
          'field_name' => $field_name,
          'entity_type' => 'commerce_product',
          'bundle' => 'product',
          'label' => 'Product Files',
        );
        $instance['settings']['file_extensions'] = 'txt pdf';
        $instance['widget']['weight'] = $weight;
        $instance['display']['default']['weight'] = $weight;
        field_create_instance($instance);
      }

      // Add 'xtuple_xdruplecommerceproduct' instance.
      $entity_type = $name . '_' . strtolower($resource);
      $instance = field_info_instance($entity_type, $field_name, $entity_type);
      if (is_null($instance)) {
        $instance = array(
          'field_name' => $field_name,
          'entity_type' => $name . '_' . strtolower($resource),
          'bundle' => $name . '_' . strtolower($resource),
          'label' => 'Product Files',
        );
        $instance['settings']['file_extensions'] = 'txt pdf';
        $instance['widget']['weight'] = $weight;
        $instance['display']['default']['weight'] = $weight;
        field_create_instance($instance);
      }
    }
  }
}

/**
 * Implements hook_field_storage_pre_insert().
 */
function xdruple_fields_field_storage_pre_insert($entity_type, $entity, &$skip_fields) {
  // Wrap the update hook, which does everything we need.
  xdruple_fields_field_storage_pre_update($entity_type, $entity, $skip_fields);
}

/**
 * Implements hook_field_storage_pre_update().
 */
function xdruple_fields_field_storage_pre_update($entity_type, $entity, &$skip_fields) {
  // Check $entity_type and only act on ones we support.
  $entity_info = entity_get_info($entity_type);

  if (isset($entity_info['discovery-client']) && $entity_info['discovery-client'] === 'xtuple') {

    // Get all the fields attached to this entity.
    $bundle = $entity_type === 'commerce_product' ? 'product' : $entity_type;
    $instances = field_info_instances($entity_type, $bundle);
    foreach ($instances as $field_name => $instance) {
      if ($field_name !== 'xt_url_image_field' && $field_name !== 'xt_url_file_field') {
        continue;
      }

      $field_info = field_info_field($field_name);
      $type = $field_info['type'];

      $resource = $entity_info['resource'];
      $entity_properties = $entity_info['json-schema'][$resource]['properties'];

      // Check the entity for 'urls' property.
      if (array_key_exists('urls', $entity_properties)) {
        $field_type_urls = array();
        $associated_urls = array();

        if (!empty($entity->urls)) {
          foreach ($entity->urls as $url_key => $url) {
            // Because filefield_paths_entity_update() calls field_attach_update(),
            // this function is called twice on entity save. Skip any partial
            // saved urls where $url['url'] is just a uuid, not an array.
            if (is_array($url['url'])) {
              $remote_url = parse_url($url['url']['path']);
              $parts = explode('/', $remote_url['path']);
              $file_name = array_pop($parts);
              $file_parts = explode('.', $file_name);
              $file_type = array_pop($file_parts);

              // Handle images with the image field and pdfs with the file field.
              $allowed_ext = explode(' ', $instance['settings']['file_extensions']);
              if (!in_array($file_type, $allowed_ext)) {
                continue;
              }

              $field_type_urls[$url_key] = $url;
            } else {
              // Set values for half saved urls so they don't get unset on the entity.
              $field_type_urls[$url_key] = $url;
              $associated_urls[] = $url['uuid'];
            }
          }
        }

        // This url is handled by this field type.
        foreach ($entity->{$field_name}[LANGUAGE_NONE] as $file_info) {
          // Get the file info.
          $file = file_load($file_info['fid']);

          $url_url_uuids = array();
          foreach ($field_type_urls as $url_key => $url) {
            // Because filefield_paths_entity_update() calls field_attach_update(),
            // this function is called twice on entity save. Skip any partial
            // saved urls where $url['url'] is just a uuid, not an array.
            if (is_array($url['url'])) {
              $url_url_uuids[$url['uuid']] = $url['url']['uuid'];
            } else {
              $url_url_uuids[$url['uuid']] = $url['url'];
            }
          }

          if ($matching_uuid = array_search($file->uuid, $url_url_uuids)) {

            $associated_urls[] = $matching_uuid;

            // TODO: Update any changes? Currently, file and image fields
            // don't allow you to change a file, just remove it, which we
            // handle below.
          } else {
            // The filefield_paths module can change a uploaded file's path.
            // It does it after this is called. Figure out what the path will
            // be changed to and save that back to xTuple.
            if (module_exists('filefield_paths')) {
              $filefield_data = array(
                'file' => $file,
                $entity_type => $entity,
              );

              $filefield_path_value = $instance['settings']['filefield_paths']['file_path']['value'];
              $filefield_path_settings = $instance['settings']['filefield_paths']['file_path']['options'];
              $filefield_path = filefield_paths_process_string($filefield_path_value, $filefield_data, $filefield_path_settings);

              $filefield_name_value = $instance['settings']['filefield_paths']['file_name']['value'];
              $filefield_name_settings = $instance['settings']['filefield_paths']['file_name']['options'];
              $filefield_name = filefield_paths_process_string($filefield_name_value, $filefield_data, $filefield_name_settings);

              $upload_path = file_create_url($field_info['settings']['uri_scheme'] . '://' . $filefield_path . '/' . $filefield_name);
            } else {
              $upload_path = file_create_url($file->uri);
            }

            $url_values = array(
              'uuid' => $file->uuid,
              'name' => !empty($file->title) ? $file->title : $file->filename,
              'path' => $upload_path,
            );
            $new_url = entity_create('xtuple_url', $url_values);
            entity_save('xtuple_url', $new_url);

            // The API may return a different UUID. Update the Drupal file to match.
            $file->uuid = $new_url->uuid;
            $file = file_save($file);

            $new_uuid = xdruple_guidv4();
            $entity->urls[] = array(
              'uuid' => $new_uuid,
              'url' => $new_url->uuid,
              'purpose' => 'S'
            );

            // Set pointer to the last value we just added.
            end($entity->urls);
            // Get the key of the last value.
            $new_key = key($entity->urls);

            $associated_urls[] = $new_uuid;
            $field_type_urls[$new_key] = $entity->urls[$new_key];

            // Reset the array pointer back to the start.
            reset($entity->urls);
          }
        }

        // Find all urls that are not associated with a field and remove them.
        foreach ($field_type_urls as $url_key => $url) {
          if (!in_array($url['uuid'], $associated_urls)) {
            unset($entity->urls[$url_key]);
          }
        }
      }
      // Add this field to $skip_fields.
      $skip_fields[$field_info['id']] = $field_info;
    }
  }
}

/**
 * Implements hook_field_storage_pre_load().
 *
 * Side loads images and files from a xTuple entity's 'urls' property into
 * the 'xt_url_image_field' and 'xt_url_file_field' respective fields.
 */
function xdruple_fields_field_storage_pre_load($entity_type, $entities, $age, &$skip_fields, $options) {
  // Check $entity_type and only act on ones we support.
  $entity_info = entity_get_info($entity_type);

  if (isset($entity_info['discovery-client']) && $entity_info['discovery-client'] === 'xtuple') {

    // Get all the fields attached to this entity.
    $bundle = $entity_type === 'commerce_product' ? 'product' : $entity_type;
    $instances = field_info_instances($entity_type, $bundle);
    foreach ($instances as $field_name => $instance) {
      if ($field_name !== 'xt_url_image_field' && $field_name !== 'xt_url_file_field') {
        continue;
      }

      $field_info = field_info_field($field_name);
      $type = $field_info['type'];

      $resource = $entity_info['resource'];
      $entity_properties = $entity_info['json-schema'][$resource]['properties'];

      // Check the entity for 'urls' property.
      if (array_key_exists('urls', $entity_properties)) {
        foreach ($entities as $entity_id => $entity) {
          $image_delta = 0;
          $file_delta = 0;
          foreach ($entity->urls as $url) {
            // Check file_associations for existing uuid.
            $query = new EntityFieldQuery();
            $result = $query->entityCondition('entity_type', 'file')
              ->propertyCondition('uuid', $url['url']['uuid'])
              ->execute();

            $file_exists = false;

            $remote_url = parse_url($url['url']['path']);
            $parts = explode('/', $remote_url['path']);
            $file_name = array_pop($parts);
            $file_parts = explode('.', $file_name);
            $file_type = array_pop($file_parts);

            // Handle images with the image field and pdfs with the file field.
            $allowed_ext = explode(' ', $instance['settings']['file_extensions']);
            if (!in_array($file_type, $allowed_ext)) {
              continue;
            }

            if (count($result) === 0) {
              // If uuid doesn't exist, fetch the file from the remote URL.
              $parts_path = implode('/', $parts);
              $path = 'public://xtuple' . $parts_path;
              $remote_file = file_get_contents($url['url']['path']);
              file_prepare_directory($path, FILE_CREATE_DIRECTORY);
              $destination = $path . '/' . $file_name;

              // Insert the file into Drupal's file system.
              $file = file_save_data($remote_file, $destination, FILE_EXISTS_RENAME);
              $info = image_get_info($file->uri);
            } else {
              $file = file_load(key($result['file']));
              $info = image_get_info($file->uri);

              $file_exists = true;
            }

            if ($type === 'image') {
              if (!$info || empty($info['extension'])) {
                continue;
              } else {
                if (!$file_exists) {
                  // Set the UUID to match xTuples.
                  $file->uuid = $url['url']['uuid'];
                  $file = file_save($file);
                  file_usage_add($file, 'file', $entity_type, $entity_id);
                }

                if (!empty($file)) {
                  // Associate that file with this product entity.
                  $entity->xt_url_image_field[LANGUAGE_NONE][$image_delta] = array(
                    'fid' => $file->fid,
                    'alt' => '',
                    'title' => '',
                    'width' => $info['width'],
                    'height' => $info['height'],
                  );

                  $image_delta++;
                }
              }
            } else if ($type === 'file') {
              // This is not an image.
              if (!$info) {
                if (!$file_exists) {
                  // Set the UUID to match xTuples.
                  $file->uuid = $url['url']['uuid'];
                  $file = file_save($file);
                  file_usage_add($file, 'file', $entity_type, $entity_id);
                }

                if (!empty($file)) {
                  // Associate that file with this product entity.
                  $entity->xt_url_file_field[LANGUAGE_NONE][$file_delta] = array(
                    'fid' => $file->fid,
                    'alt' => '',
                    'title' => '',
                  );

                  $file_delta++;
                }
              }
            }
          }
        }
      }
      // Add this field to $skip_fields.
      $skip_fields[$field_info['id']] = $field_info;
    }
  }
}

/**
 * Implements hook_form_alter()
 *
 * Set Customer default on checkout forms.
 */
function xdruple_fields_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id === 'commerce_checkout_form_checkout' || $form_id === 'commerce_order_ui_order_form') {
    if ($form_id === 'commerce_checkout_form_checkout') {
      $form_billing = &$form['customer_profile_billing'];
      $form_shipping = &$form['customer_profile_shipping'];
      if (isset($form_state['values']['customer_profile_billing'])) {
        $form_state_billing = &$form_state['values']['customer_profile_billing'];
      }
      if (isset($form_state['values']['customer_profile_shipping'])) {
        $form_state_shipping = &$form_state['values']['customer_profile_shipping'];
      }
    } else if ($form_id === 'commerce_order_ui_order_form') {
      $form_billing = &$form['commerce_customer_billing'][LANGUAGE_NONE]['profiles'][0];
      $form_shipping = &$form['commerce_customer_shipping'][LANGUAGE_NONE]['profiles'][0];

      if (isset($form_state['values']['xd_customer'])) {
        $form_state_billing = &$form_state['values'];
      }
      if (isset($form_state['values']['xd_ship_to'])) {
        $form_state_shipping = &$form_state['values'];
      }
    }

    // Add ajax call back to the Ship To select so we can dynamically add the
    // Contact and Address fields if no Ship To is set.
    $form_shipping['xd_ship_to'][LANGUAGE_NONE]['#ajax'] = array(
      'callback' => 'xdruple_fields_checkout_shipto_ajax_callback',
      'wrapper' => 'xtuple-ship-to-wrapper',
      'method' => 'replace',
      'effect' => 'fade',
    );
    $form_billing['xd_customer'][LANGUAGE_NONE]['#ajax'] = array(
      'callback' => 'xdruple_fields_checkout_shipto_ajax_callback',
      'wrapper' => 'xtuple-ship-to-wrapper',
      'method' => 'replace',
      'effect' => 'fade',
    );

    if ($form_id === 'commerce_order_ui_order_form') {
      // Limit validation to skip the 'commerce_customer_billing' and 'commerce_customer_shipping' fields.
      // @See: commerce_customer_profile_manager_validate()
      foreach ($form_state['field'] as $field_name => $field) {
        if ($field_name !== 'commerce_customer_billing' && $field_name !== 'commerce_customer_shipping') {
          $form_billing['xd_customer'][LANGUAGE_NONE]['#limit_validation_errors'][] = array($field_name);
        }
      }
    }
    if ($form_id === 'commerce_checkout_form_checkout') {
      foreach ($form_state['field']['#parents'] as $field_name => $field) {
        $form_billing['xd_customer'][LANGUAGE_NONE]['#limit_validation_errors'][] = array($field_name);
      }
    }

    $form_shipping['xd_ship_to'][LANGUAGE_NONE]['#submit'] = array('');
    $form_billing['xd_customer'][LANGUAGE_NONE]['#submit'] = array('');

    // Remove the 'erp_xdruplecommercecontactaddress' field from the form.
    // There is a seperate address field on billing and shipping profiles
    // that we use for orders. This allows the user to set a different address
    // from the one associated with their contact.
    if (isset($form_shipping['xd_ship_to_contact'][LANGUAGE_NONE]['form']['erp_xdruplecommercecontactaddress'])) {
      unset($form_shipping['xd_ship_to_contact'][LANGUAGE_NONE]['form']['erp_xdruplecommercecontactaddress']);
    }
    if (isset($form_billing['xd_bill_to_contact'][LANGUAGE_NONE]['form']['erp_xdruplecommercecontactaddress'])) {
      unset($form_billing['xd_bill_to_contact'][LANGUAGE_NONE]['form']['erp_xdruplecommercecontactaddress']);
    }

    $shiptos = array();
    // Remove the Ship Tos that are not for this customer. Reset the #options array.
    if (isset($form_billing['xd_customer'][LANGUAGE_NONE]['#default_value']) &&
      (!isset($form_state['values']) || empty($form_state['values'])) &&
      $default_customer = $form_billing['xd_customer'][LANGUAGE_NONE]['#default_value'][0]) {
      // This is the first load of an edit form, use the default.

      $shiptos = xdruple_fields_get_ship_to_list($default_customer);
    } elseif (isset($form_billing['xd_customer'][LANGUAGE_NONE][0]['target_id']['#default_value']) &&
      (!isset($form_state['values']) || empty($form_state['values'])) &&
      preg_match("/.+\(([\w\+@\.]+)\)/", $form_billing['xd_customer'][LANGUAGE_NONE][0]['target_id']['#default_value'], $matches)) {
      // This is the first load of an edit form, use the default from autocomplete.

      $shiptos = xdruple_fields_get_ship_to_list($matches[1]);
    } else {
      // This is the second or more Ajax load, get it from the saved order.

      if ($form_id === 'commerce_order_ui_order_form') {
        $order = commerce_order_load_by_number($form_state['commerce_order']->order_number);
        $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
        $cust_key = $order_wrapper->commerce_customer_billing->xd_customer->number->value();
        $shiptos = xdruple_fields_get_ship_to_list($cust_key);
      }
      if ($form_id === 'commerce_checkout_form_checkout') {
        if (isset($form_state_billing['xd_customer'][LANGUAGE_NONE][0]['target_id']) &&
          $default_customer = $form_state_billing['xd_customer'][LANGUAGE_NONE][0]['target_id']) {

          $shiptos = xdruple_fields_get_ship_to_list($default_customer);
        } elseif (isset($form_billing['xd_customer'][LANGUAGE_NONE][0]['target_id']['#default_value'])) {
          preg_match("/.+\((.+)\)/", $form_billing['xd_customer'][LANGUAGE_NONE][0]['target_id']['#default_value'], $matches);
          // This is the first load of an edit form, use the default from autocomplete.

          $shiptos = xdruple_fields_get_ship_to_list($matches[1]);
        }
      }
    }

    if (count($shiptos) > 0) {
      // Reset the '#empty_option' => '- None -' to be more descriptive.
      $form_shipping['xd_ship_to'][LANGUAGE_NONE]['#options'] = array('_none' => '- Custom Ship To -');
      $form_shipping['xd_ship_to'][LANGUAGE_NONE]['#options'] = $form_shipping['xd_ship_to'][LANGUAGE_NONE]['#options'] + $shiptos;
    }

    // Add wapper to 'customer_profile_shipping' fieldset so changing Ship To can do an ajax
    // replace to update that section of the form.
    $form_shipping['#prefix'] = '<div id="xtuple-ship-to-wrapper">';
    $form_shipping['#suffix'] = '</div>';

    if (isset($form_shipping['xd_ship_to'][LANGUAGE_NONE]['#default_value'][0]) && (!isset($form_state['values']) || empty($form_state['values']))) {
      // First time loading form with a default set.
      $shipto_id = $form_shipping['xd_ship_to'][LANGUAGE_NONE]['#default_value'][0];
    } else if (isset($form_state_shipping['xd_ship_to'][LANGUAGE_NONE][0]['target_id'])) {
      // After first load with target_id set.
      $shipto_id = $form_state_shipping['xd_ship_to'][LANGUAGE_NONE][0]['target_id'];
    }

    // If a default Ship To is set on first load of the form OR the Ship To
    // select list was changed and a Ship To was selected, remove Contact and Address.
    if (isset($shipto_id) && array_key_exists($shipto_id, $shiptos)) {
      // Remove the Inline Entity Form entities so the Custom Ship To Contact
      // and Address will be blank if the user flips back to it.
      $contact_ief_id = $form_shipping['xd_ship_to_contact'][LANGUAGE_NONE]['#ief_id'];
      $address_ief_id = $form_shipping['xd_ship_to_address'][LANGUAGE_NONE]['#ief_id'];
      foreach($form_state['inline_entity_form'] as $ief_key => $ief_child) {
        if (strncmp($ief_key, $contact_ief_id, strlen($contact_ief_id)) === 0) {
          unset($form_state['inline_entity_form'][$ief_key]);
        }
        if (strncmp($ief_key, $address_ief_id, strlen($address_ief_id)) === 0) {
          unset($form_state['inline_entity_form'][$ief_key]);
        }
      }

      // Remove the Ship To Contact and Address parts of the checkout form.
      unset($form_shipping['xd_ship_to_contact']);
      unset($form_shipping['xd_ship_to_address']);
      if (isset($form_state_shipping['ship_to_contact_wrapper'])) {
        unset($form_state_shipping['ship_to_contact_wrapper']);
      }
      if (isset($form_state_shipping['ship_to_address_wrapper'])) {
        unset($form_state_shipping['ship_to_address_wrapper']);
      }
      if (isset($form_state_shipping['xd_ship_to_contact'])) {
        unset($form_state_shipping['xd_ship_to_contact']);
      } else {
        // TODO
      }
      if (isset($form_state_shipping['xd_ship_to_address'])) {
        unset($form_state_shipping['xd_ship_to_address']);
      } else {
        // TODO
      }
      unset($form_state['input']['customer_profile_shipping']['xd_ship_to_contact']);
      unset($form_state['input']['customer_profile_shipping']['xd_ship_to_address']);

      // Get and display as read-only the Contact and Address from the selected ship to.
      $shipto = entity_load_single('xtuple_xdruplecommerceshipto', $shipto_id);

      // Show the user the selected Ship To's Contact and Address.
      $form_shipping['ship_to_contact_wrapper'] = array(
        '#type' => 'fieldset',
        '#title' => t('Ship To Contact'),
        'first_name' => array(
          '#type' => 'textfield',
          '#title' => t('First Name'),
          '#default_value' => isset($shipto->contact['firstName']) ? $shipto->contact['firstName'] : '',
          '#disabled' => true,
        ),
        'last_name' => array(
          '#type' => 'textfield',
          '#title' => t('Last Name'),
          '#default_value' => isset($shipto->contact['lastName']) ? $shipto->contact['lastName'] : '',
          '#disabled' => true,
        ),
        'email' => array(
          '#type' => 'textfield',
          '#title' => t('Primary Email'),
          '#default_value' => isset($shipto->contact['primaryEmail']) ? $shipto->contact['primaryEmail'] : '',
          '#disabled' => true,
        ),
        'phone' => array(
          '#type' => 'textfield',
          '#title' => t('Phone'),
          '#default_value' => isset($shipto->contact['phone']) ? $shipto->contact['phone'] : '',
          '#disabled' => true,
        ),
      );
      $form_shipping['ship_to_address_wrapper'] = array(
        '#type' => 'fieldset',
        '#title' => t('Ship To Address'),
        'line1' => array(
          '#type' => 'textfield',
          '#title' => t('Line1'),
          '#default_value' => isset($shipto->address['line1']) ? $shipto->address['line1'] : '',
          '#disabled' => true,
        ),
        'line2' => array(
          '#type' => 'textfield',
          '#title' => t('Line2'),
          '#default_value' => isset($shipto->address['line2']) ? $shipto->address['line2'] : '',
          '#disabled' => true,
        ),
        'city' => array(
          '#type' => 'textfield',
          '#title' => t('City'),
          '#default_value' => isset($shipto->address['city']) ? $shipto->address['city'] : '',
          '#disabled' => true,
        ),
        'state' => array(
          '#type' => 'select',
          '#title' => t('State'),
          '#options' => array(isset($shipto->address['state']) ? $shipto->address['state'] : ''),
          '#default_value' => isset($shipto->address['state']) ? $shipto->address['state'] : '',
          '#disabled' => true,
        ),
      );
    } else {
      // This is a Custom Ship To. Unset the default value.
      unset($form_shipping['xd_ship_to'][LANGUAGE_NONE]['#default_value']);
      $_SESSION['rescued']['custom_ship_to'] = true;
    }
  }

  if (strpos($form_id, 'views_form_commerce_cart_form_') === 0 ||
      strpos($form_id, 'views_form_ft_commerce_cart_form_') === 0) {

    // Only alter button submits if the cart form View shows line items.
    $view = reset($form_state['build_info']['args']);

    if (!empty($view->result)) {
      // We add some fields to the order and display them on /cart. We want them
      // saved for all cart submit buttons.
      // Add our submit handler to the other submit buttons.
      $form['actions']['checkout']['#submit'] = array_merge(array('xdruple_fields_cart_form_submit'), $form['actions']['checkout']['#submit']);
      $form['actions']['submit']['#submit'] = array_merge(array('xdruple_fields_cart_form_submit'),$form['actions']['submit']['#submit']);
      $form['actions']['#weight'] = 110;

      // Attach our PO Number and Order Notes fields to the cart form.
      $entity_type = 'commerce_order';
      $entity = $form_state['order'];

      $po_field_name = 'xd_order_po_number';
      $po_items = isset($entity->{$po_field_name}[LANGUAGE_NONE]) ? $entity->{$po_field_name}[LANGUAGE_NONE] : array();
      $po_field = field_info_field($po_field_name);
      $po_instance = field_info_instance($entity_type, $po_field_name, $entity->type);
      $po_field_form = field_default_form($entity_type, $entity, $po_field, $po_instance, LANGUAGE_NONE, $po_items, $form, $form_state);
      $po_field_form[$po_field_name]['#weight'] = 100;
      $form += (array) $po_field_form;

      $notes_field_name = 'xd_order_notes';
      $notes_items = isset($entity->{$notes_field_name}[LANGUAGE_NONE]) ? $entity->{$notes_field_name}[LANGUAGE_NONE] : array();
      $notes_field = field_info_field($notes_field_name);
      $notes_instance = field_info_instance($entity_type, $notes_field_name, $entity->type);
      $notes_field_form = field_default_form($entity_type, $entity, $notes_field, $notes_instance, LANGUAGE_NONE, $notes_items, $form, $form_state);
      $notes_field_form[$notes_field_name]['#weight'] = 105;
      $form += (array) $notes_field_form;
    }
  }
}

/**
 * Submit handler to save the attached PO Number and Order Notes fields.
 */
function xdruple_fields_cart_form_submit($form, &$form_state) {
  // We add some fields to the order and display them on /cart. We want them
  // saved for all cart submit buttons.

  // Notify field widgets.
  field_attach_submit('commerce_order', $form_state['order'], $form, $form_state);

  commerce_order_save($form_state['order']);
}

/**
 * Ajax callback to return the Ship To select list when the Customer list is populated.
 */
function xdruple_fields_checkout_shipto_ajax_callback($form, $form_state) {
  if (isset($form['customer_profile_shipping'])) {
    return $form['customer_profile_shipping'];
  } else if ($form['commerce_customer_shipping']) {
    return $form['commerce_customer_shipping'][LANGUAGE_NONE]['profiles'][0];
  }
}

/**
 * Perform alterations before the default ids are returned with Entityreference
 * Prepopulate module.
 *
 * @param $ids
 *   The array of existing defualt ids.
 * @param $field
 *   The entityreference field.
 * @param $instance
 *   The entityreference field instance.
 */
function xdruple_fields_entityreference_prepopulate_default_ids_alter(&$ids, $field, $instance) {
  if (!$ids) {
    // TODO: Add your id to the array.
    //$ids[] = 1;
    //$ids = array('95');
  } else {
    // TODO: Modify the Existing defualt ids.
    //$ids[0] = 2;
    //$ids = array('95');
  }

  if ($field['field_name'] === 'xd_customer' && isset($_SESSION['rescued']['customer'])) {
    $ids = array($_SESSION['rescued']['customer']);
  }

  if ($field['field_name'] === 'xd_bill_to_contact' && isset($_SESSION['rescued']['customer'])) {
    $ids = array(xdruple_fields_get_bill_to_cntct_default($_SESSION['rescued']['customer']));
  }

  if ($field['field_name'] === 'xd_bill_to_address' && isset($_SESSION['rescued']['customer'])) {
    $ids = array(xdruple_fields_get_bill_to_addr_default($_SESSION['rescued']['customer']));
  }

  if ($field['field_name'] === 'xd_ship_to' && !$_SESSION['rescued']['custom_ship_to']) {
    if (isset($_SESSION['rescued']['ship_to'])) {
      $ids = array($_SESSION['rescued']['ship_to']);
    } else {
      $ids = array(xdruple_fields_get_ship_to_default($_SESSION['rescued']['customer']));
    }
  }
}

/**
 * Implements hook_views_pre_execute().
 */
function xdruple_fields_views_pre_execute($view) {
  if ($view->name === 'xd_ship_to_list' && isset($_SESSION['rescued']['ship_to'])) {
    $view->query->query->propertyConditions[] = array(
      'column' => 'customer',
      'value' => $_SESSION['rescued']['customer'],
      'operator' => 'EQUALS',
    );
  }

  if ($view->name === 'xd_customer_list' && isset($view->display_handler->options['entityreference_options']['ids'][0])) {
    $view->query->query->propertyConditions[] = array(
      'column' => 'number',
      'value' => $view->display_handler->options['entityreference_options']['ids'][0],
      'operator' => 'EQUALS',
    );
  }

  if ($view->name === 'xd_address_list' && isset($view->display_handler->options['entityreference_options']['ids'][0])) {
    $view->query->query->propertyConditions[] = array(
      'column' => 'number',
      'value' => $view->display_handler->options['entityreference_options']['ids'][0],
      'operator' => 'EQUALS',
    );
  }

  if ($view->name === 'xd_contact_list' && isset($view->display_handler->options['entityreference_options']['ids'][0])) {
    $view->query->query->propertyConditions[] = array(
      'column' => 'number',
      'value' => $view->display_handler->options['entityreference_options']['ids'][0],
      'operator' => 'EQUALS',
    );
  }
}

/**
 * Implements hook_block_info().
 */
function xdruple_fields_block_info() {
  $blocks = array();

  $blocks['xtuple_order_defaults'] = array(
    'info' => t('Order Defaults'),
    'cache' => DRUPAL_NO_CACHE,
    'status' => 1,
    'region' => 'sidebar_first',
    'visibility' => 0,
    'pages' => 'checkout*',

  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function xdruple_fields_block_view($delta) {
  // TODO: Should probably create a special permisison for this.
  if (user_access('edit personal rescued entities')) {
    // Display the xTuple default order settings form.
    if ($delta == 'xtuple_order_defaults') {
      $block = array();
      $block['subject'] = t('Order Settings');
      $block['content'] = drupal_get_form('xtuple_order_defaults_form');
      return $block;
    }
  }
}

/**
 * Implements hook_forms().
 */
function xdruple_fields_forms() {
  $forms['xtuple_order_defaults_form']= array(
    'callback' => 'xdruple_fields_order_defaults',
    'callback arguments' => array('xtuple_order_defaults_form'),
  );

  return $forms;
}

/**
 * Helper function to get form default values
 *
 * @param $form_state
 *
 * @return array
 */
function xdruple_fields_order_defaults_form_default_values($form_state) {
  $customer = isset($form_state['values']['customer']) ? $form_state['values']['customer'] : NULL;

  if (empty($customer)) {
    $customer = isset($_SESSION['rescued']['customer']) ? $_SESSION['rescued']['customer'] : NULL;
  }
  else {
    unset($form_state['input']['ship_to']);
    unset($form_state['input']['site']);

    if (isset($_SESSION['rescued']['customer']) && $_SESSION['rescued']['customer'] !== $customer) {
      unset($_SESSION['rescued']['ship_to']);
      unset($_SESSION['rescued']['site']);
    }
  }

  $default_customer = isset($_SESSION['rescued']['customer']) ? $_SESSION['rescued']['customer'] : '';
  $default_ship_to  = !empty($_SESSION['rescued']['ship_to']) ? $_SESSION['rescued']['ship_to'] : xdruple_fields_get_ship_to_default($customer);

  $defaults = array(
    'defaults' => array(
      'customer' => $default_customer,
      'ship_to'  => $default_ship_to,
      'date'     => xdruple_rescued_scheduled_date('tomorrow'),
    ),
    'options'  => array(
      'ship_to' => xdruple_fields_get_ship_to_list($customer),
    ),
  );

  $sites = xdruple_fields_get_site_list();
  if (count($sites) > 0) {
    $session_site = xdruple_rescued_session_get('site');

    if (!empty($session_site)) {
      $default_site = $session_site;
    }
    else {
      $default_site = xdruple_fields_get_site_default($customer);

      if (empty($default_site)) {
        $default_site = variable_get('xdruple_commerce_default_warehouse', FALSE);

        if (!$default_site) {
          drupal_set_message(t('Cannot find any Warehouse/Sites to set as default. Please contact the website administrator.'), 'warning', FALSE);
          $default_site = '';
        }
      }
    }
    $defaults['defaults']['site'] = $default_site;
  }
  $defaults['options']['sites'] = $sites;

  return $defaults;
}

/**
 * Form builder; Output xTuple Default Order Settings form.
 */
function xdruple_fields_order_defaults($form, &$form_state, $form_id) {
  global $user;

  if (empty($form_state['build_info']['wrapper_id'])) {
    $form_state['build_info']['wrapper_id'] = md5(rand());
  }

  $wrapper_id = $form_state['build_info']['wrapper_id'];

  $defaults = xdruple_fields_order_defaults_form_default_values($form_state);

  $form[$form_id] = array(
    '#type' => 'container',
  );

  $form[$form_id]['customer'] = array(
    '#type'              => 'textfield',
    '#title'             => t('Customer'),
    '#autocomplete_path' => 'user/' . $user->uid . '/preferences/customer/autocomplete',
    '#empty_option'      => t('- None -'),
    '#default_value'     => $defaults['defaults']['customer'],
    '#attributes'        => array(
      'title' => t('Select the Customer to use when placing an order.'),
    ),
    '#wrapper_classes'   => array(
      'col-lg' => 'col-lg-3'
    ),
    '#ajax'              => array(
      'callback' => 'xdruple_fields_customer_ajax_callback',
      'wrapper'  => 'xtuple-defaults-wrapper-' . $wrapper_id,
      'method'   => 'replace',
      'effect'   => 'fade',
    ),
  );

  $form[$form_id]['defaults_wrapper'] = array(
    '#type'   => 'markup',
    '#prefix' => '<div id="xtuple-defaults-wrapper-' . $wrapper_id . '">',
    '#suffix' => '</div>',
  );

  $form[$form_id]['defaults_wrapper']['ship_to'] = array(
    '#type'          => 'select',
    '#title'         => t('Ship To'),
    '#options'       => $defaults['options']['ship_to'],
    '#empty_option'  => t('- None -'),
    '#default_value' => $defaults['defaults']['ship_to'],
    '#attributes'    => array(
      'title' => t('Select the Ship To to use when placing an order.')
    ),
    '#wrapper_classes'   => array(
      'col-lg' => 'col-lg-3'
    )
  );

  if (count($defaults['options']['sites']) > 0) {
    $form[$form_id]['defaults_wrapper']['site'] = array(
      '#type'          => 'select',
      '#title'         => t('Warehouse/Site'),
      '#options'       => $defaults['options']['sites'],
      '#empty_option'  => t('- None -'),
      '#default_value' => $defaults['defaults']['site'],
      '#attributes'    => array(
        'title' => t('Select the Warehouse to use when placing an order.'),
      ),
      '#wrapper_classes'   => array(
        'col-lg' => 'col-lg-3'
      )
    );

    if (variable_get('xdruple_commerce_default_warehouse_access', FALSE)) {
      $form[$form_id]['defaults_wrapper']['site']['#attributes']['disabled'] = TRUE;
    }
  }

  $form[$form_id]['scheduled_date'] = array(
    '#type'                => 'date_popup',
    '#title'               => t('Scheduled Date'),
    '#date_label_position' => 'hidden',
    '#size'                => 15,
    '#default_value'       => $defaults['defaults']['date'],
    '#date_format'         => 'Y-m-d',
    '#date_year_range'     => '-0:+1',
    '#attributes'          => array(
      'title' => t('Select the Scheduled Date to use when placing an order.'),
    ),
    '#wrapper_classes'   => array(
      'col-lg' => 'col-lg-2'
    ),
    '#datepicker_options'  => array(
      'minDate' => 'today',
    ),
  );

  $form[$form_id]['actions']           = array(
    '#type' => 'actions'
  );
  $form[$form_id]['actions']['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Save'),
  );

  $form[$form_id]['#submit'][] = 'xtuple_order_defaults_form_submit';

  $form['#attributes']['class'][] = 'row';

  return $form;
}

/**
 * Process a block search form submission.
 */
function xtuple_order_defaults_form_submit($form, &$form_state) {
  // TODO: validation.

  $form_id = $form['form_id']['#value'];

  // Some fields in this form are dynamic like 'site'. Only change the
  // $_SESSION['rescued'] value if the field was shown to the user.
  if (isset($form_state['values']['customer'])) {
    if (!empty($form_state['values']['customer'])) {
      // When there is a real value, store it in $_SESSION['rescued'].
      $_SESSION['rescued']['customer'] = $form_state['values']['customer'];

      $customer = entity_load_single('xtuple_xdruplecustomer', $form_state['values']['customer']);
      if ($customer) {
        $_SESSION['rescued']['customer_terms'] = $customer->terms;
        $_SESSION['rescued']['customer_credit'] = $customer->creditStatus;
      }
    } else {
      // When the value is null, unset() $_SESSION['rescued'].
      unset($_SESSION['rescued']['customer']);
      unset($_SESSION['rescued']['customer_terms']);
      unset($_SESSION['rescued']['customer_credit']);
    }
  }

  if (isset($form_state['values']['ship_to'])) {
    if (!empty($form_state['values']['ship_to'])) {
      $_SESSION['rescued']['ship_to'] = $form_state['values']['ship_to'];
      $_SESSION['rescued']['custom_ship_to'] = false;
    } else {
      unset($_SESSION['rescued']['ship_to']);
    }
  }

  if (isset($form_state['values']['site'])) {
    if (!empty($form_state['values']['site'])) {
      $_SESSION['rescued']['site'] = $form_state['values']['site'];
    } else {
      $default_site = variable_get('xdruple_commerce_default_warehouse', false);
      if (!empty($default_site)) {
        $_SESSION['rescued']['site'] = $default_site;
      }
    }
  } else {
    $default_site = variable_get('xdruple_commerce_default_warehouse', false);
    if (!empty($default_site)) {
      $_SESSION['rescued']['site'] = $default_site;
    }
  }

  $scheduled_date = !empty($form_state['values']['scheduled_date']) ? $form_state['values']['scheduled_date'] : 'tomorrow';
  xdruple_rescued_scheduled_date($scheduled_date, TRUE);

  // TODO: set a message.
}

// Switching select lists to auto complete search when the user is an admin.
function xdruple_fields_field_widget_properties_alter(&$widget, $context) {
  global $user;

  // If this is an admin or an employee user. Therefore, they have access to
  // most resources from the xTuple API. The entity_reference fields will
  // load a select list for all possible resources of that type. For these
  // users, that list could be in the 100's or 1000's.
  // Switch this widget's "Add Existing" widget to an auto-complete search.

  if ($widget['type'] === 'inline_entity_form_single' &&
    $widget['settings']['type_settings']['allow_existing']) {

    $entity_info = entity_get_info($context['field']['settings']['target_type']);
    if ($entity_info['entity class'] === 'RescuedEntityNew') {
      if (user_access('view employee rescued entities', $user)) {
        $widget['settings']['type_settings']['existing_widget_settings']['module'] = 'entityreference';
        $widget['settings']['type_settings']['existing_widget_settings']['type'] = 'entityreference_autocomplete';
        $widget['settings']['type_settings']['existing_widget_settings']['size'] =  60;
        $widget['settings']['type_settings']['existing_widget_settings']['multiple_entities'] = false;
      }
    }
  } elseif ($widget['type'] === 'options_select' && $context['field']['field_name'] !== 'xd_ship_to') {
    // Skip the 'xd_ship_to' because we already filter by customer and it has
    // custom logic in xdruple_fields_form_alter().
    if (user_access('view employee rescued entities', $user)) {
      $widget['type'] = 'entityreference_autocomplete';
      $widget['module'] = 'entityreference';
      $widget['settings'] = array(
        'match_operator' => 'CONTAINS',
        'size' => 60,
        'path' => null,
      );
    }
  }
}

/**
 * Implements hook_theme().
 */
function xdruple_fields_theme() {
  $items = array(
    'xtuple_order_defaults' => array(
      'render element' => 'form',
      'template' => 'xtuple-order-defaults',
      'path' => drupal_get_path('module', 'xdruple_fields') . '/theme',
    ),
  );

  $items += \Xtuple\Xcommerce\Theme\Block::themeDefinition('order_defaults_form', array(
    'hide_empty_title'   => TRUE,
    'hide_empty_content' => TRUE,
    'hide_empty_block'   => TRUE,
  ));

  return $items;
}

/**
 * Process variables for xtuple-order-defaults.tpl.php.
 *
 * The $variables array contains the following arguments:
 * - $form
 *
 * @see xtuple-order-defaults.tpl.php
 */
function template_preprocess_xtuple_order_defaults(&$variables) {
  $variables['search'] = array();
  $hidden = array();
  // Provide variables named after form keys so themers can print each element independently.
  foreach (element_children($variables['form']['xtuple_order_defaults_form']) as $key) {
    $type = $variables['form']['xtuple_order_defaults_form'][$key]['#type'];
    if ($type == 'hidden' || $type == 'token') {
      $hidden[] = drupal_render($variables['form']['xtuple_order_defaults_form'][$key]);
    }
    else {
      $variables['search'][$key] = drupal_render($variables['form']['xtuple_order_defaults_form'][$key]);
    }
  }
  // Hidden form elements have no value to themers. No need for separation.
  $variables['search']['hidden'] = implode($hidden);
  // Collect all form elements to make it easier to print the whole form.
  $variables['search_form'] = implode($variables['search']);
}

/**
 * Ajax callback to return the Ship To select list when the Customer list is populated.
 */
function xdruple_fields_customer_ajax_callback($form, $form_state) {
  $form_id = $form['#form_id'];

  return $form[$form_id]['defaults_wrapper'];
}

/**
 * Get a list of Customers for the current user.
 *
 * @return Array of Customers.
 */
function xdruple_fields_get_customer_list() {
  global $user;
  $cid = 'xdruple_customer_list-' . $user->uid;
  $options = cache_get($cid, 'cache');

  if (empty($options)) {
    $options = array();

    $customers = rescued_api_resource_list('xtuple', 'XdrupleCommerceCustomer');
    $schema = rescued_get_single_json_schema('XdrupleCommerceCustomer', null, 'xtuple');
    $key = rescued_json_schema_get_resource_key($schema['XdrupleCommerceCustomer']['properties']);

    foreach ($customers as $customer) {
      $options[$customer[$key]] = $customer['name'];
    }

    cache_set($cid, $options, 'cache', CACHE_TEMPORARY);

    return $options;
  } else {
    return $options->data;
  }
}

/**
 * Do an auto complete search for a matching Customer for the current user.
 *
 * @param string $customer_str The partial Customer name string to search for.
 * @return string The JSON string of matches.
 */
function xdruple_fields_get_customer_callback($customer_str = NULL) {
  global $user;

  $options = array();
  $optParams = array(
    'q' => $customer_str,
  );

  $customers = rescued_api_resource_list('xtuple', 'XdrupleCommerceCustomer', $optParams, true);
  $schema = rescued_get_single_json_schema('XdrupleCommerceCustomer', null, 'xtuple');
  $key = rescued_json_schema_get_resource_key($schema['XdrupleCommerceCustomer']['properties']);

  foreach ($customers as $customer) {
    $options[$customer[$key]] = $customer['name'];
  }
  drupal_json_output($options);
  exit;
}

/**
 * Get a list of Ship Tos for the current user.
 *
 * @param $customer
 *   The id of the customer to return Ship Tos for.
 *
 * @return Array of Ship Tos.
 */
function xdruple_fields_get_ship_to_list($customer) {
  global $user;
  $cid = 'xdruple_ship_to_list-' . $user->uid . '-' . strval($customer);
  $options = cache_get($cid, 'cache');

  if (empty($options)) {
    $options = array();

    if (!empty($customer)) {
      $optParams = array(
        'query' => array(
          'customer' => array(
            'EQUALS' => $customer,
          ),
        )
      );
    } else {
      $optParams = array();
    }

    $shiptos = rescued_api_resource_list('xtuple', 'XdrupleCommerceShipto', $optParams);
    $schema = rescued_get_single_json_schema('XdrupleCommerceShipto', null, 'xtuple');
    $key = rescued_json_schema_get_resource_key($schema['XdrupleCommerceShipto']['properties']);

    foreach ($shiptos as $shipto) {
      $options[$shipto[$key]] = $shipto['name'];
    }

    cache_set($cid, $options, 'cache', CACHE_TEMPORARY);

    return $options;
  } else {
    return $options->data;
  }
}

/**
 * Get a Customer's defualt Ship To for the current user.
 *
 * @param $customer
 *   The id of the customer to return Ship Tos for.
 *
 * @return Id of defualt Customer Ship To.
 */
function xdruple_fields_get_ship_to_default($customer) {
  if (empty($customer)) {
    // Need a customer to return the default. Return empty string in this case.
    return '';
  }

  global $user;
  $cid = 'xdruple_ship_to_default-' . $user->uid . '-' . strval($customer);
  $options = cache_get($cid, 'cache');

  if (empty($options)) {
    $options = array();

    $optParams = array(
      'query' => array(
        'customer' => array(
          'EQUALS' => $customer,
        ),
        'isDefault' => array(
          'EQUALS' => true,
        ),
      )
    );

    $shiptos = rescued_api_resource_list('xtuple', 'XdrupleCommerceShipto', $optParams);
    $schema = rescued_get_single_json_schema('XdrupleCommerceShipto', null, 'xtuple');
    $key = rescued_json_schema_get_resource_key($schema['XdrupleCommerceShipto']['properties']);

    if (count($shiptos) === 0) {
      // This user doesn't have access to the customer default or none was set in xTuple.
      cache_set($cid, '', 'cache', CACHE_TEMPORARY);

      return '';
    }

    cache_set($cid, $shiptos[0][$key], 'cache', CACHE_TEMPORARY);

    // There can only be one default per customer. Return it.
    return $shiptos[0][$key];
  } else {
    return $options->data;
  }
}

/**
 * Get a list of Warehouse/Sites for the current user.
 *
 * @return Array of Warehouse/Sites.
 */
function xdruple_fields_get_site_list() {
  global $user;
  $cid = 'xdruple_site_list-' . $user->uid;
  $options = cache_get($cid, 'cache');

  if (empty($options)) {
    $options = array();

    $sites = rescued_api_resource_list('xtuple', 'Site');
    $schema = rescued_get_single_json_schema('Site', null, 'xtuple');
    $key = rescued_json_schema_get_resource_key($schema['Site']['properties']);

    foreach ($sites as $site) {
      $options[$site[$key]] = $site['code'] . ' - ' . $site['description'];
    }

    cache_set($cid, $options, 'cache', CACHE_TEMPORARY);

    return $options;
  } else {
    return $options->data;
  }
}

/**
 * Get a list of Warehouse/Sites for the current user.
 *
 * @param $customer
 *   The id of the customer to return Ship Tos for.
 *
 * @return Array of Warehouse/Sites.
 */
function xdruple_fields_get_site_default($cust_id) {
  if (empty($cust_id)) {
    // Need a customer to return the default. Return empty string in this case.
    return '';
  }

  global $user;
  $cid = 'xdruple_site_default-' . $cust_id;
  $default_site = cache_get($cid, 'cache');

  if (empty($default_site)) {
    $options = array();

    $customer = rescued_api_resource_load('xtuple', 'XdrupleCustomer', $cust_id, 'number');

    if (isset($customer['data'])) {
      $default_site = $customer['data']['preferredSite'];
    } else {
      $default_site = '';
    }
    cache_set($cid, $default_site, 'cache', CACHE_TEMPORARY);

    return $default_site;
  } else {
    return $default_site->data;
  }
}

/**
 * Get a Customer's defualt Bill To Contact.
 *
 * @param $customer
 *   The id of the customer to return Contact for.
 *
 * @return Id of defualt Customer Bill To Contact.
 */
function xdruple_fields_get_bill_to_cntct_default($cust_id) {
  if (empty($cust_id)) {
    // Need a customer to return the default. Return empty string in this case.
    return '';
  }

  global $user;
  $cid = 'xdruple_bill_to_cntct_default-' . strval($cust_id);
  $default_bill_to = cache_get($cid, 'cache');

  if (empty($default_bill_to)) {
    $customer = rescued_api_resource_load('xtuple', 'XdrupleCustomer', $cust_id, 'number');

    if (isset($customer['data'])) {
      $default_bill_to = $customer['data']['billingContact']['number'];
    } else {
      $default_bill_to = null;
    }
    cache_set($cid, $default_bill_to, 'cache', CACHE_TEMPORARY);

    return $default_bill_to;
  } else {
    return $default_bill_to->data;
  }
}

/**
 * Get a Customer's defualt Bill To Address.
 *
 * @param $customer
 *   The id of the customer to return the Address for.
 *
 * @return Id of defualt Customer Bill To Address.
 */
function xdruple_fields_get_bill_to_addr_default($cust_id) {
  if (empty($cust_id)) {
    // Need a customer to return the default. Return empty string in this case.
    return '';
  }

  global $user;
  $cid = 'xdruple_bill_to_addr_default-' . strval($cust_id);
  $default_bill_to = cache_get($cid, 'cache');

  if (empty($default_bill_to)) {
    $customer = rescued_api_resource_load('xtuple', 'XdrupleCustomer', $cust_id, 'number');

    if (isset($customer['data'])) {
      $default_bill_to = $customer['data']['billingContact']['address']['number'];
    } else {
      $default_bill_to = null;
    }
    cache_set($cid, $default_bill_to, 'cache', CACHE_TEMPORARY);

    return $default_bill_to;
  } else {
    return $default_bill_to->data;
  }
}

/**
 * Implements hook_theme_registry_alter()
 */
function xdruple_fields_theme_registry_alter(&$theme_registry) {
  $module = drupal_get_path('module', 'xdruple_fields');
  $theme_registry['date_popup']['theme path'] = $module;
  $theme_registry['date_popup']['function'] = 'xdruple_fields_date_popup';
}

/**
 * Overrides theme_date_popup()
 *
 * @see xdruple_fields_theme_registry_alter()
 */
function xdruple_fields_date_popup($vars) {
  $element = $vars['element'];
  $attributes = !empty($element['#wrapper_attributes']) ? $element['#wrapper_attributes'] : array('class' => array());
  if (!in_array('xtuple_order_defaults_form', $element['#array_parents'])) {
    $attributes['class'][] = 'container-inline-date';
  }
  else {
    $attributes['class'][] = 'container-date-popup';
  }
  // If there is no description, the floating date elements need some extra padding below them.
  $wrapper_attributes = array('class' => array('date-padding'));
  if (empty($element['date']['#description'])) {
    $wrapper_attributes['class'][] = 'clearfix';
  }
  // Add an wrapper to mimic the way a single value field works, for ease in using #states.
  if (isset($element['#children'])) {
    $element['#children'] = '<div id="' . $element['#id'] . '" ' . drupal_attributes($wrapper_attributes) .'>' . $element['#children'] . '</div>';
  }
  return '<div ' . drupal_attributes($attributes) .'>' . theme('form_element', $element) . '</div>';
}

/**
 * Access callback
 *
 * @param $account
 * @return bool
 */
function xdruple_fields_user_preferences_access($account) {
  $access = FALSE;

  global $user;
  if (user_access('edit personal rescued entities') && $user->uid == $account->uid) {
    $access = TRUE;
  }

  return $access;
}

function xdruple_fields_order_defaults_form_block() {
  $output = '';

  global $user;
  if (xdruple_fields_user_preferences_access($user)) {
    $form = drupal_get_form('xtuple_order_defaults_form');
    $output .= drupal_render($form);
  }

  return $output;
}
