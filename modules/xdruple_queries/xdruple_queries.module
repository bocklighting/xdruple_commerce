<?php

/**
 * @file keep Drupal hooks implementations
 */

/**
 * Implements hook_init()
 */
function xdruple_queries_init() {
  module_load_include('inc', 'xdruple_queries', 'forms/add_to_standard_order');
  module_load_include('inc', 'xdruple_queries', 'forms/remove_from_standard_order');
  module_load_include('inc', 'xdruple_queries', 'pages/categories');
  module_load_include('inc', 'xdruple_queries', 'pages/product');
  module_load_include('inc', 'xdruple_queries', 'pages/products_by_category');
}

/**
 * Implements hook_menu()
 */
function xdruple_queries_menu() {
  $items = array();

  $items['products'] = array(
    'title'            => 'Products',
    'page callback'    => 'xdruple_queries_products_page',
    'page arguments'   => array(1),
    'access callback'  => 'xdruple_access',
    'access arguments' => array('products', 'view', 'xtuple: access product lists'),
    'file'             => 'pages/products.inc',
    'type'             => MENU_NORMAL_ITEM,
  );

  $items['products/list'] = array(
    'title'  => 'Products',
    'type'   => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['products/%'] = array(
    'title'            => 'Product',
    'title callback'   => 'xdruple_queries_product_page_title',
    'title arguments'  => array(1),
    'page callback'    => 'xdruple_queries_product_page',
    'page arguments'   => array(1),
    'access callback'  => 'xdruple_access',
    'access arguments' => array('products/%', 'view', 'xtuple: access product lists'),
    'file'             => 'pages/product.inc',
    'type'             => MENU_CALLBACK,
  );

  $items['products/categories'] = array(
    'title'            => 'Categories',
    'page callback'    => 'xdruple_queries_categories_page',
    'access callback'  => 'xdruple_access',
    'access arguments' => array('products/categories', 'view', 'xtuple: access product lists'),
    'file'             => 'pages/categories.inc',
    'type'             => MENU_LOCAL_TASK,
  );

  $items['products/categories/%'] = array(
    'title'            => 'Products by category',
    'page callback'    => 'xdruple_queries_products_by_category_page',
    'page arguments'   => array(2),
    'access callback'  => 'xdruple_access',
    'access arguments' => array('products/categories/%', 'view', 'xtuple: access product lists'),
    'file'             => 'pages/products_by_category.inc',
    'type'             => MENU_CALLBACK,
  );

  if (variable_get('xdruple_queries_product_recent_page_enabled', TRUE)) {
    $items['products/recent'] = array(
      'title'            => 'Recently ordered',
      'page callback'    => 'xdruple_queries_products_recent_page',
      'access callback'  => 'xdruple_access',
      'access arguments' => array('products/recent', 'view', 'xtuple: access product lists'),
      'file'             => 'pages/products_recent.inc',
      'type'             => MENU_LOCAL_TASK,
    );
  }

  if (variable_get('xdruple_queries_products_standard_page_enabled', TRUE)) {
    $items['products/standard'] = array(
      'title'            => 'Standard order',
      'page callback'    => 'xdruple_queries_products_standard_page',
      'access callback'  => 'xdruple_access',
      'access arguments' => array('products/standard', 'view', 'xtuple: access product lists'),
      'file'             => 'pages/products_standard.inc',
      'type'             => MENU_LOCAL_TASK,
    );
  }

  return $items;
}

/**
 * Implements hook_permission().
 */
function xdruple_queries_permission() {
  return array(
    'xtuple: access product lists' => array(
      'title'       => t('Access xTuple Product Lists'),
      'description' => t('Allow users to view lists of products.'),
    ),
  );
}

/**
 * Implements hook_rescued_register_clients_resources_alter().
 */
function xdruple_queries_rescued_register_clients_resources_alter(&$rescued_clients_url_resources) {
  if (!in_array('XdProduct', $rescued_clients_url_resources['xtuple'])) {
    $rescued_clients_url_resources['xtuple'][] = 'XdProduct';
  }
  if (!in_array('XdCatalog', $rescued_clients_url_resources['xtuple'])) {
    $rescued_clients_url_resources['xtuple'][] = 'XdCatalog';
  }
  if (!in_array('XdCatalogProduct', $rescued_clients_url_resources['xtuple'])) {
    $rescued_clients_url_resources['xtuple'][] = 'XdCatalogProduct';
  }
  if (!in_array('XdCatalogRecentOrd', $rescued_clients_url_resources['xtuple'])) {
    $rescued_clients_url_resources['xtuple'][] = 'XdCatalogRecentOrd';
  }
  if (!in_array('XdCatalogShiptoStdOrd', $rescued_clients_url_resources['xtuple'])) {
    $rescued_clients_url_resources['xtuple'][] = 'XdCatalogShiptoStdOrd';
  }
  if (!in_array('XdStdOrdProduct', $rescued_clients_url_resources['xtuple'])) {
    $rescued_clients_url_resources['xtuple'][] = 'XdStdOrdProduct';
  }

  return $rescued_clients_url_resources;
}

/**
 * Implements hook_forms()
 */
function xdruple_queries_forms($form_id, $args) {
  $forms = array();

  if (strpos($form_id, 'xdruple_queries_add_to_standard_order_form_') === 0) {
    $forms[$form_id] = array(
      'callback' => 'xdruple_queries_add_to_standard_order_form',
    );
  }

  if (strpos($form_id, 'xdruple_queries_remove_from_standard_order_form_') === 0) {
    $forms[$form_id] = array(
      'callback' => 'xdruple_queries_remove_from_standard_order_form',
    );
  }

  return $forms;
}

/**
 * Implements hook_theme()
 */
function xdruple_queries_theme() {
  $items = array();

  $items['products_page'] = array(
    'variables' => array(
      'products' => array(),
    ),
    'template'  => 'theme/products-page',
    'file'      => 'theme/theme.inc',
  );

  $items['products_page_item'] = array(
    'variables' => array(
      'product' => NULL,
    ),
    'template'  => 'theme/products-page-item',
    'file'      => 'theme/theme.inc',
  );

  return $items;
}

/**
 * @param $entity_type string - e.g. xdcatalogrecentord
 *
 * @return array
 */
function _xdruple_queries_load_orders($entity_type) {
  $orders = array();

  if ($ship_to = xdruple_rescued_session_get('ship_to')) {
    $cid   = "xtuple_{$entity_type}-$ship_to";
    $cache = cache_get($cid, 'cache');

    if (empty($cache)) {
      $conditions = array(
        'shipto' => $ship_to,
      );

      $orders = entity_load("xtuple_{$entity_type}", FALSE, $conditions);
      cache_set($cid, $orders, 'cache', CACHE_TEMPORARY);
    }
    else {
      $orders = $cache->data;
    }
  }

  return $orders;
}

/**
 * @param $order_type string - e.g. xdcatalogrecentord
 *
 * @return array
 */
function _xdruple_queries_load_products_by_order_type($order_type) {
  $products = array();

  $orders = _xdruple_queries_load_orders($order_type);
  foreach ($orders as $order) {
    $products = array_merge($products, $order->products);
  }

  return $products;
}

/**
 * @param $product_ids NULL|array - if NULL, show all products or filter by products ids if array
 * @param $params
 * @param $product_item_theme
 *
 * @return array
 */
function _xdruple_prepare_products_list($product_ids = NULL, array $params = array(), $product_item_theme = 'products_page_item') {
  $list = array();

  if ($product_ids === NULL || !empty($product_ids)) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'commerce_product');
    $query->pager(20);

    if (!empty($product_ids)) {
      $query->propertyCondition('product_id', $product_ids, 'ANY');
    }

    if (isset($_GET['search'])) {
      $query->propertyCondition('q', urldecode($_GET['search']), 'CONTAINS');
    }

    $products = $query->execute();

    // TODO: The rescued_entity_field_query_builder(EntityFieldQuery $query)
    // function runs through entity_load to do the actual query. In theory,
    // an EntityFieldQuery() could go directly to the API and then you would
    // call entity_load() for the returned ids which will attach fields, etc.
    // We can skip this call for now. This is one reason why the entity cache
    // and EntityFieldQuery cache need to work together.
    if (isset($products['commerce_product'])) {
      foreach ($products['commerce_product'] as $product) {
        $list[] = theme($product_item_theme, array(
          'product' => $product,
          'params'  => $params,
        ));
      }
    }
  }

  return $list;
}

/**
 * Helper function to build "Add to cart" button
 */
function _xdruple_queries_add_to_cart_button($product, $show_qty = FALSE, $context = array(), $qty = 1, $order_id = 0) {
  $product_ids = array($product->product_id);
  $form_id     = commerce_cart_add_to_cart_form_id($product_ids);

  $line_item                                         = commerce_product_line_item_new($product, $qty, $order_id, array());
  $line_item->data['context']['product_ids']         = $product_ids;
  $line_item->data['context']['add_to_cart_combine'] = TRUE;

  $form = drupal_get_form($form_id, $line_item, $show_qty, $context);

  return drupal_render($form);
}

/**
 * Helper function to build Image field
 */
function _xdruple_queries_product_image($product, $style = '') {
  $img = !empty($product->xt_url_image_field[LANGUAGE_NONE][0]['uri']) ? l(theme('image_style', array(
    'style_name' => $style,
    'path'       => $product->xt_url_image_field[LANGUAGE_NONE][0]['uri'],
  )), "products/{$product->product_id}", array(
    'html' => TRUE,
  )) : '';

  return $img;
}

/**
 * Helper function to show correct Product price
 */
function _xdruple_queries_price($product, $qty = 1, $order_id = 0, $format = TRUE) {
  $line_item = commerce_product_line_item_new($product, $qty, $order_id, array(), NULL);
  xdruple_commerce_get_customer_line_item_price($line_item);
  $unit_price = $line_item->commerce_unit_price[LANGUAGE_NONE]['0'];

  if ($format) {
    $price = commerce_currency_format($unit_price['amount'], $unit_price['currency_code']);
  }
  else {
    $price = $unit_price['amount'];
  }

  return $price;
}
