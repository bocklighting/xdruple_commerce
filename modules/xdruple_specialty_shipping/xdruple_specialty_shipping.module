<?php

/**
 * @file
 * Create a Drupal Commerce Specialty Shipping Service
 */
use Xtuple\Drupal7\Application\Entity\CommerceProduct\CommerceProductProxy;

/**
 * Implements hook_menu().
 */
function xdruple_specialty_shipping_menu() {
  // xDruple Commerce Specialty Shipping Service settings page.
  $items['admin/commerce/config/shipping/methods/xdruple_specialty_shipping/edit'] = [
    'title' => 'Edit',
    'description' => 'xDruple Commerce Specialty Shipping Service method settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['xdruple_specialty_shipping_settings_form'],
    'access arguments' => ['administer shipping'],
    'file' => 'xdruple_specialty_shipping.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 0,
  ];

  return $items;
}

/**
 * Implements hook_cpanel_alter()
 *
 * @param $form
 * @param $form_state
 */
function xdruple_specialty_shipping_cpanel_alter(&$form, &$form_state) {
  $freightClassList = \Xtuple\REST\Resource\FreightClass\FreightClassResource::readAll(xdruple_commerce_application()->storage());
  $options = [];
  foreach ($freightClassList as $freightClass) {
    $options[$freightClass->code()] = $freightClass->description();
  }
  if (!empty($options)) {
    $form['xdruple_commerce_store_settings']['xdruple_specialty_shipping_freight_classes'] = [
      '#type' => 'checkboxes',
      '#options' => $options,
      '#title' => t('Freight Classes that require Specialty Shipping'),
      '#description' => t('If checked, products with these freight classes will not show UPS Shipping Available icons.'),
      '#required' => TRUE,
      '#default_value' => variable_get('xdruple_specialty_shipping_freight_classes', []),
    ];
  }
  else {
    drupal_set_message(t('Cannot find any Freight Classes.'), 'warning');
  }
}

/**
 * Implements hook_commerce_shipping_method_info().
 */
function xdruple_specialty_shipping_commerce_shipping_method_info() {
  $shipping_methods = [];

  $shipping_methods['xdruple_specialty_shipping'] = [
    'title' => t('Specialty Shipping Service'),
    'description' => t('Allows you to define Specialty Shipping Service for customers to choose during checkout.'),
  ];

  return $shipping_methods;
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function xdruple_specialty_shipping_commerce_shipping_service_info() {
  $shipping_services = [];

  $shipping_services['xdruple_specialty_shipping'] = [
    'title' => t('Specialty Shipping Service'),
    'description' => t('One of our representatives will be in touch with you to arrange shipping after your order is placed.'),
    'display_title' => t('Request Specialty Shipping Service'),
    'shipping_method' => 'xdruple_specialty_shipping',
    "rules_component" => FALSE,
    'price_component' => 'shipping',
    'callbacks' => [
      'rate' => 'xdruple_specialty_shipping_service_rate',
    ],
  ];

  return $shipping_services;
}

/**
 * Shipping service callback: returns a base price array for a shipping service
 * calculated for the given order.
 *
 * @param $shipping_service
 * @param $order
 *
 * @return array
 */
function xdruple_specialty_shipping_service_rate($shipping_service, $order) {
  return [
    'amount' => variable_get('xdruple_specialty_shipping_service_amount', 0) * 100,
    'currency_code' => commerce_default_currency(),
    'data' => [],
  ];
}

/**
 * @param $form
 * @param $form_state
 */
function xdruple_specialty_shipping_form_xdruple_email_settings_form_alter(&$form, &$form_state) {
  $form["xdruple_specialty_shipping_admin_notification"] = [
    "#type" => "fieldset",
    "#group" => "emails",
    "#title" => t("Specialty shipping order admin notification"),
  ];
  $form["xdruple_specialty_shipping_admin_notification"]["xdruple_specialty_shipping_admin_notification_emails"] = [
    "#type" => "textfield",
    "#title" => "E-mail",
    "#default_value" => variable_get("xdruple_specialty_shipping_admin_notification_emails", ""),
    "#description" => "Use comma to separate multiple addresses.",
  ];
  $form["xdruple_specialty_shipping_admin_notification"]["xdruple_specialty_shipping_admin_notification_subject"] = [
    "#type" => "textfield",
    "#title" => "Subject",
    "#default_value" => variable_get("xdruple_specialty_shipping_admin_notification_subject"),
    "#required" => TRUE,
  ];
}

/**
 * Helper function for 'Shipping via UPS Available' field
 *
 * @param $freightClass
 *
 * @return bool
 */
function xdruple_specialty_shipping_is_specialty_shipping_freight_class($freightClass) {
  $special_shipping = variable_get('xdruple_specialty_shipping_freight_classes', []);
  return in_array($freightClass, $special_shipping, TRUE);
}

/**
 * @param $variables
 */
function xdruple_specialty_shipping_preprocess_xdruple_product_page(&$variables) {
  /** @var CommerceProductProxy $product */
  $product = $variables["product"];
  if (xdruple_specialty_shipping_is_specialty_shipping_freight_class($product->xdProduct()->freightClass())) {
    $variables["context"]["specialty_shipping"] = [
      "#theme" => "xdruple_product_specialty_shipping",
      "#weight" => -15,
    ];
  }
}

/**
 * Implements hook_commerce_shipping_method_collect_rates().
 *
 * @param $method
 * @param $order
 *
 * @throws \EntityMetadataWrapperException
 */
function xdruple_specialty_shipping_commerce_shipping_method_collect_rates($method, $order) {
  if ($method == "xdruple_specialty_shipping") {
    if (!empty($order->shipping_rates)) {
      $hasSpecialtyShipping = FALSE;
      foreach ($order->commerce_line_items["und"] as $item) {
        $line_item = commerce_line_item_load($item["line_item_id"]);
        if ($line_item->type == "product") {
          $product = xdruple_product_entity_load($line_item->commerce_product["und"][0]["product_id"]);
          if (xdruple_specialty_shipping_is_specialty_shipping_freight_class($product->xdProduct()->freightClass())) {
            $hasSpecialtyShipping = TRUE;
            break;
          }
        }
      }
      if ($hasSpecialtyShipping) {
        foreach ($order->shipping_rates as $key => $shipping_line_item) {
          if (!empty($shipping_line_item->data["shipping_service"]["shipping_method"])
            && $shipping_line_item->data["shipping_service"]["shipping_method"] == "ups"
          ) {
            unset($order->shipping_rates[$key]);
          }
        }
      }
    }
    foreach (commerce_shipping_services($method) as $service) {
      /** @var string $callback */
      if ($callback = commerce_shipping_service_callback($service, "rate")) {
        $price = $callback($service, $order);
        if ($price) {
          /** @var \stdClass $line_item */
          $line_item = commerce_shipping_service_rate_calculate($service["name"], $price, $order->order_id);
          /** @var \EntityDrupalWrapper $line_item_wrapper */
          $line_item_wrapper = entity_metadata_wrapper("commerce_line_item", $line_item);
          if (!is_null($line_item_wrapper->get("commerce_unit_price")->amount->value())) {
            $line_item->weight = empty($service["weight"]) ? 0 : $service["weight"];
            $order->shipping_rates[$service["name"]] = $line_item;
          }
        }
      }
    }
  }
}
