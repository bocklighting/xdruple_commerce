<?php

/**
 * @file
 * Create a Drupal Commerce Specialty Shipping Service
 */

/**
 * Implements hook_menu().
 */
function xdruple_specialty_shipping_menu() {
  // xDruple Commerce Specialty Shipping Service settings page.
  $items['admin/commerce/config/shipping/methods/xdruple_specialty_shipping/edit'] = array(
    'title' => 'Edit',
    'description' => 'xDruple Commerce Specialty Shipping Service method settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xdruple_specialty_shipping_settings_form'),
    'access arguments' => array('administer shipping'),
    'file' => 'xdruple_specialty_shipping.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 0,
  );

  return $items;
}

/**
 * Implements hook_cpanel_alter()
 */
function xdruple_specialty_shipping_cpanel_alter(&$form, &$form_state) {
  $query = new EntityFieldQuery();
  $count = $query->entityCondition('entity_type', 'xtuple_freightclass')
    ->count()
    ->execute();

  if ($count <= 100) {
    $freight_classes = entity_load('xtuple_freightclass');
  }
  else {
    // Paginate through all freight_classes.
    $pages = ceil($count / 100);
    $freight_classes = array();

    $i = 0;
    while ($i < $pages) {
      $page_query = new EntityFieldQuery();
      $more_classes = $page_query->entityCondition('entity_type', 'xtuple_freightclass')
        ->range($i * 100, 100)
        ->propertyOrderBy('id', 'ASC')
        ->execute();

      $freight_classes = $freight_classes + $more_classes['xtuple_freightclass'];
      $i++;
    }
  }

  $options = array();
  foreach ($freight_classes as $key => $freight_class) {
    $options[$key] = $freight_class->description;
  }
  if (count($freight_classes) > 1) {
    $form['xdruple_commerce_store_settings']['xdruple_specialty_shipping_freight_classes'] = array(
      '#type' => 'checkboxes',
      '#options' => $options,
      '#title' => t('Freight Classes that require Specialty Shipping'),
      '#description' => t('If checked, products with these freight classes will not show UPS Shipping Available icons.'),
      '#required' => TRUE,
      '#default_value' => variable_get('xdruple_specialty_shipping_freight_classes', array()),
    );
  }
  else {
    drupal_set_message(t('Cannot find any Freight Classes.'), 'warning');
  }
}

/**
 * Implements hook_commerce_shipping_method_info().
 */
function xdruple_specialty_shipping_commerce_shipping_method_info() {
  $shipping_methods = array();

  $shipping_methods['xdruple_specialty_shipping'] = array(
    'title' => t('Specialty Shipping Service'),
    'description' => t('Allows you to define Specialty Shipping Service for customers to choose during checkout.'),
  );

  return $shipping_methods;
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function xdruple_specialty_shipping_commerce_shipping_service_info() {
  $shipping_services = array();

  $shipping_services['xdruple_specialty_shipping'] = array(
    'title' => t('Specialty Shipping Service'),
    'description' => t('One of our representatives will be in touch with you to arrange shipping after your order is placed.'),
    'display_title' => t('Request Specialty Shipping Service'),
    'shipping_method' => 'xdruple_specialty_shipping',
    'price_component' => 'shipping',
    'callbacks' => array(
      'rate' => 'xdruple_specialty_shipping_service_rate',
    )
  );

  return $shipping_services;
}

/**
 * Shipping service callback: returns a base price array for a shipping service
 * calculated for the given order.
 */
function xdruple_specialty_shipping_service_rate($shipping_service, $order) {
  return array(
    'amount' => variable_get('xdruple_specialty_shipping_service_amount', 0) * 100,
    'currency_code' => commerce_default_currency(),
    'data' => array(),
  );
}

/**
 * Implements hook_entity_load().
 *
 * Automatically create (and always keep) condition to block UPS delivery for specialty shipping items.
 */
function xdruple_specialty_shipping_entity_load($entities, $type) {
  if ($type == 'rules_config') {
    /** @var RulesReactionRule $entity */
    foreach ($entities as $entity) {
      if ($entity->name == 'commerce_shipping_method_ups') {
        $freight_set = FALSE;
        $freight_key = -1;
        $freight_classes = array_filter(variable_get('xdruple_specialty_shipping_freight_classes', array()));

        /** @var RulesCondition $condition */
        foreach ($entity->conditions() as $key => $condition) {
          if ($condition->getElementName() == 'xdruple_shipping_contains_freight_class_product') {
            $freight_set = TRUE;
            $freight_key = $key;
          }
        }

        // Theoretically, we should handle situation, when freight classes list is empty, and so remove any
        // condition related to it. But as Freight Classes is a mandatory field, we can skip it in current case.
        if (!empty($freight_classes)) {
          $freight_settings = array(
            'commerce_order:select' => 'commerce_order',
            'freightClass' => $freight_classes,
            'operator' => '>=',
            'value' => 1,
          );

          if (!$freight_set) {
            // Create missing condition
            $condition = new RulesCondition('xdruple_shipping_contains_freight_class_product', $freight_settings);
            $condition->negate();
            $entity->condition($condition);
          }
          else {
            // Update existing one
            $entity->conditions()->seek($freight_key);
            $condition = $entity->conditions()->current();
            $condition->settings = $freight_settings;
            $condition->negate();
          }
        }
      }
    }
  }
}
