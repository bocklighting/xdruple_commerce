<?php

/**
* Implements hook_commerce_checkout_pane_info().
*/
function xdruple_commerce_cp_commerce_checkout_pane_info() {
  $checkout_panes = array();

  // Iterate over the xTuple entity pane types and convert them into
  // checkout panes. By default the panes are not enabled.
  foreach (xdruple_commerce_cp_get_types() as $type_name => $type) {
    //@TODO check if xTuple entity pane type linked to order.
    $group_label = check_plain(t($type->label));
    $checkout_panes['xd_commerce_cp_' . $type_name] = array(
      'name' => t('xTuple Integrated: @group_label', array('@group_label' => $group_label)),
      'title' => $group_label,
      'base' => 'xdruple_commerce_cp_panes_contents',
      'enabled' => FALSE,
      'file' => 'includes/xdruple_commerce_cp.checkout_pane.inc',
    );
  }

  return $checkout_panes;
}

/**
 * Configure the xTuple entity pane reference field for the specified order type.
 *
 * @param $profile2_type
 *   The profile2 type object.
 * @param $order_type
 *   The machine-name of the order type to add fields to.
 */
function xdruple_commerce_cp_configure_pane_type($profile2_type, $order_type = 'commerce_order') {
  $label = t('xTuple Entity: @label', array('@label' => $profile2_type->label));

  // Add the xTuple entity pane reference fields for each type.
  $field_name = 'xd_commerce_cp_' . $profile2_type->type;

  // First check to ensure this field doesn't already exist and was just inactive
  // because of the profile defining module being disabled previously.
  commerce_activate_field($field_name);

  $field = field_info_field($field_name);
  $instance = field_info_instance('commerce_order', $field_name, $order_type);

  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'entityreference',
      'cardinality' => 1,
      'entity_types' => array('commerce_order'),
      'translatable' => FALSE,
      'settings' => array(
        'target_type' => 'profile2',
        'handler' => 'base',
        'handler_settings' => array(
          'target_bundles' => array(
            $profile2_type->type => $profile2_type->type,
          ),
        ),
      ),
    );
    $field = field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'commerce_order',
      'bundle' => $order_type,
      'label' => $label,
      'widget' => array(
        'type' => 'inline_entity_form_single',
        'module' => 'inline_entity_form',
    ),
      'display' => array(),
    );

    // Set the default display formatters for various view modes.
    foreach (array('default', 'customer', 'administrator') as $view_mode) {
      $instance['display'][$view_mode] = array(
        'label' => 'above',
        'type' => 'entityreference_entity_view',
      );
    }
    field_create_instance($instance);
  }
  variable_set('xd_commerce_cp_' . $profile2_type->type . '_field', $field_name);
}

/**
 * Delete the xTuple entity pane type reference field for the specified order type.
 *
 * @param $profile2_type
 *   The profile2 type object.
 * @param $batch
 *   Weather this function is called in a batch or not. Defaults to FALSE.
 *   If TRUE, it is the caller's responsibility to call field_purge_batch().
 * @param $order_type
 *   The machine-name of the order type to add fields to.
 * @return int $batch_size
 *   The quantity of field values to be deleted when deleting this field.
 *   Can be used by field_purge_batch().
 */
function xdruple_commerce_cp_delete_pane_type($profile2_type, $batch = FALSE, $order_type = 'commerce_order') {
  $field_name = 'xd_commerce_cp_' . $profile2_type->type;
  $field = field_info_field($field_name);
  if (!empty($field)) {
    $query = new EntityFieldQuery();
    $results = $query
      ->fieldCondition($field)
      ->deleted(TRUE)
      ->execute();
    $batch_size = count($results);
    field_delete_field($field_name);
    variable_del('xd_commerce_cp_' . $profile2_type->type . '_field');
    if (!$batch) {
      field_purge_batch($batch_size);
    }
    else {
      return $batch_size;
    }
  }
}

function xdruple_commerce_cp_get_types() {
  $types = array();

  $type = new stdClass();
  $type->label = 'Contact';
  $type->type = 'xtuple_contact';

  $types[$type->type] = $type;

  return $types;
}
