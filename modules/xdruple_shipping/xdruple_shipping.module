<?php

use Xtuple\REST\Resource\ShipVia\ShipViaList;
use Xtuple\REST\Resource\Site\SiteList;
use Xtuple\REST\Resource\Site\SiteResource;

/**
 * Implements hook_cpanel_alter()
 *
 * @param $form
 * @param $form_state
 */
function xdruple_shipping_cpanel_alter(&$form, &$form_state) {
  if (module_exists('commerce_pickup')) {
    $siteList = SiteList::all(xdruple_commerce_application()->storage());

    $options = [];
    foreach ($siteList as $site) {
      $options[$site->code()] = $site->description();
    }
    if (!empty($options)) {
      $form['xdruple_commerce_store_settings']['xdruple_shipping_allowed_pickup_sites'] = [
        '#type' => 'checkboxes',
        '#options' => $options,
        '#title' => t('Allowed Pickup Sites'),
        '#description' => t('Limit the Sites customers are allowed to pickup from. If checked, a Customer can choose to pickup their order from this Site location.'),
        '#required' => TRUE,
        '#default_value' => variable_get('xdruple_shipping_allowed_pickup_sites', []),
      ];
    }
    else {
      drupal_set_message(t('Cannot find any Sites to set as allowed pickup locations.'), 'warning');
    }
  }
}

/**
 * Gets a list of physical modules valid weight units.
 *
 * @See: physical_weight_units()
 *
 * @return array
 *   An array of valid weight units of measurement.
 */
function xdruple_shipping_physical_weight_units() {
  // Use drupal_static because this gets calls a lot repeatedly.
  $valid_units = &drupal_static(__FUNCTION__);

  if (!isset($valid_units)) {
    $valid_units = array_keys(physical_weight_units());
  }

  return $valid_units;
}

/**
 * Gets a list of physical modules valid dimension units.
 *
 * @See: physical_dimension_units()
 *
 * @return array
 *   An array of valid dimension units of measurement.
 */
function xdruple_shipping_physical_dimension_units() {
  // Use drupal_static because this gets calls a lot repeatedly.
  $valid_units = &drupal_static(__FUNCTION__);

  if (!isset($valid_units)) {
    $valid_units = array_keys(physical_dimension_units());
  }

  return $valid_units;
}

/**
 * Converts an xTuple UOM to physical modules weight unit.
 *
 * @See: physical_weight_units()
 *
 * @param string $unit
 *   The type of weight unit whose name should be returned; by default this can
 *   be lb, oz, kg, or g.
 *
 * @param array  $valid_units
 *   An array of valid physical modules weight units.
 *
 * @return string or FALSE
 *   The valid unit of measurement or FALSE if not found.
 */
function xdruple_shipping_map_physical_weight_units($unit, $valid_units) {
  $unit = strtolower($unit);

  if (in_array($unit, $valid_units)) {
    return $unit;
  }
  else {
    drupal_set_message(t('Weight unit of measure not valid.'), 'warning', FALSE);

    return FALSE;
  }
}

/**
 * Converts an xTuple UOM to dimension modules dimension unit.
 *
 * @See: physical_dimension_units()
 *
 * @param string $unit
 *   The type of dimension unit whose name should be returned; by default this can
 *   be in, ft, mm, cm, or m.
 *
 * @param array  $valid_units
 *   An array of valid physical modules dimension units.
 *
 * @return string or FALSE
 *   The valid unit of measurement or FALSE if not found.
 */
function xdruple_shipping_map_physical_dimension_units($unit, $valid_units) {
  $unit = strtolower($unit);

  if (in_array($unit, $valid_units)) {
    return $unit;
  }
  else {
    drupal_set_message(t('Dimension unit of measure not valid.'), 'warning', FALSE);

    return FALSE;
  }
}

/**
 * Converts a Commerce Shipping Service to xTuple's Ship Via code-description.
 *
 * @See: xdruple_commerce_commerce_checkout_complete()
 * @See: _commerce_ups_service_list()
 *
 * @param $ship_label
 *    The commerce line_item_label; by default this can be:
 *    'UPS Ground',
 *    'UPS Next Day Air',
 *    'UPS 2nd Day Air',
 *    etc.
 *
 * @return string
 *   The matching xTuple's Ship Via code or pass through $ship_label if not found.
 */
function xdruple_shipping_map_ship_via($ship_label) {
  $ship_via_list = ShipViaList::all(xdruple_commerce_application()->storage());

  foreach ($ship_via_list as $ship_via) {
    // Remove and space, dashes, underscores.
    $stripped_label = str_replace([' ', '-', '_'], '', $ship_label);
    $stripped_description = str_replace([' ', '-', '_'], '', $ship_via->description());

    // Compare the two and return the code-description if they match.
    if ($stripped_label === $stripped_description) {
      return $ship_via->code() . '-' . $ship_via->description();
    }
  }

  // Else, just pass through the $ship_label when no match is found.
  return $ship_label;
}

/**
 * Implements hook_commerce_ups_ship_from_address_alter().
 *
 * @param $ship_from_address
 * @param $order_wrapper
 */
function xdruple_shipping_commerce_ups_ship_from_address_alter(&$ship_from_address, $order_wrapper) {
  // Necessary for country_get_list().
  /** @noinspection PhpIncludeInspection */
  require_once DRUPAL_ROOT . '/includes/locale.inc';
  /** @var Xtuple\Drupal7\Session\RescuedSession $session */
  global $session;

  $id = $session->getRescued('site') ? $session->getRescued('site') : variable_get('xdruple_commerce_default_warehouse', NULL);
  try {
    if (!empty($id)) {
      $site = SiteResource::read(xdruple_commerce_application()->storage(), $id)->value();
      if (!empty($site) && $site_address = $site->address()) {
        $countries = country_get_list();
        $country_match = array_keys($countries, $site_address->country());
        if (count($country_match) === 1) {
          $country_code = $country_match[0];
        }
        else {
          $country_code = 'US';
        }

        $ship_from_address['thoroughfare'] = $site_address->line1();
        $ship_from_address['premise'] = $site_address->line2();
        $ship_from_address['locality'] = $site_address->city();
        $ship_from_address['administrative_area'] = $site_address->state();
        $ship_from_address['postal_code'] = $site_address->postalCode();
        $ship_from_address['country'] = $country_code;
      }
    }
  } catch (\Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
    watchdog('xdruple_commerce', $e->getMessage(), [], WATCHDOG_ERROR);
  }
}

/**
 * Implements hook_commerce_shipping_service_info_alter().
 *
 * @param $shipping_services
 *
 * @throws \Exception
 */
function xdruple_shipping_commerce_shipping_service_info_alter(&$shipping_services) {
  $allowed_pickup_sites = variable_get('xdruple_shipping_allowed_pickup_sites', []);

  foreach ($shipping_services as $key => $service) {
    if ($service['module'] === 'commerce_pickup') {
      // Extract the xTuple Site Code.
      $service_parts = explode('__', $service['name']);

      if (count($service_parts) === 3) {
        if (isset($allowed_pickup_sites[$service_parts[2]]) && $allowed_pickup_sites[$service_parts[2]] !== 0) {
          $siteResource = SiteResource::read(xdruple_commerce_application()->storage(), $service_parts[2]);
          $site = $siteResource->value();
          $shipping_services[$key]["display_title"] = t("Customer Pickup at @site", [
            "@site" => $site->description() ? $site->description() : $site->code(),
          ]);
          $shipping_services[$key]["description"] = theme("xdruple_address", [
            "address" => $site->address(),
          ]);
        }
        else {
          // This site is not an allowed pickup site. Unset it from the shipping services.
          unset($shipping_services[$key]);
        }
      }
    }
  }
}

/**
 * Implements hook_rules_condition_info().
 */
function xdruple_shipping_rules_condition_info() {
  $conditions = [];

  $conditions['xdruple_shipping_contains_freight_class_product'] = [
    'label' => t('Order contains a product with a particular freight class'),
    'parameter' => [
      'commerce_order' => [
        'type' => 'commerce_order',
        'label' => t('Order'),
        'description' => t('The order whose line items should be checked for the specified product. If the specified order does not exist, the comparison will act as if it is against a quantity of 0.'),
      ],
      'freightClass' => [
        'type' => 'list<text>',
        'label' => t('Freight Class'),
        'description' => t('The Freight Class of the product to look for on the order.'),
        'options list' => 'xdruple_fields_get_freight_class_list',
      ],
      'operator' => [
        'type' => 'text',
        'label' => t('Operator'),
        'description' => t('The operator used with the quantity value below to compare the quantity of the specified product on the order.'),
        'default value' => '>=',
        'options list' => 'commerce_numeric_comparison_operator_options_list',
        'restriction' => 'input',
      ],
      'value' => [
        'type' => 'text',
        'label' => t('Quantity'),
        'default value' => '1',
        'description' => t('The value to compare against the quantity of the specified product on the order.'),
      ],
    ],
    'group' => t('Commerce Order'),
    'callbacks' => [
      'execute' => 'xdruple_shipping_rules_contains_freight_class',
    ],
  ];

  return $conditions;
}

/**
 * Condition callback: checks to see if one or more particular Freight Classes
 * exist for any products on an order in the specified quantity.
 *
 * @param $order
 * @param $freight_classes
 * @param $operator
 * @param $value
 *
 * @return bool
 */
function xdruple_shipping_rules_contains_freight_class($order, $freight_classes, $operator, $value) {
  $quantity = 0;

  // If we actually received a valid order...
  if (!empty($order)) {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

    // Look for product line items on the order whose products match the
    // specified Freight Classes and increment the quantity count accordingly.
    foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
      if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
        // Extract the Freight Class from the line item.
        $line_item_freight_class = $line_item_wrapper->commerce_product->freightClass->value();

        // If the line item Freight Class matches, update the total quantity.
        if (in_array($line_item_freight_class, $freight_classes)) {
          $quantity += $line_item_wrapper->quantity->value();
        }
      }
    }
  }

  // Make a quantity comparison based on the operator.
  switch ($operator) {
    case '<':
      return $quantity < $value;
    case '<=':
      return $quantity <= $value;
    case '=':
      return $quantity == $value;
    case '>=':
      return $quantity >= $value;
    case '>':
      return $quantity > $value;
  }

  return FALSE;
}

