<?php

/**
 * @keeps theme callback
 */
use Xtuple\REST\Resource\ShipVia\ShipViaResource;
use Xtuple\REST\Resource\Site\SiteResource;

/**
 * Implements hook_rescued_resources().
 */
function xdruple_shipping_rescued_resources() {
  return [
    "FreightClass",
    "ShipVia",
    "Site",
  ];
}

/**
 * Implements hook_cpanel_alter()
 *
 * @param $form
 * @param $form_state
 */
function xdruple_shipping_cpanel_alter(&$form, &$form_state) {
  if (module_exists('commerce_pickup')) {
    $siteList = SiteResource::readAll(xdruple_commerce_application()->dataSource());

    $options = [];
    foreach ($siteList as $site) {
      $options[$site->code()] = $site->description();
    }
    if (!empty($options)) {
      $form['xdruple_commerce_store_settings']['xdruple_shipping_allowed_pickup_sites'] = [
        '#type' => 'checkboxes',
        '#options' => $options,
        '#title' => t('Allowed Pickup Sites'),
        '#description' => t('Limit the Sites customers are allowed to pickup from. If checked, a Customer can choose to pickup their order from this Site location.'),
        '#required' => TRUE,
        '#default_value' => variable_get('xdruple_shipping_allowed_pickup_sites', []),
      ];
    }
    else {
      drupal_set_message(t('Cannot find any Sites to set as allowed pickup locations.'), 'warning');
    }
  }
}

/**
 * Implements hook_field_storage_pre_insert().
 *
 * @param $entity_type
 * @param $entity
 * @param $skip_fields
 */
function xdruple_shipping_field_storage_pre_insert($entity_type, $entity, &$skip_fields) {
  // Wrap the update hook, which does everything we need.
  xdruple_shipping_field_storage_pre_update($entity_type, $entity, $skip_fields);
}

/**
 * Implements hook_field_storage_pre_update().
 *
 * @param $entity_type
 * @param $entity
 * @param $skip_fields
 */
function xdruple_shipping_field_storage_pre_update($entity_type, $entity, &$skip_fields) {
  // Check $entity_type and only act on ones we support.
  $entity_info = entity_get_info($entity_type);

  if (isset($entity_info['discovery-client']) && $entity_info['discovery-client'] === 'xtuple') {

    // Get all the fields attached to this entity.
    $bundle = $entity_type === 'commerce_product' ? 'product' : $entity_type;
    $instances = field_info_instances($entity_type, $bundle);
    foreach ($instances as $field_name => $instance) {
      if ($field_name !== 'xt_physical_weight' && $field_name !== 'xt_physical_dimension') {
        continue;
      }

      $field_info = field_info_field($field_name);

      // TODO: Currently, these fields are read only. It is a calculated field
      // that combines the product and package weights. Therefore, there is
      // nothing to do on insert and updates.

      // Add this field to $skip_fields.
      $skip_fields[$field_info['id']] = $field_info;
    }
  }
}

/**
 * Implements hook_field_storage_pre_load().
 *
 * Side loads weight from a xTuple entity's 'productWeight' and 'packageWeight'
 * property into the 'xt_physical_weight' field.
 *
 * @param $entity_type
 * @param $entities
 * @param $age
 * @param $skip_fields
 * @param $options
 */
function xdruple_shipping_field_storage_pre_load($entity_type, $entities, $age, &$skip_fields, $options) {
  // Check $entity_type and only act on ones we support.
  $entity_info = entity_get_info($entity_type);

  if (isset($entity_info['discovery-client']) && $entity_info['discovery-client'] === 'xtuple') {

    // Get all the fields attached to this entity.
    $bundle = $entity_type === 'commerce_product' ? 'product' : $entity_type;
    $instances = field_info_instances($entity_type, $bundle);
    $valid_weights = xdruple_shipping_physical_weight_units();
    $valid_dimensions = xdruple_shipping_physical_dimension_units();

    foreach ($instances as $field_name => $instance) {
      // Only act on weight and dimension fields.
      if ($field_name !== 'xt_physical_weight' && $field_name !== 'xt_physical_dimension') {
        continue;
      }

      $field_info = field_info_field($field_name);
      $type = $field_info['type'];

      $resource = $entity_info['resource'];
      $entity_properties = $entity_info['json-schema'][$resource]['properties'];

      // Check the entity for 'urls' property.
      if (isset($entity_properties['productWeight']) || isset($entity_properties['packageWeight'])) {
        foreach ($entities as $entity_id => $entity) {
          if ($type === 'physical_weight') {
            $weight = 0;
            if (isset($entity_properties['weightUnit']) &&
              property_exists($entity, 'weightUnit') &&
              !empty($entity->weightUnit)
            ) {
              // Convert unit to commerce_physical.
              $weightUnit = xdruple_shipping_map_physical_weight_units($entity->weightUnit, $valid_weights);
            }
            else {
              // Get default UOM.
              $weightUnit = $instances['widget']['settings']['default_unit'];
            }

            if (property_exists($entity, 'productWeight') && !empty($entity->productWeight)) {
              $weight = $weight + $entity->productWeight;
            }
            if (property_exists($entity, 'packageWeight') && !empty($entity->packageWeight)) {
              $weight = $weight + $entity->packageWeight;
            }

            if (!empty($weight)) {
              // Associate that field with this product entity.
              $entity->xt_physical_weight[LANGUAGE_NONE][0] = [
                'weight' => $weight,
                'unit' => $weightUnit,
              ];
            }
          }
          elseif ($type === 'physical_dimensions') {
            if (isset($entity_properties['dimensionUnit']) &&
              property_exists($entity, 'dimensionUnit') &&
              !empty($entity->dimensionUnit)
            ) {
              // Convert unit to commerce_physical.
              $dimensionUnit = xdruple_shipping_map_physical_dimension_units($entity->dimensionUnit, $valid_dimensions);
            }
            else {
              // Get default UOM.
              $dimensionUnit = $instances['widget']['settings']['default_unit'];
            }

            if (property_exists($entity, 'packageLength') && !empty($entity->packageLength)) {
              $length = $entity->packageLength;
            }
            if (property_exists($entity, 'packageWidth') && !empty($entity->packageWidth)) {
              $width = $entity->packageWidth;
            }
            if (property_exists($entity, 'packageHeight') && !empty($entity->packageHeight)) {
              $height = $entity->packageHeight;
            }

            if (!empty($length) && !empty($width) && !empty($height)) {
              // Associate that field with this product entity.
              $entity->xt_physical_dimension[LANGUAGE_NONE][0] = [
                'length' => $length,
                'width' => $width,
                'height' => $height,
                'unit' => $dimensionUnit,
              ];
            }
          }
        }
      }

      // Add this field to $skip_fields.
      $skip_fields[$field_info['id']] = $field_info;
    }
  }
}

/**
 * Gets a list of physical modules valid weight units.
 *
 * @See: physical_weight_units()
 *
 * @return array
 *   An array of valid weight units of measurement.
 */
function xdruple_shipping_physical_weight_units() {
  // Use drupal_static because this gets calls a lot repeatedly.
  $valid_units = &drupal_static(__FUNCTION__);

  if (!isset($valid_units)) {
    $valid_units = array_keys(physical_weight_units());
  }

  return $valid_units;
}

/**
 * Gets a list of physical modules valid dimension units.
 *
 * @See: physical_dimension_units()
 *
 * @return array
 *   An array of valid dimension units of measurement.
 */
function xdruple_shipping_physical_dimension_units() {
  // Use drupal_static because this gets calls a lot repeatedly.
  $valid_units = &drupal_static(__FUNCTION__);

  if (!isset($valid_units)) {
    $valid_units = array_keys(physical_dimension_units());
  }

  return $valid_units;
}

/**
 * Converts an xTuple UOM to physical modules weight unit.
 *
 * @See: physical_weight_units()
 *
 * @param string $unit
 *   The type of weight unit whose name should be returned; by default this can
 *   be lb, oz, kg, or g.
 *
 * @param array  $valid_units
 *   An array of valid physical modules weight units.
 *
 * @return string or FALSE
 *   The valid unit of measurement or FALSE if not found.
 */
function xdruple_shipping_map_physical_weight_units($unit, $valid_units) {
  $unit = strtolower($unit);

  if (in_array($unit, $valid_units)) {
    return $unit;
  }
  else {
    drupal_set_message(t('Weight unit of measure not valid.'), 'warning', FALSE);

    return FALSE;
  }
}

/**
 * Converts an xTuple UOM to dimension modules dimension unit.
 *
 * @See: physical_dimension_units()
 *
 * @param string $unit
 *   The type of dimension unit whose name should be returned; by default this can
 *   be in, ft, mm, cm, or m.
 *
 * @param array  $valid_units
 *   An array of valid physical modules dimension units.
 *
 * @return string or FALSE
 *   The valid unit of measurement or FALSE if not found.
 */
function xdruple_shipping_map_physical_dimension_units($unit, $valid_units) {
  $unit = strtolower($unit);

  if (in_array($unit, $valid_units)) {
    return $unit;
  }
  else {
    drupal_set_message(t('Dimension unit of measure not valid.'), 'warning', FALSE);

    return FALSE;
  }
}

/**
 * Converts a Commerce Shipping Service to xTuple's Ship Via code-description.
 *
 * @See: xdruple_commerce_commerce_checkout_complete()
 * @See: _commerce_ups_service_list()
 *
 * @param $ship_label
 *    The commerce line_item_label; by default this can be:
 *    'UPS Ground',
 *    'UPS Next Day Air',
 *    'UPS 2nd Day Air',
 *    etc.
 *
 * @return string
 *   The matching xTuple's Ship Via code or pass through $ship_label if not found.
 */
function xdruple_shipping_map_ship_via($ship_label) {
  $ship_via_list = ShipViaResource::readAll(xdruple_commerce_application()->dataSource());

  foreach ($ship_via_list as $ship_via) {
    // Remove and space, dashes, underscores.
    $stripped_label = str_replace([' ', '-', '_'], '', $ship_label);
    $stripped_description = str_replace([' ', '-', '_'], '', $ship_via->description());

    // Compare the two and return the code-description if they match.
    if ($stripped_label === $stripped_description) {
      return $ship_via->code() . '-' . $ship_via->description();
    }
  }

  // Else, just pass through the $ship_label when no match is found.
  return $ship_label;
}

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function xdruple_shipping_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['xt_physical_weight'])) {
    // Make 'xt_physical_weight' read only. It's a calculated field and can not be edited.
    $form['xt_physical_weight'][LANGUAGE_NONE][0]['weight']['#attributes']['disabled'] = TRUE;
    $form['xt_physical_weight'][LANGUAGE_NONE][0]['unit']['#attributes']['disabled'] = TRUE;

    // Add description explaining this.
    $description = t("This field is calculated based on the 'productWeight' + 'packageWeight'. It cannot be changed. To change the weight, edit those fields instead.");
    $form['xt_physical_weight'][LANGUAGE_NONE][0]['weight']['#description'] = $description;
  }
}

/**
 * Implements hook_commerce_ups_ship_from_address_alter().
 *
 * @param $ship_from_address
 * @param $order_wrapper
 */
function xdruple_shipping_commerce_ups_ship_from_address_alter(&$ship_from_address, $order_wrapper) {
  // Necessary for country_get_list().
  /** @noinspection PhpIncludeInspection */
  require_once DRUPAL_ROOT . '/includes/locale.inc';
  /** @var Xtuple\Xdruple\Session\RescuedSession $session */
  global $session;

  $id = $session->getRescued('site') ? $session->getRescued('site') : variable_get('xdruple_commerce_default_warehouse', NULL);
  try {
    if (!empty($id)) {
      $site = SiteResource::read(xdruple_commerce_application()->dataSource(), $id)->value();
      if (!empty($site) && $site_address = $site->address()) {
        $countries = country_get_list();
        $country_match = array_keys($countries, $site_address->country());
        if (count($country_match) === 1) {
          $country_code = $country_match[0];
        }
        else {
          $country_code = 'US';
        }

        $ship_from_address['thoroughfare'] = $site_address->line1();
        $ship_from_address['premise'] = $site_address->line2();
        $ship_from_address['locality'] = $site_address->city();
        $ship_from_address['administrative_area'] = $site_address->state();
        $ship_from_address['postal_code'] = $site_address->postalCode();
        $ship_from_address['country'] = $country_code;
      }
    }
  } catch (\Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
    watchdog('xdruple_commerce', $e->getMessage(), [], WATCHDOG_ERROR);
  }
}

/**
 * Implements hook_commerce_shipping_service_info_alter().
 *
 * @param $shipping_services
 *
 * @throws \Exception
 */
function xdruple_shipping_commerce_shipping_service_info_alter(&$shipping_services) {
  $allowed_pickup_sites = variable_get('xdruple_shipping_allowed_pickup_sites', []);

  foreach ($shipping_services as $key => $service) {
    if ($service['module'] === 'commerce_pickup') {
      // Extract the xTuple Site Code.
      $service_parts = explode('__', $service['name']);

      if (count($service_parts) === 3) {
        if (isset($allowed_pickup_sites[$service_parts[2]]) && $allowed_pickup_sites[$service_parts[2]] !== 0) {
          $siteResource = SiteResource::read(xdruple_commerce_application()->dataSource(), $service_parts[2]);
          $site = $siteResource->value();
          $shipping_services[$key]["display_title"] = t("Customer Pickup at @site", [
            "@site" => $site->description() ? $site->description() : $site->code(),
          ]);
          $shipping_services[$key]["description"] = theme("xdruple_address", [
            "address" => $site->address(),
          ]);
        }
        else {
          // This site is not an allowed pickup site. Unset it from the shipping services.
          unset($shipping_services[$key]);
        }
      }
    }
  }
}

/**
 * Implements hook_rules_condition_info().
 */
function xdruple_shipping_rules_condition_info() {
  $conditions = [];

  $conditions['xdruple_shipping_contains_freight_class_product'] = [
    'label' => t('Order contains a product with a particular freight class'),
    'parameter' => [
      'commerce_order' => [
        'type' => 'commerce_order',
        'label' => t('Order'),
        'description' => t('The order whose line items should be checked for the specified product. If the specified order does not exist, the comparison will act as if it is against a quantity of 0.'),
      ],
      'freightClass' => [
        'type' => 'list<text>',
        'label' => t('Freight Class'),
        'description' => t('The Freight Class of the product to look for on the order.'),
        'options list' => 'xdruple_fields_get_freight_class_list',
      ],
      'operator' => [
        'type' => 'text',
        'label' => t('Operator'),
        'description' => t('The operator used with the quantity value below to compare the quantity of the specified product on the order.'),
        'default value' => '>=',
        'options list' => 'commerce_numeric_comparison_operator_options_list',
        'restriction' => 'input',
      ],
      'value' => [
        'type' => 'text',
        'label' => t('Quantity'),
        'default value' => '1',
        'description' => t('The value to compare against the quantity of the specified product on the order.'),
      ],
    ],
    'group' => t('Commerce Order'),
    'callbacks' => [
      'execute' => 'xdruple_shipping_rules_contains_freight_class',
    ],
  ];

  return $conditions;
}

/**
 * Condition callback: checks to see if one or more particular Freight Classes
 * exist for any products on an order in the specified quantity.
 *
 * @param $order
 * @param $freight_classes
 * @param $operator
 * @param $value
 *
 * @return bool
 */
function xdruple_shipping_rules_contains_freight_class($order, $freight_classes, $operator, $value) {
  $quantity = 0;

  // If we actually received a valid order...
  if (!empty($order)) {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

    // Look for product line items on the order whose products match the
    // specified Freight Classes and increment the quantity count accordingly.
    foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
      if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
        // Extract the Freight Class from the line item.
        $line_item_freight_class = $line_item_wrapper->commerce_product->freightClass->value();

        // If the line item Freight Class matches, update the total quantity.
        if (in_array($line_item_freight_class, $freight_classes)) {
          $quantity += $line_item_wrapper->quantity->value();
        }
      }
    }
  }

  // Make a quantity comparison based on the operator.
  switch ($operator) {
    case '<':
      return $quantity < $value;
    case '<=':
      return $quantity <= $value;
    case '=':
      return $quantity == $value;
    case '>=':
      return $quantity >= $value;
    case '>':
      return $quantity > $value;
  }

  return FALSE;
}

