<?php

/**
 * Implements hook_cpanel_alter()
 *
 * @param $form
 * @param $form_state
 */
function xdruple_checkout_cpanel_alter(&$form, &$form_state) {
  if (empty($form['xdruple_commerce_store_settings'])) {
    $form['xdruple_commerce_store_settings'] = [
      '#type' => 'fieldset',
      '#title' => t('Store settings'),
      '#group' => 'system_settings',
    ];
  }

  $form['xdruple_commerce_store_settings']['xdruple_checkout_message'] = [
    '#type' => 'textarea',
    '#title' => t('Anonymous user checkout redirect login message'),
    '#description' => t('The message that should be displayed on the login page in the checkout process.'),
    '#default_value' => variable_get('xdruple_checkout_message', t('You need to be logged in to be able to checkout.')),
    '#rows' => 2,
  ];
  $form['xdruple_commerce_store_settings']['xdruple_checkout_anonymous'] = [
    '#type' => 'checkbox',
    '#title' => t('Continue without register'),
    '#description' => t('Allow anonymous checkout. This will also provide an Anonymous Checkout option as an alternative to logging in on the login form when a user has initiated the checkout process.'),
    '#default_value' => variable_get('xdruple_checkout_anonymous', FALSE),
  ];

  $customers = xdruple_fields_get_customer_list();
  if (count($customers) > 0) {
    $form['xdruple_commerce_store_settings']['xdruple_checkout_guest_customer'] = [
      '#type' => 'select',
      '#options' => $customers,
      '#default_value' => variable_get('xdruple_checkout_guest_customer', '- None -'),
      '#empty_option' => '- None -',
      '#title' => t('Guest Customer'),
      '#description' => t('Select the Customer to use for guest checkout orders and/or anonymous user price quotes. All anonymous guest checkout orders will be created under this Customer in xTuple.'),
      '#required' => TRUE,
    ];

    // The xTuple API only returns 100 results by default. If there are more than 98 customers, switch to a text field.
    if (count($customers) > 98) {
      $form['xdruple_commerce_store_settings']['xdruple_checkout_guest_customer']['#type'] = 'textfield';
      $form['xdruple_commerce_store_settings']['xdruple_checkout_guest_customer']['#default_value'] = variable_get('xdruple_checkout_guest_customer', NULL);
      $form['xdruple_commerce_store_settings']['xdruple_checkout_guest_customer']['#description'] =
        t('Enter the Customer Number of the Customer to use for all guest checkout orders. All anonymous guest checkout orders will be created under this Customer in xTuple.');
      unset($form['xdruple_commerce_store_settings']['xdruple_checkout_guest_customer']['#options']);
      unset($form['xdruple_commerce_store_settings']['xdruple_checkout_guest_customer']['#empty_option']);
    }
  }
  $form['xdruple_commerce_store_settings']['xdruple_checkout_use_guest_customer_price_schedule'] = [
    '#type' => 'checkbox',
    '#title' => t("Use Guest Customer's price schedule for anonymous users"),
    '#description' => t('When checked, anonymous users will not see the Item List Price. Instead a price quote will be fetched and whatever pricing schedule the Guest Customer above is assigned to will adjust prices accordingly.'),
    '#default_value' => variable_get('xdruple_checkout_use_guest_customer_price_schedule', FALSE),
  ];

  if (variable_get('user_email_verification', TRUE)) {
    $form['xdruple_commerce_store_settings']['xdruple_checkout_reset_password_message'] = [
      '#type' => 'textarea',
      '#title' => t('Reset password checkout redirect message'),
      '#description' => t('The message that should be displayed on the reset password page for new accounts during the checkout process. When an anonymous users checks out and chooses to create a new account, they will be sent a one time login link to their email address. After clicking on it, they will be sent to the Reset Password page to create a password. This message will display on that page so they know they can continue their order after setting a password.'),
      '#default_value' => variable_get('xdruple_checkout_reset_password_message', t('Enter and save a new password and then you can continue with the checkout process.')),
      '#rows' => 2,
    ];
  }
}

/**
 * Implements hook_default_rules_configuration_alter()
 *
 * @param $configs
 */
function xdruple_checkout_default_rules_configuration_alter(&$configs) {
  // Disable Commerce checkout default rules we do not need.
  if (!empty($configs['commerce_checkout_order_convert'])) {
    $configs['commerce_checkout_order_convert']->active = FALSE;
  }
  if (!empty($configs['commerce_checkout_new_account']->active)) {
    $configs['commerce_checkout_new_account']->active = FALSE;
  }
}

/**
 * Implements hook_commerce_checkout_router().
 *
 * @param $order
 * @param $checkout_page
 */
function xdruple_checkout_commerce_checkout_router($order, $checkout_page) {
  // Get the id of the first and last checkout page
  $checkout_pages = commerce_checkout_pages();
  $first_checkout_page = key($checkout_pages);
  end($checkout_pages);
  $last_checkout_page = key($checkout_pages);

  // Check if the user's shopping cart order exists with something in the cart
  if (commerce_cart_order_load() && xdruple_checkout_items_in_cart()) {
    if (($checkout_page['page_id'] == $first_checkout_page)) {
      if (user_is_anonymous() && empty($_SESSION['xdruple_checkout_bypass'])) {
        $_SESSION['xdruple_checkout_anonymous'] = TRUE;
        $checkout_message = variable_get('xdruple_checkout_message', t('You need to be logged in to be able to checkout.'));

        if (!empty($checkout_message)) {
          drupal_set_message($checkout_message);
        }

        drupal_goto('user/login');
      }
    }
  }
  elseif ($checkout_page['page_id'] == $last_checkout_page) {
    unset($_SESSION['xdruple_checkout_bypass']);
  }
}

/**
 * Implements hook_commerce_checkout_pane_info_alter().
 *
 * @param $checkout_panes
 */
function xdruple_checkout_commerce_checkout_pane_info_alter(&$checkout_panes) {
  if (user_is_anonymous()) {
    $checkout_panes['account']['page'] = 'disabled';
    $checkout_panes['account']['enabled'] = FALSE;
  }
}

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function xdruple_checkout_form_alter(&$form, &$form_state, $form_id) {
  if (in_array($form_id, ['user_login', 'user_login_block', 'user_profile_form', 'user_pass_reset'])) {
    _xdruple_checkout_alter_user_forms($form, $form_state, $form_id);
  }

  // For resetting the session variables for back to cart checkout button.
  if (strpos($form_id, 'commerce_checkout_form_') === 0 && !empty($form['buttons']['cancel'])) {
    $form['buttons']['cancel']['#submit'][] = 'xdruple_checkout_form_cancel_submit';
  }
}

/**
 * Private helper function to do hook_form_alter() to user forms.
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function _xdruple_checkout_alter_user_forms(&$form, &$form_state, $form_id) {
  $checkout_anonymous = variable_get('xdruple_checkout_anonymous', FALSE);

  // Check if user has an active cart order.
  if ($checkout_anonymous && $order = commerce_cart_order_load()) {
    // Check if there's anything in the cart and if user has not yet selected checkout method.
    if (xdruple_checkout_items_in_cart()
      && empty($_SESSION['xdruple_checkout_bypass'])
      && !empty($_SESSION['xdruple_checkout_anonymous'])
    ) {
      if ($form_id == 'user_login') {
        // Append the checkout redirect function on user's forms.
        $form['#submit'][] = 'xdruple_checkout_anonymous_submit';
        unset($form['#action']);

        // Anonymous checkout button.
        if (variable_get('xdruple_checkout_anonymous', FALSE)) {
          $form_state['#order'] = $order;
          $form['actions']['continue_button'] = [
            '#name' => 'continue_button',
            '#type' => 'submit',
            '#value' => 'Checkout without an account',
            '#limit_validation_errors' => [],
            '#submit' => ['xdruple_checkout_anonymous_continue_checkout'],
            '#states' => [
              'visible' => [
                ':input[name="have_pass"]' => ['value' => 0],
              ],
            ],
          ];
          // Anonymous checkout as alternative to login form.
          $form['have_pass'] = [
            '#type' => 'radios',
            '#title' => t('Do you have an account?'),
            '#description' => t('Choose %yes to login, %no to checkout as a guest or you can ', [
                '%yes' => t('Yes'),
                '%no' => t('No')
              ]) . l(t('create a new account'), 'user/register') . '.',
            '#options' => [0 => t('Yes'), 1 => t('No')],
            '#weight' => -10,
            '#default_value' => 0,
          ];
          $form['pass']['#states'] = [
            'visible' => [
              ':input[name="have_pass"]' => ['value' => 0],
            ],
          ];
          $form['actions']['submit']['#states'] = [
            'visible' => [
              ':input[name="have_pass"]' => ['value' => 0],
            ],
          ];
          //$form['pass']['#weight'] = 10;
          $form['actions']['continue_button']['#value'] = t('Checkout without an account');
          $form['actions']['continue_button']['#states'] = [
            'visible' => [
              ':input[name="have_pass"]' => ['value' => 1],
            ],
          ];

          // Use the username as order email.
          // Email validation for the username form element
          $form['name']['#title'] = t('Email');
          $form['actions']['continue_button']['#limit_validation_errors'] = [['name']];
          $form['actions']['continue_button']['#validate'][] = 'xdruple_checkout_username_as_order_email_form_validate';
        }
      }
      elseif ($form_id == 'user_pass_reset' && !empty($form['actions'])) {
        // Provide the checkout as an alternative to the new account reset password process.
        // Message (help text) for the "Continue with checkout" button.
        $reset_password_message = variable_get('xdruple_checkout_reset_password_message', t('Enter and save a new password and then you can continue with the checkout process.'));

        if (!empty($reset_password_message)) {
          $form['actions']['checkout_message']['#markup'] = '<p>' . $reset_password_message . '</p>';
        }

        // "Continue with checkout" submit button.
        $form['actions']['checkout'] = [
          '#type' => 'submit',
          '#value' => t('Continue with checkout'),
        ];

        // Append the checkout redirect function on user's forms.
        $form['#submit'][] = 'xdruple_checkout_anonymous_submit';

        // Unset the action, use submit form function(s) instead.
        unset($form['#action']);
      }
    }
  }
}

/**
 * Submit callback for the user forms that will perform the redirection.
 *
 * @param $form
 * @param $form_state
 */
function xdruple_checkout_anonymous_submit($form, &$form_state) {
  // Because the user in the order may have been updated (from uid 0 to the real
  // uid for example), clear static cache before trying to get the order.
  drupal_static_reset('commerce_cart_order_id');

  if (!empty($_SESSION['xdruple_checkout_anonymous'])) {
    // One time login link (reset password) for creating new account.
    if ($form['#form_id'] == 'user_pass_reset') {
      // Login for the new account to continue
      // with the checkout process.
      // @see user_pass_reset()
      if ($form_state['clicked_button']['#id'] == 'edit-checkout') {
        global $user;
        $users = user_load_multiple([$form_state['build_info']['args'][0]], ['status' => '1']);
        $user = reset($users);
        $GLOBALS['user'] = $user;
        // User login with user_login_finalize().
        user_login_finalize();
        // Let the user's password be changed without the current password check.
        $token = drupal_random_key();
        $_SESSION['pass_reset_' . $GLOBALS['user']->uid] = $token;
      }
      // Continue the reset password process.
      else {
        drupal_goto('user/reset/' . implode('/', $form_state['build_info']['args']) . '/login');
      }
    }
    $order_id = commerce_cart_order_id($GLOBALS['user']->uid);
    if (user_is_logged_in() && $order_id) {
      unset($_SESSION['xdruple_checkout_anonymous']);
      $form_state['redirect'] = 'checkout/' . $order_id;
    }
  }
}

/**
 * Form validation handler for login form for using username as order email.
 *
 * @param $form
 * @param $form_state
 */
function xdruple_checkout_username_as_order_email_form_validate($form, &$form_state) {
  $name = trim($form_state['values']['name']);
  form_set_value($form['name'], $name, $form_state);

  // Validate the e-mail address, and check if it is taken by an existing user.
  if ($error = user_validate_mail($form_state['values']['email'])) {
    form_set_error('name', $error);
  }
  else {
    $mail_taken = (bool) db_select('users')
      ->fields('users', ['uid'])
      ->condition('uid', $GLOBALS['user']->uid, '<>')
      ->condition('mail', db_like($form_state['values']['email']), 'LIKE')
      ->range(0, 1)
      ->execute()
      ->fetchField();
    if ($mail_taken) {
      // Format error message dependent on whether the user is logged in or not.
      // TODO: I'm not sure how this could be called by a user that is logged in.
      if ($GLOBALS['user']->uid) {
        form_set_error('name', t('The e-mail address %email is already taken.', ['%email' => $form_state['values']['email']]));
      }
      else {
        form_set_error('name', t('The e-mail address %email is already registered. <a href="@password">Have you forgotten your password?</a>', [
          '%email' => $form_state['values']['email'],
          '@password' => url('user/password')
        ]));
      }
    }
  }
}

/**
 * Submit callback to allow an anonymous users to continue without logging in.
 *
 * @param $form
 * @param $form_state
 */
function xdruple_checkout_anonymous_continue_checkout($form, &$form_state) {
  // If the user chooses to continue without an account, set this variable so user
  // is only redirected once per order (or once per session if the session expires first).
  $_SESSION['xdruple_checkout_bypass'] = TRUE;
  $order = $form_state['#order'];

  // Using the username as order email.
  $order->mail = $form_state['values']['name'];
  commerce_order_save($order);

  $form_state['redirect'] = 'checkout/';
}

/**
 * Submit callback for the reset the checkout to cart.
 *
 * @param $form
 * @param $form_state
 */
function xdruple_checkout_form_cancel_submit($form, &$form_state) {
  if (!empty($_SESSION['xdruple_checkout_anonymous'])) {
    unset($_SESSION['xdruple_checkout_anonymous']);
  }
  if (!empty($_SESSION['xdruple_checkout_bypass'])) {
    unset($_SESSION['xdruple_checkout_bypass']);
  }
}

/**
 * Helper function to check if the cart contains any items.
 */
function xdruple_checkout_items_in_cart() {
  /** @var \stdClass $user */
  global $user;

  $cart = commerce_cart_order_load($user->uid);
  $line_items = count($cart->commerce_line_items) ? TRUE : FALSE;

  return $line_items;
}

/**
 * Implements hook_features_exclude()
 *
 * @return array
 */
function xdruple_checkout_features_exclude() {
  return [
    'variable' => [
      'xdruple_checkout_manager_order_confirm_emails',
      'xdruple_checkout_message',
      'xdruple_checkout_reset_password_message',
    ],
  ];
}
