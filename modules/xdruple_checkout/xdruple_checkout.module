<?php

/**
 * Implements hook_cpanel_alter()
 *
 * @param $form
 * @param $form_state
 */
function xdruple_checkout_cpanel_alter(&$form, &$form_state) {
  if (empty($form['xdruple_commerce_store_settings'])) {
    $form['xdruple_commerce_store_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Store settings'),
      '#group' => 'system_settings',
    );
  }

  $form['xdruple_commerce_store_settings']['xdruple_checkout_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Anonymous user checkout redirect login message'),
    '#description' => t('The message that should be displayed on the login page in the checkout process.'),
    '#default_value' => variable_get('xdruple_checkout_message', t('You need to be logged in to be able to checkout.')),
    '#rows' => 2,
  );
  $form['xdruple_commerce_store_settings']['xdruple_checkout_anonymous'] = array(
    '#type' => 'checkbox',
    '#title' => t('Continue without register'),
    '#description' => t('Allow anonymous checkout. This will also provide an Anonymous Checkout option as an alternative to logging in on the login form when a user has initiated the checkout process.'),
    '#default_value' => variable_get('xdruple_checkout_anonymous', FALSE),
  );

  $customers = xdruple_fields_get_customer_list();
  if (count($customers) > 0) {
    $form['xdruple_commerce_store_settings']['xdruple_checkout_guest_customer'] = array(
      '#type' => 'select',
      '#options' => $customers,
      '#default_value' => variable_get('xdruple_checkout_guest_customer', '- None -'),
      '#empty_option' => '- None -',
      '#title' => t('Guest Customer'),
      '#description' => t('Select the Customer to use for guest checkout orders and/or anonymous user price quotes. All anonymous guest checkout orders will be created under this Customer in xTuple.'),
      '#required' => TRUE,
    );

    // The xTuple API only returns 100 results by default. If there are more than 98 customers, switch to a text field.
    if (count($customers) > 98) {
      $form['xdruple_commerce_store_settings']['xdruple_checkout_guest_customer']['#type'] = 'textfield';
      $form['xdruple_commerce_store_settings']['xdruple_checkout_guest_customer']['#default_value'] = variable_get('xdruple_checkout_guest_customer', NULL);
      $form['xdruple_commerce_store_settings']['xdruple_checkout_guest_customer']['#description'] =
        t('Enter the Customer Number of the Customer to use for all guest checkout orders. All anonymous guest checkout orders will be created under this Customer in xTuple.');
      unset($form['xdruple_commerce_store_settings']['xdruple_checkout_guest_customer']['#options']);
      unset($form['xdruple_commerce_store_settings']['xdruple_checkout_guest_customer']['#empty_option']);
    }
  }
  $form['xdruple_commerce_store_settings']['xdruple_checkout_use_guest_customer_price_schedule'] = array(
    '#type' => 'checkbox',
    '#title' => t("Use Guest Customer's price schedule for anonymous users"),
    '#description' => t('When checked, anonymous users will not see the Item List Price. Instead a price quote will be fetched and whatever pricing schedule the Guest Customer above is assigned to will adjust prices accordingly.'),
    '#default_value' => variable_get('xdruple_checkout_use_guest_customer_price_schedule', FALSE),
  );

  if (variable_get('user_email_verification', TRUE)) {
    $form['xdruple_commerce_store_settings']['xdruple_checkout_reset_password_message'] = array(
      '#type' => 'textarea',
      '#title' => t('Reset password checkout redirect message'),
      '#description' => t('The message that should be displayed on the reset password page for new accounts during the checkout process. When an anonymous users checks out and chooses to create a new account, they will be sent a one time login link to their email address. After clicking on it, they will be sent to the Reset Password page to create a password. This message will display on that page so they know they can continue their order after setting a password.'),
      '#default_value' => variable_get('xdruple_checkout_reset_password_message', t('Enter and save a new password and then you can continue with the checkout process.')),
      '#rows' => 2,
    );
  }

  $form['xdruple_commerce_store_settings']['xdruple_checkout_manager_order_confirm_emails'] = array(
    '#type' => 'textfield',
    '#size' => 60,
    '#title' => t('Manager order confirmation emails'),
    '#description' => t('A comma separated list of email addresses that should receive order confirmations. e.g. johndoe@example.com,janedoe@example.com'),
    '#default_value' => variable_get('xdruple_checkout_manager_order_confirm_emails', NULL),
  );
}

/**
 * Implements hook_default_rules_configuration_alter()
 *
 * @param $configs
 */
function xdruple_checkout_default_rules_configuration_alter(&$configs) {
  // Disable Commerce checkout default rules we do not need.
  if (!empty($configs['commerce_checkout_order_convert'])) {
    $configs['commerce_checkout_order_convert']->active = FALSE;
  }
  if (!empty($configs['commerce_checkout_new_account']->active)) {
    $configs['commerce_checkout_new_account']->active = FALSE;
  }
}

/**
 * Implements hook_commerce_checkout_router().
 *
 * @param $order
 * @param $checkout_page
 */
function xdruple_checkout_commerce_checkout_router($order, $checkout_page) {
  // Get the id of the first and last checkout page
  $checkout_pages = commerce_checkout_pages();
  $first_checkout_page = key($checkout_pages);
  end($checkout_pages);
  $last_checkout_page = key($checkout_pages);

  // Check if the user's shopping cart order exists with something in the cart
  if (commerce_cart_order_load() && xdruple_checkout_items_in_cart()) {
    if (($checkout_page['page_id'] == $first_checkout_page)) {
      if (user_is_anonymous() && empty($_SESSION['xdruple_checkout_bypass'])) {
        $_SESSION['xdruple_checkout_anonymous'] = TRUE;
        $checkout_message = variable_get('xdruple_checkout_message', t('You need to be logged in to be able to checkout.'));

        if (!empty($checkout_message)) {
          drupal_set_message($checkout_message);
        }

        drupal_goto('user/login');
      }
    }
  }
  elseif ($checkout_page['page_id'] == $last_checkout_page) {
    unset($_SESSION['xdruple_checkout_bypass']);
  }
}

/**
 * Implements hook_commerce_checkout_pane_info_alter().
 *
 * @param $checkout_panes
 */
function xdruple_checkout_commerce_checkout_pane_info_alter(&$checkout_panes) {
  if (user_is_anonymous()) {
    $checkout_panes['account']['page'] = 'disabled';
    $checkout_panes['account']['enabled'] = FALSE;
  }
}

/**
 * Implements hook_commerce_checkout_complete().
 *
 * @param $order
 */
function xdruple_checkout_commerce_checkout_complete($order) {
  global $user;

  /** @var stdClass $order_wrapper */
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  /** @var stdClass $user */
  if ($user->uid === 0) {
    $customer_key = variable_get('xdruple_checkout_guest_customer', NULL);
    if (!$customer_key) {
      drupal_set_message(t('Guest customer is not setup. Please contact the site administrator.'), 'warning');
    }
  }
  else {
    $customer_key = $order_wrapper->commerce_customer_billing->xd_customer->number->value();
  }
  // TODO: Assuming 'xtuple' here. Get setting.
  $customer_entityType = 'xtuple_xdcustomer';
  $customer = entity_load($customer_entityType, array($customer_key));
  $customer = $customer[$customer_key];

  $bill_to_contact = $order_wrapper->commerce_customer_billing->xd_bill_to_contact->value();
  $bill_to_address = $order_wrapper->commerce_customer_billing->xd_bill_to_address->value();
  $ship_to = $order_wrapper->commerce_customer_shipping->xd_ship_to->value();
  $full_ship_to = FALSE;

  if (isset($ship_to)) {
    $ship_to_contact = json_decode(json_encode($ship_to->contact), FALSE);
    $ship_to_address = json_decode(json_encode($ship_to->address), FALSE);

    // Set multiple ship to email addresses to send order confirmation to.
    if (isset($ship_to->shiptoEmails[0]['email']) && !empty($ship_to->shiptoEmails[0]['email'])) {
      $ship_to_emails = $ship_to->shiptoEmails[0]['email'];
    }

    // Load the full customer ship to so we get ShipCharge, shipZone, etc. we normally do not expose.
    foreach ($customer->shiptos as $customer_shipto) {
      if ($customer_shipto['number'] === $ship_to->number) {
        $full_ship_to = json_decode(json_encode($customer_shipto), FALSE);
        $ship_to = $customer_shipto;

        break;
      }
    }
  }
  else {
    $ship_to_contact = $order_wrapper->commerce_customer_shipping->xd_ship_to_contact->value();
    $ship_to_address = $order_wrapper->commerce_customer_shipping->xd_ship_to_address->value();
  }

  if (!$ship_to_contact) {
    foreach ($customer->shiptos as $customer_shipto) {
      if ($customer_shipto['isDefault']) {
        $ship_to_contact = json_decode(json_encode($customer_shipto['contact']), FALSE);
        if (!$ship_to_address) {
          $ship_to_address = json_decode(json_encode($customer_shipto['address']), FALSE);
        }
        if (!$ship_to) {
          $full_ship_to = json_decode(json_encode($customer_shipto), FALSE);
          $ship_to = $customer_shipto;
        }

        break;
      }
    }
  }

  // TODO: Business logic question... Do we assume the default ship to address here if the above logic didn't set it?
  if (!$ship_to_address) {
    foreach ($customer->shiptos as $customer_shipto) {
      if ($customer_shipto['isDefault']) {
        $ship_to_address = json_decode(json_encode($customer_shipto['address']), FALSE);

        // Load the full customer ship to so we get ShipCharge, shipZone, etc. we normally do not expose.
        if (!$ship_to && !$full_ship_to) {
          $full_ship_to = json_decode(json_encode($customer_shipto), FALSE);
          $ship_to = $customer_shipto;
        }

        break;
      }
    }
  }

  $po_number = property_exists($order, 'xd_order_po_number') ? $order_wrapper->xd_order_po_number->value() : '';

  if (property_exists($order, 'xd_order_notes')) {
    $notes = $order_wrapper->xd_order_notes->value();
    if (!empty($notes)) {
      $order_notes = $notes['safe_value'];
    }
    else {
      $order_notes = '';
    }
  }
  else {
    $order_notes = '';
  }

  // Create a new Sales Order entity.
  // TODO: Assuming 'xtuple' here. Get setting.
  $so_entityType = 'xtuple_salesorder';
  $so_entityInfo = entity_get_info($so_entityType);
  $so_class = $so_entityInfo['entity class'];
  $sales_order = new $so_class(array(), $so_entityType);

  // Set all the defaults on the Sales Order.
  $sales_order->is_new = TRUE;
  $sales_order->status = 'O';
  $sales_order->saleType = 'INT';
  $sales_order->calculateFreight = TRUE;
  $sales_order->freight = 0;
  $sales_order->orderDate = date("Y-m-d");
  $sales_order->wasQuote = FALSE;
  //$sales_order->number = $order->order_number;
  $sales_order->orderNotes = $order_notes;
  $sales_order->customerPurchaseOrderNumber = $po_number;

  // Set the Customer details on the Sales Order.
  $sales_order->site = $customer->preferredSite;
  $sales_order->customer = $customer->number;
  $sales_order->terms = !empty($order->data['xdruple_terms']) ? $order->data['xdruple_terms'] : NULL;
  $sales_order->salesRep = $full_ship_to ? $full_ship_to->salesRep : $customer->salesRep;
  $sales_order->taxZone = $full_ship_to ? $full_ship_to->taxZone : $customer->taxZone;
  $sales_order->billtoContact = $bill_to_contact->number;
  /** @var \Xtuple\Rescued\Controller\AbstractEntity $ship_to */
  $sales_order->shipto = $ship_to->getUUID();
  $sales_order->shiptoContact = $ship_to_contact->number;
  $sales_order->currency = $customer->currency;
  $sales_order->shipZone = $full_ship_to ? $full_ship_to->shipZone : NULL;
  $sales_order->shipCharge = $full_ship_to ? $full_ship_to->shipCharge : $customer->shipCharge;
  $sales_order->commission = $full_ship_to ? $full_ship_to->commission : $customer->commission;
  $sales_order->shipVia = $full_ship_to ? $full_ship_to->shipVia : $customer->shipVia;
  $sales_order->billtoName = $bill_to_contact->firstName . ' ' . $bill_to_contact->lastName;
  $sales_order->billtoContactFirstName = $bill_to_contact->firstName;
  $sales_order->billtoContactLastName = $bill_to_contact->lastName;
  $sales_order->billtoContactPhone = $bill_to_contact->phone;
  $sales_order->billtoContactFax = $bill_to_contact->fax;
  $sales_order->billtoAddress1 = $bill_to_address->line1;
  $sales_order->billtoAddress2 = $bill_to_address->line2;
  $sales_order->billtoAddress3 = $bill_to_address->line3;
  $sales_order->billtoCity = $bill_to_address->city;
  $sales_order->billtoState = $bill_to_address->state;
  $sales_order->billtoPostalCode = $bill_to_address->postalCode;
  $sales_order->billtoCountry = $bill_to_address->country;
  $sales_order->shiptoName = $full_ship_to ? $full_ship_to->name : NULL;
  $sales_order->shipNotes = $full_ship_to ? $full_ship_to->notes : NULL;
  $sales_order->shiptoContactFirstName = $ship_to_contact->firstName;
  $sales_order->shiptoContactLastName = $ship_to_contact->lastName;
  $sales_order->shiptoContactPhone = $ship_to_contact->phone;
  $sales_order->shiptoContactFax = $ship_to_contact->fax;
  $sales_order->shiptoAddress1 = $ship_to_address->line1;
  $sales_order->shiptoAddress2 = $ship_to_address->line2;
  $sales_order->shiptoAddress3 = $ship_to_address->line3;
  $sales_order->shiptoCity = $ship_to_address->city;
  $sales_order->shiptoState = $ship_to_address->state;
  $sales_order->shiptoPostalCode = $ship_to_address->postalCode;
  $sales_order->shiptoCountry = $ship_to_address->country;

  /** @var Xtuple\Xdruple\Session\RescuedSession $session */
  $session = extensions_get_session();
  foreach ($order_wrapper->commerce_line_items->getIterator() as $delta => $line) {
    $property_info = $line->getPropertyInfo();
    if (isset($property_info['commerce_product'])) {
      // Set the line defaults.
      $sales_order->lineItems[$delta]['scheduleDate'] = xdruple_rescued_scheduled_date('tomorrow');
      $sales_order->lineItems[$delta]['firm'] = FALSE;
      $sales_order->lineItems[$delta]['site'] = $session->getRescued('site', $customer->preferredSite);
      $sales_order->lineItems[$delta]['taxType'] = 'Taxable';

      // We use the inventoryUnit for everything. See: xdruple_commerce_get_customer_line_item_price()
      // Set the line details.
      $sales_order->lineItems[$delta]['quantityUnitRatio'] = 1;
      $sales_order->lineItems[$delta]['item'] = $line->line_item_label->value();
      $sales_order->lineItems[$delta]['lineNumber'] = $delta + 1;
      $sales_order->lineItems[$delta]['subNumber'] = 0;
      $sales_order->lineItems[$delta]['quantityUnit'] = $line->commerce_product->inventoryUnit->value();
      $sales_order->lineItems[$delta]['priceUnit'] = $line->commerce_product->inventoryUnit->value();
      $sales_order->lineItems[$delta]['priceUnitRatio'] = 1;
      $sales_order->lineItems[$delta]['quantity'] = $line->quantity->value();
      $sales_order->lineItems[$delta]['customerPrice'] = ($line->commerce_unit_price->amount->value() / 100);
      $sales_order->lineItems[$delta]['price'] = ($line->commerce_unit_price->amount->value() / 100);
    }
    elseif (isset($property_info['commerce_shipping_service'])) {
      $sales_order->freight = ($line->commerce_unit_price->amount->value() / 100);
      $sales_order->calculateFreight = FALSE;
      $sales_order->shipVia = xdruple_shipping_map_ship_via($line->line_item_label->value());
    }
    else {
      // TODO - Handle tax lines.
    }
  }

  // Set flag to finalise payment.
  if (module_exists('xdruple_authnet')
    && isset($order->data['xdruple_auth_aim_trans_id'], $order->data['xdruple_auth_aim_payment_id'], $order->data['xdruple_auth_aim_amount'])
    && !empty($order->data['xdruple_auth_aim_trans_id'])
    && !empty($order->data['xdruple_auth_aim_payment_id'])
    && !empty($order->data['xdruple_auth_aim_amount'])
  ) {
    $finalize_auth_aim_order_payment = TRUE;
  }
  else {
    $finalize_auth_aim_order_payment = FALSE;
  }

  // Save the Sales Order.
  try {
    // We have to submit the order as the "admin" user because it has "MaintainSalesOrders" privilege.
    // TODO: We may want to handle this on the xTuple side so we don't have to switch the active user like this.
    if (!user_access('administer rescued entities', $user)) {
      unset($_SESSION['access_token']);
      unset($_SESSION['oauth_user']);
      $cached_user = $session->getRescued('user');
      $session->setRescued('user', 'admin');
      $sales_order->save();

      // Update the 'xtuple_creditcardpayment' with the final order number and
      // insert the matching 'xtuple_salesorderpayment' as the 'admin' user.
      if ($finalize_auth_aim_order_payment) {
        _xdruple_authnet_finalize_auth_aim_order_payment($order, $sales_order);
      }

      unset($_SESSION['access_token']);
      unset($_SESSION['oauth_user']);
      $session->setRescued('user', $cached_user);
    }
    else {
      // For admin users, we can save directly with their OAuth token.
      $sales_order->save();

      // Update the 'xtuple_creditcardpayment' with the final order number and
      // insert the matching 'xtuple_salesorderpayment' as the 'admin' user.
      if ($finalize_auth_aim_order_payment) {
        _xdruple_authnet_finalize_auth_aim_order_payment($order, $sales_order);
      }
    }

    // Set the Drupal Commerce order_number to match the auto-number
    // returned from xTuple after saving the order.
    $order_wrapper->order_number->set($sales_order->number);

    // Set email addresses to send order confirmation to.
    if (!empty($ship_to_emails)) {
      $order_wrapper->mail->set($ship_to_emails);
    }

    // Set email addresses for managers.
    $manager_emails = variable_get('xdruple_checkout_manager_order_confirm_emails', NULL);
    if (!empty($manager_emails)) {
      $confirm_emails = $order_wrapper->mail->value();
      $confirm_emails = $confirm_emails . ',' . str_replace(' ', '', $manager_emails);
      $order_wrapper->mail->set($confirm_emails);
    }

    $order_wrapper->save();
  } catch (Exception $e) {
    // Use try/catch to make sure and reset the user even if there is an error.
    if (!user_access('administer rescued entities', $user)) {
      unset($_SESSION['access_token']);
      unset($_SESSION['oauth_user']);
      $session->setRescued('user', $cached_user);
    }

    // TODO: Reset the order status?
    // This is a good question for Commerce Guys.
    drupal_set_message(t('Order Submit failed. Message = %message', array(
      '%message' => $e->getMessage()
    )), 'error');
  }
}

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function xdruple_checkout_form_alter(&$form, &$form_state, $form_id) {
  if (in_array($form_id, array('user_login', 'user_login_block', 'user_profile_form', 'user_pass_reset'))) {
    _xdruple_checkout_alter_user_forms($form, $form_state, $form_id);
  }

  // For resetting the session variables for back to cart checkout button.
  if (strpos($form_id, 'commerce_checkout_form_') === 0 && !empty($form['buttons']['cancel'])) {
    $form['buttons']['cancel']['#submit'][] = 'xdruple_checkout_form_cancel_submit';
  }
}

/**
 * Private helper function to do hook_form_alter() to user forms.
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function _xdruple_checkout_alter_user_forms(&$form, &$form_state, $form_id) {
  $checkout_anonymous = variable_get('xdruple_checkout_anonymous', FALSE);

  // Check if user has an active cart order.
  if ($checkout_anonymous && $order = commerce_cart_order_load()) {
    // Check if there's anything in the cart and if user has not yet selected checkout method.
    if (xdruple_checkout_items_in_cart()
      && empty($_SESSION['xdruple_checkout_bypass'])
      && !empty($_SESSION['xdruple_checkout_anonymous'])
    ) {
      if (in_array($form_id, array('user_login', 'user_login_block', 'user_profile_form'))) {
        // Append the checkout redirect function on user's forms.
        $form['#submit'][] = 'xdruple_checkout_anonymous_submit';
        unset($form['#action']);

        // Anonymous checkout button.
        if (variable_get('xdruple_checkout_anonymous', FALSE)) {
          $form_state['#order'] = $order;
          $form['actions']['continue_button'] = array(
            '#name' => 'continue_button',
            '#type' => 'submit',
            '#value' => 'Checkout without an account',
            '#limit_validation_errors' => array(),
            '#submit' => array('xdruple_checkout_anonymous_continue_checkout'),
            '#states' => array(
              'visible' => array(
                ':input[name="have_pass"]' => array('value' => 0),
              ),
            ),
          );
          // Anonymous checkout as alternative to login form.
          $form['have_pass'] = array(
            '#type' => 'radios',
            '#title' => t('Do you have an account?'),
            '#description' => t('Choose %yes to login, %no to checkout as a guest or you can ', array(
                '%yes' => t('Yes'),
                '%no' => t('No')
              )) . l(t('create a new account'), 'user/register') . '.',
            '#options' => array(0 => t('Yes'), 1 => t('No')),
            '#weight' => -10,
            '#default_value' => 0,
          );
          $form['pass']['#states'] = array(
            'visible' => array(
              ':input[name="have_pass"]' => array('value' => 0),
            ),
          );
          $form['actions']['submit']['#states'] = array(
            'visible' => array(
              ':input[name="have_pass"]' => array('value' => 0),
            ),
          );
          //$form['pass']['#weight'] = 10;
          $form['actions']['continue_button']['#value'] = t('Checkout without an account');
          $form['actions']['continue_button']['#states'] = array(
            'visible' => array(
              ':input[name="have_pass"]' => array('value' => 1),
            ),
          );

          // Use the username as order email.
          // Email validation for the username form element
          $form['name']['#title'] = t('Email');
          $form['actions']['continue_button']['#limit_validation_errors'] = array(array('name'));
          $form['actions']['continue_button']['#validate'][] = 'xdruple_checkout_username_as_order_email_form_validate';
        }
      }
      elseif ($form_id == 'user_pass_reset' && !empty($form['actions'])) {
        // Provide the checkout as an alternative to the new account reset password process.
        // Message (help text) for the "Continue with checkout" button.
        $reset_password_message = variable_get('xdruple_checkout_reset_password_message', t('Enter and save a new password and then you can continue with the checkout process.'));

        if (!empty($reset_password_message)) {
          $form['actions']['checkout_message']['#markup'] = '<p>' . $reset_password_message . '</p>';
        }

        // "Continue with checkout" submit button.
        $form['actions']['checkout'] = array(
          '#type' => 'submit',
          '#value' => t('Continue with checkout'),
        );

        // Append the checkout redirect function on user's forms.
        $form['#submit'][] = 'xdruple_checkout_anonymous_submit';

        // Unset the action, use submit form function(s) instead.
        unset($form['#action']);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for commerce_checkout_form_checkout
 *
 * @param $form
 * @param $form_state
 */
function xdruple_checkout_form_commerce_checkout_form_checkout_alter(&$form, &$form_state) {
  $form_billing = &$form['customer_profile_billing'];
  $form_shipping = &$form['customer_profile_shipping'];
  if (isset($form_state['values']['customer_profile_billing'])) {
    $form_state_billing = &$form_state['values']['customer_profile_billing'];
  }
  if (isset($form_state['values']['customer_profile_shipping'])) {
    $form_state_shipping = &$form_state['values']['customer_profile_shipping'];
  }

  // Add ajax call back to the Ship To select so we can dynamically add the
  // Contact and Address fields if no Ship To is set.
  $form_shipping['xd_ship_to'][LANGUAGE_NONE]['#ajax'] = array(
    'callback' => 'xdruple_checkout_form_commerce_checkout_form_checkout_shipto_ajax_callback',
    'wrapper' => 'xtuple-ship-to-wrapper',
    'method' => 'replace',
    'effect' => 'fade',
  );

  foreach ($form_state['field']['#parents'] as $field_name => $field) {
    $form_billing['xd_customer'][LANGUAGE_NONE]['#limit_validation_errors'][] = array($field_name);
  }

  $form_shipping['xd_ship_to'][LANGUAGE_NONE]['#submit'] = array('');
  $form_billing['xd_customer'][LANGUAGE_NONE]['#submit'] = array('');

  // Remove the 'erp_xdcontactaddress' field from the form.
  // There is a separate address field on billing and shipping profiles
  // that we use for orders. This allows the user to set a different address
  // from the one associated with their contact.
  if (isset($form_shipping['xd_ship_to_contact'][LANGUAGE_NONE]['form']['erp_xdcontactaddress'])) {
    unset($form_shipping['xd_ship_to_contact'][LANGUAGE_NONE]['form']['erp_xdcontactaddress']);
  }
  if (isset($form_billing['xd_bill_to_contact'][LANGUAGE_NONE]['form']['erp_xdcontactaddress'])) {
    unset($form_billing['xd_bill_to_contact'][LANGUAGE_NONE]['form']['erp_xdcontactaddress']);
  }

  if (user_is_anonymous()) {
    $form_billing['xd_bill_to_contact'][LANGUAGE_NONE]['form']['entity_id']['#attributes']['disabled'] = TRUE;
    $form_billing['xd_bill_to_address'][LANGUAGE_NONE]['form']['entity_id']['#attributes']['disabled'] = TRUE;

    // TODO: Cannot disable 'xd_ship_to' or it doesn't pass entityreference validation. Leave as empty.
//    $form_shipping['xd_ship_to'][LANGUAGE_NONE]['#attributes']['disabled']                             = TRUE;

    if (isset($form_shipping['xd_ship_to_contact'])) {
      $form_shipping['xd_ship_to_contact'][LANGUAGE_NONE]['form']['entity_id']['#attributes']['disabled'] = TRUE;
    }
    if (isset($form_shipping['xd_ship_to_address'])) {
      $form_shipping['xd_ship_to_address'][LANGUAGE_NONE]['form']['entity_id']['#attributes']['disabled'] = TRUE;
    }
  }

  $ship_tos = array();
  // Remove the Ship Tos that are not for this customer. Reset the #options array.
  if (isset($form_billing['xd_customer'][LANGUAGE_NONE]['#default_value'][0]) &&
    (!isset($form_state['values']) || empty($form_state['values'])) &&
    $default_customer = $form_billing['xd_customer'][LANGUAGE_NONE]['#default_value'][0]
  ) {
    // This is the first load of an edit form, use the default.

    $ship_tos = xdruple_fields_get_ship_to_list($default_customer);
  }
  elseif (isset($form_billing['xd_customer'][LANGUAGE_NONE][0]['target_id']['#default_value']) &&
    (!isset($form_state['values']) || empty($form_state['values'])) &&
    preg_match("/.+\(([\w\+@\.]+)\)/", $form_billing['xd_customer'][LANGUAGE_NONE][0]['target_id']['#default_value'], $matches)
  ) {
    // This is the first load of an edit form, use the default from autocomplete.

    $ship_tos = xdruple_fields_get_ship_to_list($matches[1]);
  }
  else {
    // This is the second or more Ajax load, get it from the saved order.

    if (isset($form_state_billing['xd_customer'][LANGUAGE_NONE][0]['target_id']) &&
      $default_customer = $form_state_billing['xd_customer'][LANGUAGE_NONE][0]['target_id']
    ) {

      $ship_tos = xdruple_fields_get_ship_to_list($default_customer);
    }
    elseif (isset($form_billing['xd_customer'][LANGUAGE_NONE][0]['target_id']['#default_value'])) {
      preg_match("/.+\((.+)\)/", $form_billing['xd_customer'][LANGUAGE_NONE][0]['target_id']['#default_value'], $matches);
      // This is the first load of an edit form, use the default from autocomplete.

      if (!empty($matches[1])) {
        $ship_tos = xdruple_fields_get_ship_to_list($matches[1]);
      }
    }
  }

  if (count($ship_tos) > 0) {
    // Add $ship_tos to options list.
    $form_shipping['xd_ship_to'][LANGUAGE_NONE]['#options'] = $form_shipping['xd_ship_to'][LANGUAGE_NONE]['#options'] + $ship_tos;
  }
  // Reset the '#empty_option' => '- None -' to be more descriptive.
  $form_shipping['xd_ship_to'][LANGUAGE_NONE]['#empty_option'] = '- Custom Ship To -';
  $form_shipping['xd_ship_to'][LANGUAGE_NONE]['#empty_value'] = '_none';

  // Add wrapper to 'customer_profile_shipping' fieldset so changing Ship To can do an ajax
  // replace to update that section of the form.
  $form_shipping['#prefix'] = '<div id="xtuple-ship-to-wrapper">';
  $form_shipping['#suffix'] = '</div>';

  if (isset($form_shipping['xd_ship_to'][LANGUAGE_NONE]['#default_value'][0]) && (!isset($form_state['values']) || empty($form_state['values']))) {
    // First time loading form with a default set.
    $shipto_id = $form_shipping['xd_ship_to'][LANGUAGE_NONE]['#default_value'][0];
  }
  else {
    if (isset($form_state_shipping['xd_ship_to'][LANGUAGE_NONE][0]['target_id'])) {
      // After first load with target_id set.
      $shipto_id = $form_state_shipping['xd_ship_to'][LANGUAGE_NONE][0]['target_id'];
    }
  }

  // If a default Ship To is set on first load of the form OR the Ship To
  // select list was changed and a Ship To was selected, remove Contact and Address.
  if (!empty($shipto_id) && array_key_exists($shipto_id, $ship_tos)) {
    // Remove the Inline Entity Form entities so the Custom Ship To Contact
    // and Address will be blank if the user flips back to it.
    $contact_ief_id = $form_shipping['xd_ship_to_contact'][LANGUAGE_NONE]['#ief_id'];
    $address_ief_id = $form_shipping['xd_ship_to_address'][LANGUAGE_NONE]['#ief_id'];
    foreach ($form_state['inline_entity_form'] as $ief_key => $ief_child) {
      if (strncmp($ief_key, $contact_ief_id, strlen($contact_ief_id)) === 0) {
        unset($form_state['inline_entity_form'][$ief_key]);
      }
      if (strncmp($ief_key, $address_ief_id, strlen($address_ief_id)) === 0) {
        unset($form_state['inline_entity_form'][$ief_key]);
      }
    }

    // Remove the Ship To Contact and Address parts of the checkout form.
    unset($form_shipping['xd_ship_to_contact']);
    unset($form_shipping['xd_ship_to_address']);
    if (isset($form_state_shipping['ship_to_contact_wrapper'])) {
      unset($form_state_shipping['ship_to_contact_wrapper']);
    }
    if (isset($form_state_shipping['ship_to_address_wrapper'])) {
      unset($form_state_shipping['ship_to_address_wrapper']);
    }
    if (isset($form_state_shipping['xd_ship_to_contact'])) {
      unset($form_state_shipping['xd_ship_to_contact']);
    }
    else {
      // TODO
    }
    if (isset($form_state_shipping['xd_ship_to_address'])) {
      unset($form_state_shipping['xd_ship_to_address']);
    }
    else {
      // TODO
    }
    unset($form_state['input']['customer_profile_shipping']['xd_ship_to_contact']);
    unset($form_state['input']['customer_profile_shipping']['xd_ship_to_address']);

    // Get and display as read-only the Contact and Address from the selected ship to.
    $shipto = entity_load_single('xtuple_xdshipto', $shipto_id);

    // Show the user the selected Ship To's Contact and Address.
    $form_shipping['ship_to_contact_wrapper'] = array(
      '#type' => 'fieldset',
      '#title' => t('Ship To Contact'),
      'first_name' => array(
        '#type' => 'textfield',
        '#title' => t('First Name'),
        '#default_value' => isset($shipto->contact['firstName']) ? $shipto->contact['firstName'] : '',
        '#disabled' => TRUE,
      ),
      'last_name' => array(
        '#type' => 'textfield',
        '#title' => t('Last Name'),
        '#default_value' => isset($shipto->contact['lastName']) ? $shipto->contact['lastName'] : '',
        '#disabled' => TRUE,
      ),
      'email' => array(
        '#type' => 'textfield',
        '#title' => t('Primary Email'),
        '#default_value' => isset($shipto->contact['primaryEmail']) ? $shipto->contact['primaryEmail'] : '',
        '#disabled' => TRUE,
      ),
      'phone' => array(
        '#type' => 'textfield',
        '#title' => t('Phone'),
        '#default_value' => isset($shipto->contact['phone']) ? $shipto->contact['phone'] : '',
        '#disabled' => TRUE,
      ),
    );
    $form_shipping['ship_to_address_wrapper'] = array(
      '#type' => 'fieldset',
      '#title' => t('Ship To Address'),
      'line1' => array(
        '#type' => 'textfield',
        '#title' => t('Line1'),
        '#default_value' => isset($shipto->address['line1']) ? $shipto->address['line1'] : '',
        '#disabled' => TRUE,
      ),
      'line2' => array(
        '#type' => 'textfield',
        '#title' => t('Line2'),
        '#default_value' => isset($shipto->address['line2']) ? $shipto->address['line2'] : '',
        '#disabled' => TRUE,
      ),
      'city' => array(
        '#type' => 'textfield',
        '#title' => t('City'),
        '#default_value' => isset($shipto->address['city']) ? $shipto->address['city'] : '',
        '#disabled' => TRUE,
      ),
      'state' => array(
        '#type' => 'select',
        '#title' => t('State'),
        '#options' => array(isset($shipto->address['state']) ? $shipto->address['state'] : ''),
        '#default_value' => isset($shipto->address['state']) ? $shipto->address['state'] : '',
        '#disabled' => TRUE,
      ),
    );
  }
  else {
    // This is a Custom Ship To. Unset the default value.
    unset($form_shipping['xd_ship_to'][LANGUAGE_NONE]['#default_value']);
    /** @var Xtuple\Xdruple\Session\RescuedSession $session */
    $session = extensions_get_session();
    $session->setRescued('custom_ship_to', TRUE);
  }
}

/**
 * Ajax callback for commerce_checkout_form_checkout. Returns Ship To select list when the Customer list is populated
 */
function xdruple_checkout_form_commerce_checkout_form_checkout_shipto_ajax_callback($form, $form_state) {
  if (isset($form['customer_profile_shipping'])) {
    return $form['customer_profile_shipping'];
  }
  else {
    if ($form['commerce_customer_shipping']) {
      return $form['commerce_customer_shipping'][LANGUAGE_NONE]['profiles'][0];
    }
  }
}

/**
 * Submit callback for the user forms that will perform the redirection.
 */
function xdruple_checkout_anonymous_submit($form, &$form_state) {
  // Because the user in the order may have been updated (from uid 0 to the real
  // uid for example), clear static cache before trying to get the order.
  drupal_static_reset('commerce_cart_order_id');

  if (!empty($_SESSION['xdruple_checkout_anonymous'])) {
    // One time login link (reset password) for creating new account.
    if ($form['#form_id'] == 'user_pass_reset') {
      // Login for the new account to continue
      // with the checkout process.
      // @see user_pass_reset()
      if ($form_state['clicked_button']['#id'] == 'edit-checkout') {
        global $user;
        $users = user_load_multiple(array($form_state['build_info']['args'][0]), array('status' => '1'));
        $user = reset($users);
        $GLOBALS['user'] = $user;
        // User login with user_login_finalize().
        user_login_finalize();
        // Let the user's password be changed without the current password check.
        $token = drupal_random_key();
        $_SESSION['pass_reset_' . $GLOBALS['user']->uid] = $token;
      }
      // Continue the reset password process.
      else {
        drupal_goto('user/reset/' . implode('/', $form_state['build_info']['args']) . '/login');
      }
    }
    $order_id = commerce_cart_order_id($GLOBALS['user']->uid);
    if (user_is_logged_in() && $order_id) {
      unset($_SESSION['xdruple_checkout_anonymous']);
      $form_state['redirect'] = 'checkout/' . $order_id;
    }
  }
}

/**
 * Form validation handler for login form for using username as order email.
 */
function xdruple_checkout_username_as_order_email_form_validate($form, &$form_state) {
  $name = trim($form_state['values']['name']);
  form_set_value($form['name'], $name, $form_state);

  // Validate the e-mail address, and check if it is taken by an existing user.
  if ($error = user_validate_mail($form_state['values']['email'])) {
    form_set_error('name', $error);
  }
  else {
    $mail_taken = (bool) db_select('users')
      ->fields('users', array('uid'))
      ->condition('uid', $GLOBALS['user']->uid, '<>')
      ->condition('mail', db_like($form_state['values']['email']), 'LIKE')
      ->range(0, 1)
      ->execute()
      ->fetchField();
    if ($mail_taken) {
      // Format error message dependent on whether the user is logged in or not.
      // TODO: I'm not sure how this could be called by a user that is logged in.
      if ($GLOBALS['user']->uid) {
        form_set_error('name', t('The e-mail address %email is already taken.', array('%email' => $form_state['values']['email'])));
      }
      else {
        form_set_error('name', t('The e-mail address %email is already registered. <a href="@password">Have you forgotten your password?</a>', array(
          '%email' => $form_state['values']['email'],
          '@password' => url('user/password')
        )));
      }
    }
  }
}

/**
 * Submit callback to allow an anonymous users to continue without logging in.
 */
function xdruple_checkout_anonymous_continue_checkout($form, &$form_state) {
  // If the user chooses to continue without an account, set this variable so user
  // is only redirected once per order (or once per session if the session expires first).
  $_SESSION['xdruple_checkout_bypass'] = TRUE;
  $order = $form_state['#order'];

  // Using the username as order email.
  $order->mail = $form_state['values']['name'];
  commerce_order_save($order);

  $form_state['redirect'] = 'checkout/';
}

/**
 * Submit callback for the reset the checkout to cart.
 */
function xdruple_checkout_form_cancel_submit($form, &$form_state) {
  if (!empty($_SESSION['xdruple_checkout_anonymous'])) {
    unset($_SESSION['xdruple_checkout_anonymous']);
  }
  if (!empty($_SESSION['xdruple_checkout_bypass'])) {
    unset($_SESSION['xdruple_checkout_bypass']);
  }
}

/**
 * Helper function to check if the cart contains any items.
 */
function xdruple_checkout_items_in_cart() {
  global $user;

  $cart = commerce_cart_order_load($user->uid);
  $line_items = count($cart->commerce_line_items) ? TRUE : FALSE;

  return $line_items;
}

/**
 * Implements hook_features_exclude()
 *
 * @return array
 */
function xdruple_checkout_features_exclude() {
  return array(
    'variable' => array(
      'xdruple_checkout_manager_order_confirm_emails',
      'xdruple_checkout_message',
      'xdruple_checkout_reset_password_message',
    ),
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function xdruple_checkout_field_extra_fields() {
  $extra['commerce_customer_profile']['shipping']['form'] = array(
    'xd_shipping_address' => array(
      'label' => t('Shipping address'),
      'description' => t('Shipping address ERP entity reference'),
      'weight' => 0,
    ),
  );
  $extra['commerce_customer_profile']['billing']['form'] = array(
    'xd_billing_address' => array(
      'label' => t('Billing address'),
      'description' => t('Billing address ERP entity reference'),
      'weight' => 0,
    ),
  );

  return $extra;
}

/**
 * Implements hook_field_attach_form().
 *
 * @param $entity_type
 * @param $entity
 * @param $form
 * @param $form_state
 * @param $langcode
 */
function xdruple_checkout_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  if ($entity_type == 'commerce_customer_profile' && $entity->type == 'billing') {
    /** @var Xtuple\Xdruple\Session\RescuedSession $session */
    $session = extensions_get_session();

    $fieldset = array(
      '#type' => 'fieldset',
      '#title' => t('Billing contact'),
      '#tree' => TRUE,
    );
    $fieldset['first_name'] = array(
      '#type' => 'textfield',
      '#title' => t('First name'),
      '#required' => TRUE,
    );
    $fieldset['last_name'] = array(
      '#type' => 'textfield',
      '#title' => t('Last name'),
      '#required' => TRUE,
    );
    $fieldset['email'] = array(
      '#type' => 'emailfield',
      '#title' => t('E-mail'),
    );
    $fieldset['phone'] = array(
      '#type' => 'telfield',
      '#title' => t('Phone'),
    );
    if ($contact_id = xdruple_fields_get_bill_to_cntct_default($session->getRescued('customer'))) {
      /** @var \Xtuple\Rescued\Controller\ContactEntity $entity */
      $entity = entity_load_single('xtuple_xdcontact', $contact_id);
      $fieldset['first_name']['#default_value'] = !empty($entity->get('firstName')) ? $entity->get('firstName') : '';
      $fieldset['last_name']['#default_value'] = !empty($entity->get('lastName')) ? $entity->get('lastName') : '';
      $fieldset['email']['#default_value'] = !empty($entity->getPrimaryEmail()) ? $entity->getPrimaryEmail() : '';
      $fieldset['phone']['#default_value'] = !empty($entity->getPhone()) ? $entity->getPhone() : '';
    }
    $form['xd_billing_address']['contact'] = $fieldset;

    $fieldset = array(
      '#type' => 'fieldset',
      '#title' => t('Billing address'),
      '#tree' => TRUE,
    );
    $address = addressfield_default_values();
    if ($address_id = xdruple_fields_get_bill_to_addr_default($session->getRescued('customer'))) {
      /** @var \Xtuple\Rescued\Controller\AddressEntity $entity */
      $entity = entity_load_single('xtuple_xdaddress', $address_id);
      $address = $entity->getXnal();
    }
    if (!empty($form_state['addressfield']['xd_shipping_address'])) {
      $address = $form_state['addressfield']['xd_shipping_address'];
    }
    $fieldset['address'] = addressfield_generate($address, array(
      'address',
    ), array(
      'mode' => 'form',
    ));
    $fieldset['address']['element_key'] = array(
      '#type' => 'value',
      '#value' => 'xd_shipping_address',
    );
    $fieldset['address']['#required'] = TRUE;
    $form['xd_billing_address']['address'] = $fieldset;
  }
}
