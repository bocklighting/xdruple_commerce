<?php

/**
 * Implements hook_ctools_plugin_directory()
 */
function xdruple_commerce_ctools_plugin_directory($module, $plugin) {
  return "plugins/$plugin";
}

/**
* Implements hook_entity_info_alter().
*
* Override Drupal Commerce's entities to use xTuples.
*/
function xdruple_commerce_entity_info_alter(&$info) {
  // TODO: Get wsclient name. Assuming 'xtuple_' here.

  if (isset($info['xtuple_xdruplecommerceproduct'], $info['commerce_product']) && true) {
    $original = $info['commerce_product'];
    // TODO: Break the reference: (array)clone(object)$operation_info['xtuple_xdruplecommerceproduct']
    $info['commerce_product'] = $info['xtuple_xdruplecommerceproduct'];
    $info['commerce_product']['entity keys']['bundle'] = 'type';
    $info['commerce_product']['entity keys']['name'] = 'product_id';

    // Preserve some of the original entity_info settings.
    $info['commerce_product']['label'] = $original['label'];
    $info['commerce_product']['bundles']['product'] = $original['bundles']['product'];
    $info['commerce_product']['view modes'] = $original['view modes'];
    $info['commerce_product']['uri callback'] = $original['uri callback'];
    $info['commerce_product']['access callback'] = $original['access callback'];
  }

//   if (isset($info['xtuple_xdruplecommercecustomerprofile'], $info['commerce_customer_profile']) && true) {
//     $original = $info['commerce_customer_profile'];
//     // TODO: Break the reference: (array)clone(object)$operation_info['xtuple_xdruplecommercecustomerprofile']
//     $info['commerce_customer_profile'] = $info['xtuple_xdruplecommercecustomerprofile'];
//     $info['commerce_customer_profile']['entity keys']['bundle'] = 'type';
//     $info['commerce_customer_profile']['entity keys']['name'] = 'profile_id';

//     // Preserve some of the original entity_info settings.
//     $info['commerce_customer_profile']['label'] = $original['label'];
//     $info['commerce_customer_profile']['bundles']['billing'] = $original['bundles']['billing'];
//     $info['commerce_customer_profile']['view modes'] = $original['view modes'];
//     $info['commerce_customer_profile']['uri callback'] = $original['uri callback'];
//     $info['commerce_customer_profile']['access callback'] = $original['access callback'];
//   }
}

/**
 * Implements hook_entity_operation_info_alter(().
 *
 * Override Drupal Commerce's entities to use the RESCUED entity operation handler.
 *
 * @param $operation_info
 *  The array of data provided by hook_entity_operation_info().
 */
function xdruple_commerce_entity_operation_info_alter(&$operation_info) {
  // TODO: Consider removing 'operations ui' from commerce_product in
  // xdruple_commerce_entity_info_alter() instead of adding this here.

  // Add a handler for commerce_product.
  if (isset($operation_info['xtuple_xdruplecommerceproduct'])) {
    // TODO: Break the reference: (array)clone(object)$operation_info['xtuple_xdruplecommerceproduct']
    $operation_info['commerce_product'] = $operation_info['xtuple_xdruplecommerceproduct'];
  }

  // Add a handler for commerce_customer_profile.
//   if (isset($operation_info['xtuple_xdruplecommercecustomerprofile'])) {
//     // TODO: Break the reference: (array)clone(object)$operation_info['xtuple_xdruplecommercecustomerprofile']
//     $operation_info['commerce_customer_profile'] = $operation_info['xtuple_xdruplecommercecustomerprofile'];
//   }
}

/**
 * Implements hook_menu_alter().
 *
 * Wrap any 'access checkout' or 'access content' items in our custom callback
 * so we can dynamically grant it.
 */
function xdruple_commerce_menu_alter(&$items) {
  if (!empty($items['checkout'])) {
    array_unshift(
      $items['checkout']['access arguments'],
      'checkout',
      'create'
    );
    $items['checkout']['access callback'] = 'xdruple_access';
  }
  if (!empty($items['checkout/%commerce_order'])) {
    array_unshift(
      $items['checkout/%commerce_order']['access arguments'],
      'checkout/%commerce_order',
      'update'
    );
    $items['checkout/%commerce_order']['access callback'] = 'xdruple_access';
  }
  if (!empty($items['checkout/%commerce_order/%commerce_checkout_page'])) {
    array_unshift(
      $items['checkout/%commerce_order/%commerce_checkout_page']['access arguments'],
      'checkout/%commerce_order/%commerce_checkout_page',
      'update'
    );
    $items['checkout/%commerce_order/%commerce_checkout_page']['access callback'] = 'xdruple_access';
  }
  if (!empty($items['cart'])) {
    array_unshift(
      $items['cart']['access arguments'],
      'cart',
      'update'
    );
    $items['cart']['access callback'] = 'xdruple_access';
  }
  if (!empty($items['cart/my'])) {
    array_unshift(
      $items['cart/my']['access arguments'],
      'cart/my',
      'update'
    );
    $items['cart/my']['access callback'] = 'xdruple_access';
  }
}

/**
 * Implements hook_commerce_line_item_summary_link_info_alter().
 *
 * Wrap any 'access checkout' items in 'access xtuple checkout' so we can
 * dynamically grant it.
 */
function xdruple_commerce_commerce_line_item_summary_link_info_alter(&$links) {
  if (!empty($links['checkout'])) {
    $links['checkout']['access'] = xdruple_access(
      'commerce_line_item_summary_link_info',
      'view',
      'access checkout'
    );
  }
}

/**
 * Implements hook_rescued_register_clients_resources_alter().
 */
function xdruple_commerce_rescued_register_clients_resources_alter(&$rescued_clients_url_resources) {
  if (!in_array('XdrupleCommerceCustomer', $rescued_clients_url_resources['xtuple'])) {
    $rescued_clients_url_resources['xtuple'][] = 'XdrupleCommerceCustomer';
  }
  if (!in_array('Customer', $rescued_clients_url_resources['xtuple'])) {
    $rescued_clients_url_resources['xtuple'][] = 'Customer';
  }
  if (!in_array('XdrupleCustomer', $rescued_clients_url_resources['xtuple'])) {
    $rescued_clients_url_resources['xtuple'][] = 'XdrupleCustomer';
  }
  if (!in_array('XdrupleCommerceProduct', $rescued_clients_url_resources['xtuple'])) {
    $rescued_clients_url_resources['xtuple'][] = 'XdrupleCommerceProduct';
  }
  if (!in_array('XdrupleItemGroup', $rescued_clients_url_resources['xtuple'])) {
    $rescued_clients_url_resources['xtuple'][] = 'XdrupleItemGroup';
  }
  if (!in_array('XdrupleItemGroupGroup', $rescued_clients_url_resources['xtuple'])) {
    $rescued_clients_url_resources['xtuple'][] = 'XdrupleItemGroupGroup';
  }
  if (!in_array('SalesOrder', $rescued_clients_url_resources['xtuple'])) {
    $rescued_clients_url_resources['xtuple'][] = 'SalesOrder';
  }

  return $rescued_clients_url_resources;
}

/**
 * Implements hook_rescued_operation_entityform_alter().
 */
function xdruple_commerce_rescued_operation_entityform_alter(&$form, &$form_state, $context) {
  $form_id = $form_state['build_info']['form_id'];

  if (isset($context['entity_type']) && $context['entity_type'] === 'xtuple_xdstdorditem') {
    // Default this form to the customer and ship to in the user's session.
    if (isset($_SESSION['rescued']['customer'])) {
      $customer = $_SESSION['rescued']['customer'];
      $form['customer']['#default_value'] = $customer;
      $form['customer']['#options'] = array($customer => $customer);
    } else {
      $customer = null;
    }
    if (isset($_SESSION['rescued']['ship_to'])) {
      $form['shipTo']['#default_value'] = $_SESSION['rescued']['ship_to'];
      $form['shipTo']['#options'] = xdruple_fields_get_ship_to_list($customer);
    }
  }

  if (isset($context['entity_type']) && $context['entity_type'] === 'xtuple_xdrupleusercontact') {
    // Modify this entity form to hide some properties/fields.
    if (!user_access('administer users')) {
      $form['create_new_customer']['#type'] = 'hidden';
      $form['create_new_customer']['#attributes']['disabled'] = TRUE;
      $form['create_new_customer']['#default_value'] = TRUE;

      $form['create_xtuple_user_association']['#type'] = 'hidden';
      $form['create_xtuple_user_association']['#attributes']['disabled'] = TRUE;
      $form['create_xtuple_user_association']['#default_value'] = TRUE;
    } else {
      $form['create_new_customer']['#title'] = 'Create new xTuple Customer';
      $form['create_new_customer']['#description'] = 'Check this box to create an xTuple Customer for this user. If this is not checked, this user may not be able to place orders.';
      $form['create_new_customer']['#default_value'] = !isset($context['entity']->is_new) ? $context['entity']->create_new_customer : TRUE;

      if (isset($context['entity']->is_new) && $context['entity']->is_new) {
        $context['entity']->create_new_customer = TRUE;

        if (isset($form_state['input']['xd_contact_association'][LANGUAGE_NONE]['form'])) {
          $form_state['input']['xd_contact_association'][LANGUAGE_NONE]['form']['create_new_customer'] =  true;
        }
      }

      if (!isset($context['entity']->is_new) && $context['entity']->create_new_customer) {
        // Once create_new_customer is set, you can't unset it.
        $form['create_new_customer']['#attributes']['disabled'] = TRUE;
      }
    }
    $form['create_new_customer']['#element_validate'] = array('xdruple_commerce_user_reg_form_validate');

    $form['xdruple_site']['#type'] = 'hidden';
    $form['xdruple_site']['#attributes']['disabled'] = TRUE;
    $form['xdruple_site']['#options'][''] = ' - None - ';
    // We add this below in xdruple_commerce_form_alter().
    $form['xdruple_site']['#required'] = FALSE;
    $form['xdruple_site']['#element_validate'] = array('xdruple_commerce_user_reg_form_validate');

    $form['drupalUserUuid']['#type'] = 'hidden';
    $form['drupalUserUuid']['#attributes']['disabled'] = TRUE;
    $form['drupalUserUuid']['#default_value'] = isset($context['entity']->drupalUserUuid) ? $context['entity']->drupalUserUuid : null;

    unset ($form['uuid']);
  }

  if (isset($context['entity_type']) && $context['entity_type'] === 'xtuple_xdruplecommercecontact') {
    // Modify this entity form to hide some properties/fields.
    unset ($form['number']);
    unset ($form['honorific']);
    unset ($form['middleName']);
    unset ($form['suffix']);
    unset ($form['jobTitle']);
    unset ($form['initials']);
    unset ($form['alternate']);
    unset ($form['fax']);
    unset ($form['webAddress']);

    $form['firstName']['#weight'] = -44;
    $form['lastName']['#weight'] = -43;
    $form['primaryEmail']['#weight'] = -42;
    $form['phone']['#weight'] = -41;

    $form['firstName']['#required'] = true;
    $form['lastName']['#required'] = true;
  }

  if (isset($context['entity_type']) && $context['entity_type'] === 'xtuple_xdruplecommerceaddress') {
    // Modify this entity form to hide some properties/fields.
    unset ($form['number']);

    $form['country']['#weight'] = -47;
    $form['line1']['#weight'] = -46;
    $form['line2']['#weight'] = -45;
    $form['line3']['#weight'] = -44;
    $form['city']['#weight'] = -43;
    $form['state']['#weight'] = -42;
    $form['postalCode']['#weight'] = -41;

    $countries = _addressfield_country_options_list();
    $xtuple_countries_format = array('' => '--');

    // xTuple xm.xdruple_commerce_address uses a full country name as the key.
    foreach ($countries as $key => $value) {
      $xtuple_countries_format[$value] = $value;
    }

    $format = array();

    if (isset($form_state['triggering_element']) && $form_state['triggering_element']['#name'] === 'country') {
      // For non-IEF
      $country = drupal_array_get_nested_value($form_state['values'], $form_state['triggering_element']['#parents']);
      $selected_country = array_search($country, $countries);
    } else {
      // For initial load an IEF ajax refreshes.
      $selected_country = isset($context['entity']->country) ? array_search($context['entity']->country, $countries) : '';
    }
    $address = array(
      'country' => $selected_country,
    );
    $addr_context = array(
      'mode' => 'form',
    );

    module_load_include('inc', 'addressfield', 'plugins/format/address');
    addressfield_format_address_generate($format, $address, $addr_context);

    if (isset($form['#parents'])) {
      $wrapper_id = 'xtuple-address-wrapper-' . implode('-', $form['#parents']);
    } else {
      $wrapper_id = 'xtuple-address-wrapper';
    }
    $form['#wrapper_id'] = $wrapper_id;
    $form['#prefix'] = '<div id="' . $wrapper_id . '">';
    $form['#suffix'] = '</div>';

    // If this is a child IEF and the operation is 'add', we can't make any of
    // the address fields required becuase we allow contacts to be saved with
    // no address set. There are also use cases like Customer that has a
    // Correspondence Contact that can be blank. Skip for user reg/profile
    // forms because it should be required on those.
    $skip_required = false;
    if (isset($form['#ief_id'], $form['#op']) && $form_id !== 'user_register_form' && $form_id !== 'user_profile_form') {
      $path_parts = explode('--', $form['#ief_id']);

      if ((count($path_parts) > 1 && $form['#op'] === 'add')) {
        $skip_required = true;
      } elseif (isset($form_state['values'])) {
        $country_parents = $form['#parents'];
        $country_parents[] = 'country';
        $country = drupal_array_get_nested_value($form_state['values'], $country_parents);

        if (empty($country) && drupal_array_get_nested_value($form_state['values'], $form['#parents'])) {
          $skip_required = true;
        }
      }
    }

    $form['country']['#type'] = 'select';
    $form['country']['#options'] = $xtuple_countries_format;
    $form['country']['#weight'] = -47;
    $form['country']['#default_value'] = isset($context['entity']->country) ? $context['entity']->country : '';
    $form['country']['#title'] = $format['country']['#title'];
    $form['country']['#required'] = $skip_required ? false : $format['country']['#required'];
    $form['country']['#ajax']['callback'] = 'addressfield_standard_widget_refresh';
    $form['country']['#ajax']['wrapper'] = $wrapper_id;
    $form['country']['#ief_processing'] = false; // Do not want to save this through IEF on an ajax update.


    $form['line1']['#title'] = $format['street_block']['thoroughfare']['#title'];
    $form['line1']['#size'] = $format['street_block']['thoroughfare']['#size'];
    $form['line1']['#required'] = $skip_required ? false : $format['street_block']['thoroughfare']['#required'];

    $form['line2']['#title'] = $format['street_block']['premise']['#title'];
    $form['line2']['#size'] = $format['street_block']['premise']['#size'];


    $form['line3']['#title'] = 'Address 3';
    $form['line3']['#size'] = $format['street_block']['premise']['#size'];


    $form['city']['#title'] = $format['locality_block']['locality']['#title'];
    $form['city']['#size'] = $format['locality_block']['locality']['#size'];
    $form['city']['#required'] = $skip_required ? false : $format['locality_block']['locality']['#required'];


    if (isset($format['locality_block']['administrative_area'])) {
      if (isset($format['locality_block']['administrative_area']['#options'])) {
        $form['state']['#type'] = 'select';
        $form['state']['#options'] = $format['locality_block']['administrative_area']['#options'];
      } else {
        $form['state']['#type'] = 'textfield';
        $form['state']['#size'] = $format['locality_block']['administrative_area']['#size'];
      }
      $form['state']['#title'] = $format['locality_block']['administrative_area']['#title'];
      $form['state']['#default_value'] = isset($context['entity']->state) ? $context['entity']->state : '_none';
      $form['state']['#required'] = $skip_required ? false : $format['locality_block']['administrative_area']['#required'];
    } else {
      unset($form['state']);
    }

    if (isset($format['locality_block']['postal_code'])) {
      $form['postalCode']['#title'] = $format['locality_block']['postal_code']['#title'];
      $form['postalCode']['#size'] = $format['locality_block']['postal_code']['#size'];
      $form['postalCode']['#required'] = $skip_required ? false : $format['locality_block']['postal_code']['#required'];
    } else {
      unset($form['postalCode']);
    }
  }

  if (isset($context['entity_type']) && $context['entity_type'] === 'xtuple_xdruplecommerceshipto') {
    // Modify this entity form to hide some properties/fields.
    unset ($form['uuid']);

    $form['number']['#weight'] = -44;
    $form['name']['#weight'] = -43;
    $form['isDefault']['#weight'] = -42;
    $form['customer']['#weight'] = -41;
  }

  if (isset($context['entity_type']) && $context['entity_type'] === 'xtuple_xdruplecommercecustomer') {
    // Modify this entity form to hide some properties/fields.
    unset ($form['isActive']);

    $form['number']['#weight'] = -42;
    $form['name']['#weight'] = -41;
  }
}

function xdruple_commerce_user_association_callback(&$form, &$form_state) {
  $create_association = false;
  if (isset($form_state['values']['create_xtuple_user_association'])) {
    $create_association = $form_state['values']['create_xtuple_user_association'];
  }

  $ief_key = $form['xd_contact_association'][LANGUAGE_NONE]['#ief_id'];

  if (!$create_association) {
    foreach ($form_state['inline_entity_form'] as $ief_id => $ief) {
      $length = strlen($ief_key);
      if (substr($ief_id, 0, $length) === $ief_key) {
        unset($form_state['inline_entity_form'][$ief_id]);
      }
    }

    unset($form['xd_contact_association'][LANGUAGE_NONE]);
    unset($form_state['complete form']['xd_contact_association'][LANGUAGE_NONE]);
    unset($form_state['input']['xd_contact_association']);
    unset($form_state['values']['xd_contact_association']);
  }

  return $form['xd_contact_association'];
}

/**
 * Implements hook_rescued_entity_default_label_alter().
 */
function xdruple_commerce_rescued_entity_default_label_alter($entity, &$label, $context) {
  if (isset($context['entity_type']) && $context['entity_type'] === 'xtuple_xdruplecommercecontact') {
    if (isset($entity->firstName) || isset($entity->lastName)) {
      $label = '';
      $label .= isset($entity->firstName) ? ' ' . $entity->firstName : '';
      $label .= isset($entity->lastName) ? ' ' . $entity->lastName : '';
    }
  }

  if (isset($context['entity_type']) && $context['entity_type'] === 'xtuple_xdruplecommerceaddress') {
    $label = $entity->line1;
    $label .= ' ' . $entity->city;
    $label .= isset($entity->state) ? ', ' . $entity->state : '';
  }

  if (isset($context['entity_type']) && $context['entity_type'] === 'xtuple_xdruplecommerceshipto') {
    $label = $entity->number;
  }

  if (isset($context['entity_type']) && $context['entity_type'] === 'xtuple_xdruplecommercecustomer') {
    $label = $entity->number;
  }
}

/**
 * Implements hook_rescued_entity_build_content_view_alter().
 */
function xdruple_commerce_rescued_entity_build_content_view_alter($entity, &$resource_schema, $context) {
  if (isset($context['entity_type']) && $context['entity_type'] === 'xtuple_xdruplecommercecontact') {
    // TODO: Convert this to a function call that has a hook to override.
    // User that function in xdruple_commerce_rescued_operation_entityform_alter().
    $properity_white_list = array(
      'firstName' => true,
      'lastName' => true,
      'phone' => true,
      'primaryEmail' => true,
      'address' => true,
    );

    // Limit the schema to only the fields we want to display.
    $resource_schema = array_intersect_key($resource_schema, $properity_white_list);
  }

  if (isset($context['entity_type']) && $context['entity_type'] === 'xtuple_xdruplecommerceaddress') {
    // TODO: Convert this to a function call that has a hook to override.
    // User that function in xdruple_commerce_rescued_operation_entityform_alter().
    $properity_white_list = array(
      'line1' => true,
      'line2' => true,
      'line3' => true,
      'city' => true,
      'state' => true,
      'postalCode' => true,
      'country' => true,
    );

    // Limit the schema to only the fields we want to display.
    $resource_schema = array_intersect_key($resource_schema, $properity_white_list);
  }

  if (isset($context['entity_type']) && $context['entity_type'] === 'xtuple_xdruplecommerceshipto') {
    // TODO: Convert this to a function call that has a hook to override.
    // User that function in xdruple_commerce_rescued_operation_entityform_alter().
    $properity_white_list = array(
      'number' => true,
      'name' => true,
      'isDefault' => true,
      'customer' => true,
      'contact' => true,
      'address' => true,
    );

    // Limit the schema to only the fields we want to display.
    $resource_schema = array_intersect_key($resource_schema, $properity_white_list);
  }

  if (isset($context['entity_type']) && $context['entity_type'] === 'xtuple_xdruplecommercecustomer') {
    // TODO: Convert this to a function call that has a hook to override.
    // User that function in xdruple_commerce_rescued_operation_entityform_alter().
    $properity_white_list = array(
      'number' => true,
      'name' => true,
      'billingContact' => true,
      'correspondenceContact' => true,
      'shipTo' => true,
    );

    // Limit the schema to only the fields we want to display.
    $resource_schema = array_intersect_key($resource_schema, $properity_white_list);
  }
}

/**
 * Implements hook_entity_view().
 */
function xdruple_commerce_entity_view($entity, $entity_type, $view_mode, $langcode) {
  if ($entity_type === 'xtuple_xdruplecommercecontact') {
    // Reset the weights to the correct order.
    $entity->content['firstName']['#weight'] = -4;
    $entity->content['lastName']['#weight'] = -3;
    $entity->content['primaryEmail']['#weight'] = -2;
    $entity->content['phone']['#weight'] = -1;

    // Unset the address and use the 'erp_xdruplecommercecontactaddress' field instead.
    unset($entity->content['address']);
  }

  if ($entity_type === 'xtuple_xdruplecommerceaddress') {
    // Reset the weights to the correct order and change the labels.
    // For some reason these weights are not respected.  See the
    // xdruple_commerce_field_extra_fields_alter() function.
    $entity->content['line1']['#weight'] = -7;
    $entity->content['line1']['#title'] = 'Address 1';
    $entity->content['line2']['#weight'] = -6;
    $entity->content['line2']['#title'] = 'Address 2';
    $entity->content['line3']['#weight'] = -5;
    $entity->content['line3']['#title'] = 'Address 3';
    $entity->content['city']['#weight'] = -4;
    $entity->content['state']['#weight'] = -3;
    $entity->content['postalCode']['#weight'] = -2;
    $entity->content['country']['#weight'] = -1;
  }

  if ($entity_type === 'xtuple_xdruplecommerceshipto') {
    $entity->content['erp_xdruplecommerceshiptocontact']['#formatter'] = 'entityreference_entity_view';
    // Reset the weights to the correct order.
    $entity->content['number']['#weight'] = -4;
    $entity->content['name']['#weight'] = -3;
    $entity->content['isDefault']['#weight'] = -2;
    $entity->content['customer']['#weight'] = -1;

    // Unset the address and contact. Use the 'erp_xdruplecommerceshiptoxxx' fields instead.
    unset($entity->content['address']);
    unset($entity->content['contact']);
  }

  if ($entity_type === 'xtuple_xdruplecommercecustomer') {
    // Reset the weights to the correct order.
    $entity->content['number']['#weight'] = -2;
    $entity->content['name']['#weight'] = -1;

    // Unset some things. Use the 'erp_xdruplecommerceshiptoxxx' fields instead.
    unset($entity->content['isActive']);
    unset($entity->content['billingContact']);
    unset($entity->content['correspondenceContact']);
    unset($entity->content['shipTo']);
  }
}

/**
 * Implements hook_entity_property_info_alter()
 *
 * Add our custom xTuple properties.
 *
 * @param array $info The associative array of entity properties.
 */
function xdruple_commerce_entity_property_info_alter(&$info) {
  if (isset($info['xtuple_xdruplecommerceproduct'], $info['xtuple_xdruplecommerceproduct']['properties'], $info['commerce_product'])) {
    foreach ($info['xtuple_xdruplecommerceproduct']['properties'] as $prop_name => $prop_value) {
      if (!isset($info['commerce_product']['properties'][$prop_name])) {
        // Set product property to match xTuple's entity.
        // TODO: Break the reference: (array)clone(object)$prop_value
        $info['commerce_product']['properties'][$prop_name] = $prop_value;
      }
    }
  }

//   if (isset($info['xtuple_xdruplecommercecustomerprofile'], $info['xtuple_xdruplecommercecustomerprofile']['properties'], $info['commerce_customer_profile'])) {
//     foreach ($info['xtuple_xdruplecommercecustomerprofile']['properties'] as $prop_name => $prop_value) {
//       if (!isset($info['commerce_customer_profile']['properties'][$prop_name])) {
//         // Set profile property to match xTuple's entity.
//         // TODO: Break the reference: (array)clone(object)$prop_value
//         $info['commerce_customer_profile']['properties'][$prop_name] = $prop_value;
//       }
//     }
//   }
}

/**
 * Implements hook_field_extra_fields_alter()
 *
 * Expose our custom xTuple properties as fields.
 *
 * @param array $info The associative array of 'pseudo-field' components.
 */
function xdruple_commerce_field_extra_fields_alter(&$info) {
  if (isset($info['xtuple_xdruplecommerceproduct'],
    $info['xtuple_xdruplecommerceproduct']['xtuple_xdruplecommerceproduct'],
    $info['commerce_product'],
    $info['commerce_product']['product'])) {

    foreach ($info['xtuple_xdruplecommerceproduct']['xtuple_xdruplecommerceproduct'] as $view_name => $view_fields) {
      if (isset($info['commerce_product']['product'][$view_name])) {
        foreach ($view_fields as $field_name => $field_values) {
          if (!isset($info['commerce_product']['product'][$view_name][$field_name])) {
            // Set product fields to match xTuple's entity.
            // TODO: Break the reference: (array)clone(object)$field_values
            $info['commerce_product']['product'][$view_name][$field_name] = $field_values;
          }
        }
      }
    }
  }

  if (isset($info['xtuple_xdruplecommercecontact'])) {
    $contact_fields = &$info['xtuple_xdruplecommercecontact']['xtuple_xdruplecommercecontact'];

    $contact_fields['display']['firstName']['weight'] = -54;
    $contact_fields['display']['lastName']['weight'] = -53;
    $contact_fields['display']['primaryEmail']['weight'] = -52;
    $contact_fields['display']['phone']['weight'] = -51;

    $contact_fields['form']['firstName']['weight'] = -44;
    $contact_fields['form']['lastName']['weight'] = -43;
    $contact_fields['form']['primaryEmail']['weight'] = -42;
    $contact_fields['form']['phone']['weight'] = -41;
  }

  if (isset($info['xtuple_xdruplecommerceaddress'])) {
    $address_fields = &$info['xtuple_xdruplecommerceaddress']['xtuple_xdruplecommerceaddress'];

    $address_fields['display']['line1']['weight'] = -57;
    $address_fields['display']['line2']['weight'] = -56;
    $address_fields['display']['line3']['weight'] = -55;
    $address_fields['display']['city']['weight'] = -54;
    $address_fields['display']['state']['weight'] = -53;
    $address_fields['display']['postalCode']['weight'] = -52;
    $address_fields['display']['country']['weight'] = -51;

    $address_fields['form']['country']['weight'] = -47;
    $address_fields['form']['line1']['weight'] = -46;
    $address_fields['form']['line2']['weight'] = -45;
    $address_fields['form']['line3']['weight'] = -44;
    $address_fields['form']['city']['weight'] = -43;
    $address_fields['form']['state']['weight'] = -42;
    $address_fields['form']['postalCode']['weight'] = -41;
  }

  if (isset($info['xtuple_xdruplecommerceshipto'])) {
    $shipto_fields = &$info['xtuple_xdruplecommerceshipto']['xtuple_xdruplecommerceshipto'];

    $shipto_fields['display']['number']['weight'] = -54;
    $shipto_fields['display']['name']['weight'] = -53;
    $shipto_fields['display']['isDefault']['weight'] = -52;
    $shipto_fields['display']['customer']['weight'] = -51;

    $shipto_fields['form']['number']['weight'] = -44;
    $shipto_fields['form']['name']['weight'] = -43;
    $shipto_fields['form']['isDefault']['weight'] = -42;
    $shipto_fields['form']['customer']['weight'] = -41;
  }

  if (isset($info['xtuple_xdruplecommercecustomer'])) {
    $shipto_fields = &$info['xtuple_xdruplecommercecustomer']['xtuple_xdruplecommercecustomer'];

    $shipto_fields['display']['number']['weight'] = -52;
    $shipto_fields['display']['name']['weight'] = -51;

    $shipto_fields['form']['number']['weight'] = -42;
    $shipto_fields['form']['name']['weight'] = -41;
  }

//   if (isset($info['xtuple_xdruplecommercecustomerprofile'],
//     $info['xtuple_xdruplecommercecustomerprofile']['xtuple_xdruplecommercecustomerprofile'],
//     $info['commerce_customer_profile'],
//     $info['commerce_customer_profile']['billing'])) {

//     foreach ($info['xtuple_xdruplecommercecustomerprofile']['xtuple_xdruplecommercecustomerprofile'] as $view_name => $view_fields) {
//       if (isset($info['commerce_customer_profile']['billing'][$view_name])) {
//         foreach ($view_fields as $field_name => $field_values) {
//           if (!isset($info['commerce_customer_profile']['billing'][$view_name][$field_name])) {
//             // Set profile fields to match xTuple's entity.
//             // TODO: Break the reference: (array)clone(object)$field_values
//             $info['commerce_customer_profile']['billing'][$view_name][$field_name] = $field_values;
//           }
//         }
//       }
//     }
//   }
}

/**
 * Lets modules add extra fields to product entities without using
 * hook_field_extra_field_alter because of how product_reference calls
 * commerce_product_field_extra_fields() directly instead of using
 * field_info_extra_fields().
 *
 * @See: commerce_product_reference_field_extra_fields()
 *
 * @param $extra
 *   Extra fields from commerce_product_field_extra_fields()
 *
 * @return
 *   Modified extra fields array with your additions/changes.
 */
function xdruple_commerce_commerce_product_add_extra_fields_alter(&$extra) {
  // Modify $extra here to add the extra xTuple specific entity properties.

  foreach (commerce_product_types() as $type => $product_type) {
    $form = array(
      'subTitle' => array(
        'label' => t('Product Sub-Title'),
        'description' => t('Product module sub-title form element'),
        'weight' => -4,
      ),
      'productWeight' => array(
        'label' => t('Product Weight'),
        'description' => t('Product module product weight form element'),
        'weight' => -4,
      ),
      'packageWeight' => array(
        'label' => t('Package Weight'),
        'description' => t('Product module package weight form element'),
        'weight' => -4,
      ),
      'classCode' => array(
        'label' => t('Class Code'),
        'description' => t('Product module class code form element'),
        'weight' => -4,
      ),
      'productCategory' => array(
        'label' => t('Product Category'),
        'description' => t('Product module product category form element'),
        'weight' => -4,
      ),
      'inventoryUnit' => array(
        'label' => t('Inventory Unit'),
        'description' => t('Product module inventory unit form element'),
        'weight' => -4,
      ),
      'priceUnit' => array(
        'label' => t('Price Unit'),
        'description' => t('Product module price unit form element'),
        'weight' => -4,
      ),
      'uomRatio' => array(
        'label' => t('UOM Ratio'),
        'description' => t('Product module UOM ratio form element'),
        'weight' => -4,
      ),
      'weightUnit' => array(
        'label' => t('Weight Unit'),
        'description' => t('Product module weight unit form element'),
        'weight' => -4,
      ),
      'notes' => array(
        'label' => t('Notes'),
        'description' => t('Product module notes form element'),
        'weight' => -3,
      ),
      'extDescrip' => array(
        'label' => t('Extended Description'),
        'description' => t('Product module extended description form element'),
        'weight' => -3,
      ),
      'urls' => array(
        'label' => t('URLs'),
        'description' => t('Product file URLs'),
        'weight' => -3,
      ),
    );

    $display = array(
      'subTitle' => array(
        'label' => t('Product Sub-Title'),
        'description' => t('Product sub-title'),
        'theme' => 'xdruple_commerce_sub_title',
        'weight' => -4,
      ),
      'productWeight' => array(
        'label' => t('Product Weight'),
        'description' => t('Weight of the product'),
        'theme' => 'xdruple_commerce_product_weight',
        'weight' => -4,
      ),
      'packageWeight' => array(
        'label' => t('Package Weight'),
        'description' => t('Weight of the empty package this product comes in'),
        'theme' => 'xdruple_commerce_package_weight',
        'weight' => -4,
      ),
      'classCode' => array(
        'label' => t('Class Code'),
        'description' => t('Class Code the product belongs to'),
        'theme' => 'xdruple_commerce_class_code',
        'weight' => -4,
      ),
      'productCategory' => array(
        'label' => t('Product Category'),
        'description' => t('Product Category the product belongs to'),
        'theme' => 'xdruple_commerce_product_category',
        'weight' => -4,
      ),
      'inventoryUnit' => array(
        'label' => t('Inventory Unit'),
        'description' => t('Unit of measure used for inventory'),
        'theme' => 'xdruple_commerce_inventory_unit',
        'weight' => -4,
      ),
      'priceUnit' => array(
        'label' => t('Price Unit'),
        'description' => t('Unit of measure used for the price calculation'),
        'theme' => 'xdruple_commerce_price_unit',
        'weight' => -4,
      ),
      'uomRatio' => array(
        'label' => t('UOM Ratio'),
        'description' => t('Unit of measure ratio between price and inventory'),
        'theme' => 'xdruple_commerce_uom_ratio',
        'weight' => -4,
      ),
      'weightUnit' => array(
        'label' => t('Weight Unit'),
        'description' => t('Unit of measure used for the weight calculation'),
        'theme' => 'xdruple_commerce_weight_unit',
        'weight' => -4,
      ),
      'notes' => array(
        'label' => t('Notes'),
        'description' => t('Additional notes for the product'),
        'theme' => 'xdruple_commerce_notes',
        'weight' => -3,
      ),
      'extDescrip' => array(
        'label' => t('Extended Description'),
        'description' => t('Extended description of the product'),
        'theme' => 'xdruple_commerce_ex_descrip',
        'weight' => -3,
      ),
      'urls' => array(
        'label' => t('URLs'),
        'description' => t('Product file URLs'),
        'weight' => -3,
      ),
    );

    $extra['commerce_product'][$type]['form'] = array_merge($extra['commerce_product'][$type]['form'], $form);
    $extra['commerce_product'][$type]['display'] = array_merge($extra['commerce_product'][$type]['display'], $display);
  }

  return $extra;
}

/**
 * Implements hook_form_alter()
 *
 * Resolve a problem with undefined commerce_checkout_form on AJAX calls
 * when using page_manager_existing_pages.
 *
 * @See: https://drupal.org/node/1773674
 * @See: https://drupal.org/node/1774770
 * @See: https://drupal.org/node/2134023
 */
function xdruple_commerce_form_alter(&$form, &$form_state, $form_id) {
  if (strpos($form_id, 'commerce_checkout_form') !== false) {
    // Drupal has an automatic dependencies load when a menu item at hook_menu
    // declares an include file where the page callback is located. E.x.
    // $items['checkout/%commerce_order'] = array(
    //  'title' => 'Checkout',
    //  'page callback' => 'commerce_checkout_router',
    //  'page arguments' => array(1),
    //  'access arguments' => array('access checkout'),
    //  'type' => MENU_CALLBACK,
    //  'file' => 'includes/commerce_checkout.pages.inc',
    // );
    // The FAPI store the path of the of an include in the cached $form_state
    // form to satisfy the dependency when for an element in a viewed page
    // has an AJAX behavior so when an AJAX call is received the function
    // form_get_cache look into $form_state['build_info']['files'] and do a
    // include of that specified file. Unfortunately at doing menu_alter of this
    // menu item:
    // $items['checkout/%commerce_order/%commerce_checkout_page']['file'] = $task['file'];
    // The FAPI will include only the file referenced in the menu array and the
    // AJAX call will be broken. We resolve this altering the form to explicit
    // attach the commerce_checkout.pages.inc into the build_info files.

    $form_state['build_info']['files']['commerce_checkout'] = array(
      'module' => 'commerce_checkout',
      'name' => 'includes/commerce_checkout.pages',
      'type' => 'inc',
    );
  }

  // Modify the user registration form to work with xTuple.
  if ($form_id === 'user_register_form' || $form_id === 'user_profile_form') {
    $wrapper_id = 'xd_contact_association_wrapper';
    $form['xd_contact_association']['#wrapper_id'] = $wrapper_id;
    $form['xd_contact_association']['#prefix'] = '<div id="' . $wrapper_id . '">';
    $form['xd_contact_association']['#suffix'] = '</div>';

    $form['create_xtuple_user_association'] = array(
      '#type' => 'checkbox',
      '#title' => 'Create xTuple User Association',
      '#description' => 'Check this box to create an xTuple Contact Association for this user. If this is not checked, this user will not be able to place orders.',
      '#default_value' => TRUE,
      '#required' => FALSE,
      '#weight' => 6,
      '#ajax' => array(
        'callback' => 'xdruple_commerce_user_association_callback',
        'wrapper' => $wrapper_id,
      ),
      '#limit_validation_errors' => array(),
    );

    if (!user_access('administer users')) {
      $form['create_xtuple_user_association']['#type'] = 'hidden';
      $form['create_xtuple_user_association']['#attributes']['disabled'] = TRUE;
      $form['create_xtuple_user_association']['#default_value'] = TRUE;
    }

    if (isset($form['xd_contact_association'][LANGUAGE_NONE]['form']['erp_xdrupleusercontactcontact'][LANGUAGE_NONE]['form']['primaryEmail'])) {
      $contact_form = &$form['xd_contact_association'][LANGUAGE_NONE]['form']['erp_xdrupleusercontactcontact'][LANGUAGE_NONE]['form'];
      $addr_form = &$contact_form['erp_xdruplecommercecontactaddress'][LANGUAGE_NONE]['form'];

      if (!user_access('administer users')) {
        // Hide the IEF entity_id select list field on the Contact.
        $contact_form['entity_id']['#type'] = 'hidden';
        $contact_form['entity_id']['#attributes']['disabled'] = TRUE;

        // Hide the IEF entity_id select list field on the Address.
        $addr_form['entity_id']['#type'] = 'hidden';
        $addr_form['entity_id']['#attributes']['disabled'] = TRUE;
      }

      // Make the Contact's first and last name required.
      $contact_form['firstName']['#required'] = true;
      $contact_form['lastName']['#required'] = true;

      // We want our validate function to be first so it adds the user's email to the contact before IEF does it's thing.
      array_unshift($contact_form['#element_validate'], 'xdruple_commerce_user_reg_form_validate');

      // Hide the primaryEmail field since we get this from the Drupal User's mail field.
      $contact_form['primaryEmail']['#type'] = 'hidden';
      $contact_form['primaryEmail']['#attributes']['disabled'] = TRUE;
    }
  }

  // Wrap any 'access checkout' items in 'access xtuple checkout' so we can
  // dynamically grant it.
  // @See: commerce_checkout_form_alter()
  if (strpos($form_id, 'views_form_commerce_cart_form_') === 0 ||
      strpos($form_id, 'views_form_ft_commerce_cart_form_') === 0) {

    // Only add the Checkout button if the cart form View shows line items.
    $view = reset($form_state['build_info']['args']);

    if (!empty($view->result)) {
      $form['actions']['checkout']['#access'] = xdruple_access(
        'views_form_commerce_cart_form',
        'view',
        'access checkout'
      );
    }
  }
}

/**
 * Validation function to modify the user reg form submit and copy the Drupal
 * user's email/username to xTuple contact's email field which is hidden from
 * the user.
 */
function xdruple_commerce_user_reg_form_validate(&$element_form, &$form_state, $complete_form) {
  // Figure out if create_xtuple_user_association flag is set.
  $create_association = false;
  if (isset($form_state['values']['create_xtuple_user_association'])) {
    $create_association = $form_state['values']['create_xtuple_user_association'];
  }

  if (isset($complete_form['xd_contact_association'][LANGUAGE_NONE]['form']['erp_xdrupleusercontactcontact'][LANGUAGE_NONE]['form'])) {
    // Clear out the 'xd_contact_association' part of the form so it's not used.
    if (empty($create_association)) {
      $contact_form = &$complete_form['xd_contact_association'][LANGUAGE_NONE]['form']['erp_xdrupleusercontactcontact'][LANGUAGE_NONE]['form'];
      $addr_form = &$contact_form['erp_xdruplecommercecontactaddress'][LANGUAGE_NONE]['form'];

      // Make the Contact's first and last name not required because we're removed it from the form.
      $contact_form['firstName']['#required'] = false;
      $contact_form['lastName']['#required'] = false;

      // Make the Address fields not required because we're removed it from the form.
      // Recurse through all children.
      foreach (element_children($addr_form) as $key) {
        if (isset($addr_form[$key]) && $addr_form[$key]) {
          $addr_form[$key]['#required'] = false;
        }
      }

      if ($form_state['triggering_element']['#type'] === 'submit') {
        unset($form_state['complete form']['xd_contact_association']);
        unset($form_state['input']['xd_contact_association']);
        unset($form_state['values']['xd_contact_association']);
      }
    }
  }

  // If this is create customer, check the email agianst customer names.
  if (isset($element_form['#id']) && $element_form['#id'] === 'edit-xd-contact-association-und-form-create-new-customer') {
    if (!empty($create_association)) {
      // On main form submit.
      if ($form_state['triggering_element']['#type'] === 'submit') {
        $create_customer_parents = $element_form['#parents'];
        $create_customer = drupal_array_get_nested_value($form_state['values'], $create_customer_parents);

        if (isset($complete_form['xd_contact_association'][LANGUAGE_NONE]['form']['#entity'])) {
          $association_entity = $complete_form['xd_contact_association'][LANGUAGE_NONE]['form']['#entity'];
        } else {
          $association_entity = null;
        }

        if (!empty($create_customer) && isset($association_entity->is_new) &&
          $association_entity->is_new) {

          // If this is a new create customer that wasn't checked before on a new entity.
          $check_existing_customer = true;
        } elseif (!empty($create_customer) &&
          isset($association_entity->originalEntity['create_new_customer']) &&
          $create_customer != $association_entity->originalEntity['create_new_customer']) {

          // If this is an old entity and it wasn't checked before.
          $check_existing_customer = true;
        } else {
          $check_existing_customer = false;
        }

        if ($check_existing_customer) {
          // Search xTuple for existing customer with email as their name.
          $conditions = array(
            'query' => array(
              'number' => array(
                'EQUALS' => strtoupper($form_state['values']['mail']),
              ),
            ),
          );
          $existing_customers = entity_load('xtuple_xdruplecommercecustomer', FALSE, $conditions);

          if (count($existing_customers) > 0) {
            // Set form error.
            $message = 'The Email address: %email is already in use. Cannot create a Customer with this email address. Please use a different Email address, !login_url or !reset_url.';
            $message = t($message, array(
                '%email' => $form_state['values']['mail'],
                '!login_url' => l(t('Log In'), "user"),
                '!reset_url' => l(t('Request a new password'), "user/password"),
              )
            );
            form_set_error('mail', $message);
          }
        }
      }
    }
  }

  if (isset($element_form['#id']) && $element_form['#id'] === 'edit-xd-contact-association-und-form-xdruple-site') {
    if (!empty($create_association)) {
      $site_parents = $element_form['#parents'];

      // Set the site to the default before we save.
      drupal_array_set_nested_value($form_state['values'], $site_parents, 'b2c');
    }
  }

  if (isset($element_form['#entity_type'], $element_form['#parents']) && $element_form['#entity_type'] = 'xtuple_xdruplecommercecontact') {
    if (!empty($create_association) && isset($form_state['values']['mail'])) {
      $cntct_email_parents = $element_form['#parents'];
      $cntct_email_parents[] = 'primaryEmail';

      $email_set = drupal_array_get_nested_value($form_state['values'], $cntct_email_parents);

      // On main form submit.
      if ($form_state['triggering_element']['#type'] === 'submit') {
        // When this is a new contact, not "Use existing Contact".
        if (isset($element_form['#entity']->is_new) && $element_form['#entity']->is_new) {
          // Check the Drupal email address against contacts.
          $conditions = array(
            'query' => array(
              'primaryEmail' => array(
                'EQUALS' => $form_state['values']['mail'],
              ),
            ),
          );
          $existing_contacts = entity_load('xtuple_xdruplecommercecontact', FALSE, $conditions);

          if (count($existing_contacts) > 0) {
            // Set form error.
            $message = 'The Email address: %email is already in use. Please use a different Email address, !login_url or !reset_url.';
            $message = t($message, array(
                '%email' => $form_state['values']['mail'],
                '!login_url' => l(t('Log In'), "user"),
                '!reset_url' => l(t('Request a new password'), "user/password"),
              )
            );
            form_set_error('mail', $message);
          }
        }
      }

      // Only set the email if this contact doesn't have one.
      if (empty($email_set)) {
        // Set the contact's primaryEmail to the Drupal user's email/username before we save.
        drupal_array_set_nested_value($form_state['values'], $cntct_email_parents, $form_state['values']['mail']);
      }

      // Unset the IEF entity so it gets reprocessed if there's a validation error.
      $form_state['inline_entity_form'][$element_form['#ief_id']]['entities'] = array();
    }
  }
}

/**
 * Implements hook_theme().
 */
function xdruple_commerce_theme() {
  return array(
    'xdruple_commerce_sub_title' => array(
      'variables' => array('subTitle' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'template' => 'xdruple-commerce-sub-title',
    ),
    'xdruple_commerce_product_weight' => array(
      'variables' => array('productWeight' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'template' => 'xdruple-commerce-product-weight',
    ),
    'xdruple_commerce_package_weight' => array(
      'variables' => array('packageWeight' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'template' => 'xdruple-commerce-package-weight',
    ),
    'xdruple_commerce_class_code' => array(
      'variables' => array('classCode' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'template' => 'xdruple-commerce-class-code',
    ),
    'xdruple_commerce_product_category' => array(
      'variables' => array('productCategory' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'template' => 'xdruple-commerce-product-category',
    ),
    'xdruple_commerce_inventory_unit' => array(
      'variables' => array('inventoryUnit' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'template' => 'xdruple-commerce-inventory-unit',
    ),
    'xdruple_commerce_price_unit' => array(
      'variables' => array('priceUnit' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'template' => 'xdruple-commerce-price-unit',
    ),
    'xdruple_commerce_uom_ratio' => array(
      'variables' => array('uomRatio' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'template' => 'xdruple-commerce-uom-ratio',
    ),
    'xdruple_commerce_weight_unit' => array(
      'variables' => array('weightUnit' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'template' => 'xdruple-commerce-weight-unit',
    ),
    'xdruple_commerce_notes' => array(
      'variables' => array('notes' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'template' => 'xdruple-commerce-notes',
    ),
    'xdruple_commerce_ex_descrip' => array(
      'variables' => array('extDescrip' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'template' => 'xdruple-commerce-ext-descrip',
    ),
    'xdruple_commerce_cart_dropdown' => array(
      'variables' => array(
        'link' => NULL,
        'title' => NULL,
        'count' => NULL,
        'amount' => NULL,
      ),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'file' => 'theme.inc',
      'template' => 'xdruple-commerce-cart-dropdown',
    ),
  );
}

/**
 * Implements hook_email_registration_name().
 */
// function xdruple_commerce_email_registration_name($edit, $account) {
//   $name = $account->mail;

//   return email_registration_cleanup_username($name);
// }

/**
 * Implements hook_user_insert().
 */
function xdruple_commerce_user_insert(&$edit, $account, $category) {
  $field_name = 'xd_contact_association';

  // Get the XdrupleUserContact uuid from this user's Entity Reference and load that entity.
  if (isset($edit[$field_name][LANGUAGE_NONE][0]['target_id'])) {
    $field = field_info_field($field_name);
    $entity_type = $field['settings']['target_type'];

    $user_contact_key = $edit['xd_contact_association'][LANGUAGE_NONE][0]['target_id'];

    // Update the uid now that one exists.
    $user_contact = entity_load_single($entity_type, $user_contact_key);
    $user_contact->drupalUserUuid = $account->uuid;

    // Save it back to xTuple.
    entity_save($entity_type, $user_contact);
  }
}

/**
 * Implements hook_user_update().
 */
function xdruple_commerce_user_update(&$edit, $account, $category) {
  $field_name = 'xd_contact_association';

  // Get the XdrupleUserContact uuid from this user's Entity Reference and load that entity.
  if (isset($edit[$field_name][LANGUAGE_NONE][0]['target_id'])) {
    $field = field_info_field($field_name);
    $entity_type = $field['settings']['target_type'];

    $user_contact_key = $edit['xd_contact_association'][LANGUAGE_NONE][0]['target_id'];

    // Update the uid now that one exists.
    $user_contact = entity_load_single($entity_type, $user_contact_key);
    $user_contact->drupalUserUuid = $account->uuid;

    // Save it back to xTuple.
    entity_save($entity_type, $user_contact);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * The Product UI module instantiates the Product add/edit form alter the
 * form here to xTuple properties as fields.
 *
 * @see commerce_product_ui_product_form()
 */
function xdruple_commerce_form_commerce_product_ui_product_form_alter(&$form, &$form_state) {
  $product = $form_state['commerce_product'];
  $op = 'edit';
  $entityType = 'commerce_product';
  $entityInfo = entity_get_info($entityType);
  $handler_class = $entityInfo['operations ui']['operations'][$op]['handler'];

  // Break the reference to $form_state.
  $foo_state = (array) clone ((object) $form_state);

  $excluded_fields = array(
    'product_id',
    'revision_id',
    'sku',
    'title',
    'type',
    'language',
    'uid',
    'status',
    'created',
    'changed',
    'data',
    'commerce_price',
    'urls', // URLs are loaded through the 'erp_xdruplecommerceproducturls' field.
  );

  // Get the xtuple form version from our controler and loop over our fields in that
  // form and add to the commerce_product from.
  $xdruple_form = entity_operations_operation_form(array(), $foo_state, 'XdrupleCommerceProduct', $handler_class, $op, $product);
  foreach ($entityInfo['json-schema']['XdrupleCommerceProduct']['properties'] as $prop_name => $prop_value) {
    // Skip the fields that are already handled or should not be shown.
    if (!in_array($prop_name, $excluded_fields)) {
      $form[$prop_name] = $xdruple_form[$prop_name];
      if (in_array($prop_name, array('notes', 'extDescrip'))) {
        $form[$prop_name]['#type'] = 'textarea';
        $form[$prop_name]['#rows'] = 4;
      }
      $form[$prop_name]['#weight'] = -3;
    }
  }
}

/**
 * Implements hook_field_attach_submit.
 */
function xdruple_commerce_field_attach_submit($entity_type, $entity, $form, $form_state) {
  if ($entity_type === 'commerce_product') {
    // Save xTuple parameters back into the product entity object.
    $entity->subTitle = $form_state['values']['subTitle'];
    $entity->notes = $form_state['values']['notes'];
    $entity->extDescrip = $form_state['values']['extDescrip'];
    $entity->productWeight = $form_state['values']['productWeight'];
    $entity->packageWeight = $form_state['values']['packageWeight'];
    $entity->classCode = $form_state['values']['classCode'];
    $entity->productCategory = $form_state['values']['productCategory'];
    $entity->priceUnit = $form_state['values']['priceUnit'];
    $entity->uomRatio = $form_state['values']['uomRatio'];
    $entity->inventoryUnit = $form_state['values']['inventoryUnit'];
    $entity->weightUnit = $form_state['values']['weightUnit'];
  }
}

/**
 * Implements hook_entity_query_alter.
 *
 * EntityFieldQuery used in _commerce_product_match_products_standard() does not
 * allow OR clauses. Alter the query to string match on sku OR title.
 *
 * @param $query
 */
function xdruple_commerce_entity_query_alter(&$query) {
  if (isset($query->tags['commerce_sku_or_title_match'])) {
    $string = $query->metaData['commerce_sku_or_title_match']->string;
    $match = $query->metaData['commerce_sku_or_title_match']->match;

    if (isset($string, $match)) {
      // Build a where clause matching on either the SKU or title.

      // TODO: xTuple doesn't currently support an operator.
      switch ($match) {
        case 'contains':
          $query->propertyCondition('q', $string, 'CONTAINS');
          break;

        case 'starts_with':
          $query->propertyCondition('q', $string, 'CONTAINS');
          break;

        case 'equals':
        default:
          $query->propertyCondition('q', $string, '=');
          break;
      }
    }
  }
}

function xdruple_commerce_api_customer_item_price($discovery_client = 'xtuple', $resource = 'Customer', $postBody, $optParams = array()) {
  $service = wsclient_service_load($discovery_client);
  $endpoint = $service->endpoint();
  $client = $endpoint->client();

  $params = array('postBody' => $postBody);
  $params = array_merge($params, $optParams);

  // POST the service request.
  $result = $client->$resource->itemPrice($params);

  return $result['price'];
}

function xdruple_commerce_get_customer_line_item_price($line_item) {
  if (!isset($_SESSION['rescued']['customer'], $_SESSION['rescued']['ship_to'], $_SESSION['rescued']['site'])) {
    // We cannot get a price quote without all of these set.
    return;
  }

  $customer = $_SESSION['rescued']['customer'];
  $date = xdruple_rescued_scheduled_date('tomorrow');
  $shipto = $_SESSION['rescued']['ship_to'];
  $site = $_SESSION['rescued']['site'];

  $cid = 'xdruple_commerce_customer_line_item_price-' .
         $customer . '-' .
         $line_item->line_item_label . '-' .
         strval($line_item->quantity) . '-' .
         strval($date) . '-' .
         $shipto . '-' .
         $site;
  $cache = cache_get($cid, 'cache');

  if (empty($cache)) {
    $postBody = array(
      'attributes' => array(
        $customer,
        $line_item->line_item_label,
        $line_item->quantity,
        array(
          'asOf' => $date, // The scheduled date for the order.
          'shiptoId' => $shipto,
          'siteId' => $site,
          'effective' => format_date(REQUEST_TIME, 'custom', 'Y-m-d'), // Always today.
        ),
      ),
    );

    // Make the itemPrice service request.
    $price = xdruple_commerce_api_customer_item_price('xtuple', 'Customer', $postBody);

    cache_set($cid, $price, 'cache', CACHE_TEMPORARY);
  } else {
    $price = $cache->data;
  }

  if (isset($price) && $price >= 0) {
    $price = round($price * 100); // Drupal Commerce doesn't use decimals for prices.
    $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['amount'] = $price;
    $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['data']['components']['0']['price']['amount'] = $price;
  }
}

/**
 * Implements hook_commerce_product_calculate_sell_price_line_item_alter().
 *
 * @param $line_item
 *   The product line item used for sell price calculation.
 */
function xdruple_commerce_commerce_product_calculate_sell_price_line_item_alter($line_item) {
  // Alter the list price.
  if ($line_item->type === 'product') {
    xdruple_commerce_get_customer_line_item_price($line_item);
  }
}


/**
 * Implements hook_commerce_cart_line_item_refresh().
 *
 * @param $line_item
 *   The product line item used for sell price calculation.
 *
 * @param $order_wrapper
 *   The order.
 */
function xdruple_commerce_commerce_cart_line_item_refresh($line_item, $order_wrapper){
  // Alter the list price.
  if ($line_item->type === 'product') {
    xdruple_commerce_get_customer_line_item_price($line_item);
  }
}

/**
 * Implements hook_commerce_checkout_complete().
 */
function xdruple_commerce_commerce_checkout_complete($order) {
  global $user;

  // TODO: If this user is not yet a customer, we'll need to insert one.

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  $cust_key = $order_wrapper->commerce_customer_billing->xd_customer->number->value();
  // Load the full customer so we get Terms, Tax, etc. we normally do not expose.
  // TODO: Assuming 'xtuple' here. Get setting.
  $cust_entityType = 'xtuple_xdruplecustomer';
  $customer = entity_load($cust_entityType, array($cust_key));
  $customer = $customer[$cust_key];

  // Get the Bill To Contact details from checkout.
  // TODO: Assuming 'xtuple' here. Get setting.
  $bill_to_contact = $order_wrapper->commerce_customer_billing->xd_bill_to_contact->value();

  // Get the Bill To Address details from checkout.
  $bill_to_address = $order_wrapper->commerce_customer_billing->xd_bill_to_address->value();

  // Get the Ship To from checkout.
  $ship_to = $order_wrapper->commerce_customer_shipping->xd_ship_to->value();
  $full_ship_to = false;

  if (isset($ship_to)) {
    $ship_to_contact = json_decode(json_encode($ship_to->contact), FALSE);
    $ship_to_address = json_decode(json_encode($ship_to->address), FALSE);

    // Load the full customer ship to so we get ShipCharge, shipZone, etc. we normally do not expose.
    foreach ($customer->shiptos as $cust_shipto) {
      if ($cust_shipto['number'] === $ship_to->number) {
        // Get the Ship To Contact details from customer default.
        $full_ship_to = json_decode(json_encode($cust_shipto), FALSE);
        $ship_to = $cust_shipto;

        break;
      }
    }
  } else {
    // Get the Ship To Contact details from checkout.
    $ship_to_contact = $order_wrapper->commerce_customer_shipping->xd_ship_to_contact->value();

    // Get the Ship To Address details from checkout.
    $ship_to_address = $order_wrapper->commerce_customer_shipping->xd_ship_to_address->value();
  }

  if (!$ship_to_contact) {
    foreach ($customer->shiptos as $cust_shipto) {
      if ($cust_shipto['isDefault']) {
        // Get the Ship To Contact details from customer default.
        $ship_to_contact = json_decode(json_encode($cust_shipto['contact']), FALSE);

        // Get the Ship To Address details from customer default.
        if (!$ship_to_address) {
          $ship_to_address = json_decode(json_encode($cust_shipto['address']), FALSE);
        }

        // Load the full customer ship to so we get ShipCharge, shipZone, etc. we normally do not expose.
        if (!$ship_to) {
          $full_ship_to = json_decode(json_encode($cust_shipto), FALSE);
          $ship_to = $cust_shipto;
        }

        break;
      }
    }
  }

  // Get the Ship To Address details from customer default.
  // TODO: Business logic question... Do we assume the default ship to
  // address here if the above logic didn't set it?
  if (!$ship_to_address) {
    foreach ($customer->shiptos as $cust_shipto) {
      if ($cust_shipto['isDefault']) {
        $ship_to_address = json_decode(json_encode($cust_shipto['address']), FALSE);

        // Load the full customer ship to so we get ShipCharge, shipZone, etc. we normally do not expose.
        if (!$ship_to && !$full_ship_to) {
          $full_ship_to = json_decode(json_encode($cust_shipto), FALSE);
          $ship_to = $cust_shipto;
        }

        break;
      }
    }
  }

  $po_number = property_exists($order, 'xd_order_po_number') ? $order_wrapper->xd_order_po_number->value() : '';
  $order_notes = property_exists($order, 'xd_order_notes') ? $order_wrapper->xd_order_notes->value() : '';

  // Create a new Sales Order entity.
  // TODO: Assuming 'xtuple' here. Get setting.
  $so_entityType = 'xtuple_salesorder';
  $so_entityInfo = entity_get_info($so_entityType);
  $so_class = $so_entityInfo['entity class'];
  $sales_order = new $so_class(array(), $so_entityType);

  // Set all the defaults on the Sales Order.
  $sales_order->is_new = true;
  $sales_order->status = 'O';
  $sales_order->saleType = 'INT';
  $sales_order->calculateFreight = true;
  $sales_order->freight = 0;
  $sales_order->orderDate = date("Y-m-d");
  $sales_order->wasQuote = false;
  //$sales_order->number = $order->order_number;
  $sales_order->orderNotes = $order_notes;
  $sales_order->customerPurchaseOrderNumber = $po_number;

  // Set the Customer details on the Sales Order.
  $sales_order->site = $customer->preferredSite;
  $sales_order->customer = $customer->number;
  $sales_order->terms = $customer->terms;
  $sales_order->salesRep = $full_ship_to ? $full_ship_to->salesRep : $customer->salesRep;
  $sales_order->taxZone = $full_ship_to ? $full_ship_to->taxZone : $customer->taxZone;
  $sales_order->billtoContact = $bill_to_contact->number;
  $sales_order->shipto = $ship_to['uuid'] ? $ship_to['uuid'] : null;
  $sales_order->shiptoContact = $ship_to_contact->number;
  $sales_order->currency = $customer->currency;
  $sales_order->shipZone = $full_ship_to ? $full_ship_to->shipZone : null;
  $sales_order->shipCharge = $full_ship_to ? $full_ship_to->shipCharge : $customer->shipCharge;
  $sales_order->commission = $full_ship_to ? $full_ship_to->commission : $customer->commission;
  $sales_order->shipVia = $full_ship_to ? $full_ship_to->shipVia : $customer->shipVia;
  $sales_order->billtoName = $bill_to_contact->firstName . ' ' . $bill_to_contact->lastName;
  $sales_order->billtoContactFirstName = $bill_to_contact->firstName;
  $sales_order->billtoContactLastName = $bill_to_contact->lastName;
  $sales_order->billtoContactPhone = $bill_to_contact->phone;
  $sales_order->billtoContactFax = $bill_to_contact->fax;
  $sales_order->billtoAddress1 = $bill_to_address->line1;
  $sales_order->billtoAddress2 = $bill_to_address->line2;
  $sales_order->billtoAddress3 = $bill_to_address->line3;
  $sales_order->billtoCity = $bill_to_address->city;
  $sales_order->billtoState = $bill_to_address->state;
  $sales_order->billtoPostalCode = $bill_to_address->postalCode;
  $sales_order->billtoCountry = $bill_to_address->country;
  $sales_order->shiptoName = $full_ship_to ? $full_ship_to->name : null;
  $sales_order->shipNotes = $full_ship_to ? $full_ship_to->notes : null;
  $sales_order->shiptoContactFirstName = $ship_to_contact->firstName;
  $sales_order->shiptoContactLastName = $ship_to_contact->lastName;
  $sales_order->shiptoContactPhone = $ship_to_contact->phone;
  $sales_order->shiptoContactFax = $ship_to_contact->fax;
  $sales_order->shiptoAddress1 = $ship_to_address->line1;
  $sales_order->shiptoAddress2 = $ship_to_address->line2;
  $sales_order->shiptoAddress3 = $ship_to_address->line3;
  $sales_order->shiptoCity = $ship_to_address->city;
  $sales_order->shiptoState = $ship_to_address->state;
  $sales_order->shiptoPostalCode = $ship_to_address->postalCode;
  $sales_order->shiptoCountry = $ship_to_address->country;

  // Loop over the lines and add new lines.
  foreach ($order_wrapper->commerce_line_items->getIterator() as $delta => $line) {
    // Handle normal "product" lines.
    if (array_key_exists('commerce_product', $line->getPropertyInfo())) {
      // Set the line defaults.
      $sales_order->lineItems[$delta]['scheduleDate'] = xdruple_rescued_scheduled_date('tomorrow');
      $sales_order->lineItems[$delta]['firm'] = false;
      $sales_order->lineItems[$delta]['site'] = isset($_SESSION['rescued']['site']) ? $_SESSION['rescued']['site'] : $customer->preferredSite;
      $sales_order->lineItems[$delta]['taxType'] = 'Taxable';

      // TODO: Get Unit and Ratios from item.
      // Set the line details.
      $sales_order->lineItems[$delta]['quantityUnitRatio'] = 1;
      $sales_order->lineItems[$delta]['item'] = $line->line_item_label->value();
      $sales_order->lineItems[$delta]['lineNumber'] = $delta + 1;
      $sales_order->lineItems[$delta]['subNumber'] = 0;
      $sales_order->lineItems[$delta]['quantityUnit'] = $line->commerce_product->priceUnit->value();
      $sales_order->lineItems[$delta]['priceUnit'] = $line->commerce_product->priceUnit->value();
      $sales_order->lineItems[$delta]['priceUnitRatio'] = 1;
      $sales_order->lineItems[$delta]['quantity'] = $line->quantity->value();
      $sales_order->lineItems[$delta]['customerPrice'] = ($line->commerce_unit_price->amount->value() / 100);
      $sales_order->lineItems[$delta]['price'] = ($line->commerce_unit_price->amount->value() / 100);
    } else {
      // TODO
      // Handle shipping and tax lines.
      $foo = true;
    }
  }

  // Save the Sales Order.
  try {
    // We have to submit the order as the "admin" user because it has "MaintainSalesOrders" privs.
    // TODO: We may want to handle this on the xTuple side so we don't have to switch the active
    // user like this.
    if (!user_access('administer rescued entities', $user)) {
      unset($_SESSION['access_token']);
      unset($_SESSION['oauth_user']);
      $cached_user = $_SESSION['rescued']['user'];
      $_SESSION['rescued']['user'] = 'admin';
      $sales_order->save();

      unset($_SESSION['access_token']);
      unset($_SESSION['oauth_user']);
      $_SESSION['rescued']['user'] = $cached_user;
    } else {
      // For admin users, we can save directly with their OAauth token.
      $sales_order->save();
    }

    // Set the Drupal Commerce order_number to match the auto-number
    // returned from xTuple after saving the order.
    $order_wrapper->order_number->set($sales_order->number);
    $order_wrapper->save();
  } catch (Exception $e) {
    // Use try/catch to make sure and reset the user even if there is an error.
    if (!user_access('administer rescued entities', $user)) {
      unset($_SESSION['access_token']);
      unset($_SESSION['oauth_user']);
      $_SESSION['rescued']['user'] = $cached_user;
    }

    // TODO: Reset the order status?
    // This is a good question for Commerce Guys.
    drupal_set_message(t('Order Submit failed. Message = %message', array('%message' => $e->getMessage())), 'error');
  }
}

/**
 * Implements hook_commerce_checkout_complete().
 */
function xdruple_commerce_commerce_order_update($order) {

}

/**
 * Helper function to format the Currency for this field.
 *
 * @param float $amount
 *   The amount to format.
 * @param object $currency
 *   The Currency object.
 *
 * @return Formatted amount.
 */
function _xdruple_commerce_currency_format($amount, $currency) {
  // Add commas and round to two places.
  $amount = number_format(round($amount, 2), 2);

  $format = $currency->symbol . $amount;

  return $format;
}

/**
 * Helper function to format a tracking number into a link to the tracking site.
 *
 * @param string $tracking
 *
 * @return Formatted link to the tracking site.
 */
function _xdruple_commerce_tracking_format($tracking) {
  // @See: http://gummydev.com/regex/
  $ups_pattern   = '/\b(1Z ?[0-9A-Z]{3} ?[0-9A-Z]{3} ?[0-9A-Z]{2} ?[0-9A-Z]{4} ?[0-9A-Z]{3} ?[0-9A-Z]|[\dT]\d\d\d ?\d\d\d\d ?\d\d\d)\b/';
  $fedex_pattern = '/\b((96\d\d\d\d\d ?\d\d\d\d|96\d\d) ?\d\d\d\d ?d\d\d\d( ?\d\d\d)?)\b/';
  $usps_pattern  = '/\b(91\d\d ?\d\d\d\d ?\d\d\d\d ?\d\d\d\d ?\d\d\d\d ?\d\d|91\d\d ?\d\d\d\d ?\d\d\d\d ?\d\d\d\d ?\d\d\d\d)\b/';

  // Figure out carrier pattern.
  if (preg_match($ups_pattern, $tracking)) {
    // Create link to tracking site.
    $format = 'UPS #: ' . l($tracking, 'http://wwwapps.ups.com/WebTracking/track?track=yes&trackNums=' . $tracking);
  } else if (preg_match($fedex_pattern, $tracking)) {
    // Create link to tracking site.
    $format = 'FedEx #: ' . l($tracking, 'http://www.fedex.com/Tracking?action=track&tracknumbers=' . $tracking);;
  } else if (preg_match($usps_pattern, $tracking)) {
    // Create link to tracking site.
    $format = 'USPS #: ' . l($tracking, 'https://tools.usps.com/go/TrackConfirmAction_input?qtc_tLabels1=' . $tracking);;
  } else {
    if (!empty($tracking)) {
      $format = 'Unknown #: ' . $tracking;
    } else {
      $format = 'No tracking infoformation available';
    }
  }

  return $format;
}

/**
 * Helper function to format a link to the product page.
 *
 * @param string $product
 *
 * @return Formatted link to the product page.
 */
function _xdruple_commerce_product_format($item) {
  $query = new EntityFieldQuery();
  $product = $query->entityCondition('entity_type', 'commerce_product')
                ->propertyCondition('sku', $item['number'], '=')
                ->execute();

  if (count($product['commerce_product']) > 0) {
    $product_id = key($product['commerce_product']);
    // Create link to product page.
    $format = l($product['commerce_product'][$product_id]->sku, 'products/' . $product_id);
  } else {
    $format = $item['number'];
  }

  return $format;
}

function xdruple_commerce_xtuple_xdruplecommerceshipto_view_alter(&$build, $entity_type) {
  $build['#page'] = TRUE;

  if (!empty($build['isDefault']['#access'])) {
    $build['isDefault']['#access'] = FALSE;
  }
  if (!empty($build['number']['#access'])) {
    $build['number']['#access'] = FALSE;
  }
  if (!empty($build['name'][0]['#markup'])) {
    if (!empty($build['customer']['#access'])) {
      $build['customer']['#access'] = FALSE;
    }
    $build['name']['#label_display'] = 'hidden';
  }
  else {
    $build['name']['#access']            = FALSE;
    $build['customer']['#label_display'] = 'hidden';
  }
}

function xdruple_commerce_xtuple_xdruplecommercecustomer_view_alter(&$build, $entity_type) {
  $build['#page'] = TRUE;
  if (empty($build['erp_xdruplecommercecustomerbillingcontact'][0]['#markup'])) {
    $build['erp_xdruplecommercecustomerbillingcontact']['#access'] = FALSE;
  }
  if (empty($build['erp_xdruplecommercecustomershipto'][0]['#markup'])) {
    $build['erp_xdruplecommercecustomershipto']['#access'] = FALSE;
  }
  if (empty($build['erp_xdruplecommercecustomercorrespondencecontact'][0]['#markup'])) {
    $build['erp_xdruplecommercecustomercorrespondencecontact']['#access'] = FALSE;
  }
  if (!empty($build['isActive']['#access'])) {
    $build['isActive']['#access'] = FALSE;
  }
  if (!empty($build['number']['#access'])) {
    $build['number']['#access'] = FALSE;
  }
  if (!empty($build['name'][0]['#markup'])) {
    $build['name']['#label_display'] = 'hidden';
  }
  else {
    $build['name']['#access'] = FALSE;
  }
}

function xdruple_commerce_xtuple_xdruplecommercecontact_view_alter(&$build, $entity_type) {
  $build['#page'] = TRUE;
  $name           = array();
  if (!empty($build['firstName'][0]['#markup'])) {
    $name[] = $build['firstName'][0]['#markup'];
  }
  if (!empty($build['lastName'][0]['#markup'])) {
    $name[] = $build['lastName'][0]['#markup'];
  }
  $build['firstName']['#label_display'] = 'hidden';
  $build['lastName']['#access']         = FALSE;
  $build['firstName'][0]['#markup']     = implode(' ', $name);
  if (empty($build['firstName'][0]['#markup'])) {
    $build['firstName']['#access'] = FALSE;
  }

  $build['phone']['#label_display']        = 'hidden';
  $build['primaryEmail']['#label_display'] = 'hidden';

  $active_menu_item = menu_get_item();
  if ($active_menu_item['path'] == 'checkout/%/%'
    && !empty($active_menu_item['page_arguments'][1]['page_id'])
    && $active_menu_item['page_arguments'][1]['page_id'] == 'review'
  ) {
    $build['erp_xdruplecommercecontactaddress']['#access'] = FALSE;
  }
  else {
    $build['erp_xdruplecommercecontactaddress']['#label_display'] = 'above';
  }
}

function xdruple_commerce_xtuple_xdruplecommerceaddress_view_alter(&$build, $entity_type) {
  $build['#page'] = TRUE;
  if (!empty($build['line1'][0]['#markup'])) {
    $build['line1']['#label_display'] = 'hidden';
  }
  else {
    $build['line1']['#access'] = FALSE;
  }
  if (!empty($build['line2'][0]['#markup'])) {
    $build['line2']['#label_display'] = 'hidden';
  }
  else {
    $build['line2']['#access'] = FALSE;
  }
  if (!empty($build['line3'][0]['#markup'])) {
    $build['line3']['#label_display'] = 'hidden';
  }
  else {
    $build['line3']['#access'] = FALSE;
  }

  $city_state_zip = array();
  if (!empty($build['city'][0]['#markup'])) {
    $city_state_zip[] = $build['city'][0]['#markup'];
  }
  if (!empty($build['state'][0]['#markup'])) {
    $city_state_zip[] = $build['state'][0]['#markup'];
  }
  if (!empty($build['postalCode'][0]['#markup'])) {
    $city_state_zip[] = $build['postalCode'][0]['#markup'];
  }
  $build['city'][0]['#markup']     = implode(', ', $city_state_zip);
  $build['city']['#label_display'] = 'hidden';
  $build['state']['#access']       = FALSE;
  $build['postalCode']['#access']  = FALSE;

  $build['country']['#label_display'] = 'hidden';
  if (empty($build['country'][0]['#markup'])) {
    $build['country']['#access'] = FALSE;
  }

  if (!empty($build['number'])) {
    $build['number']['#access'] = FALSE;
  }
}

function xdruple_commerce_xtuple_xdrupleusercontact_view_alter(&$build, $entity_type) {
  $build['#page'] = TRUE;

  $build['uuid']['#access'] = FALSE;
  $build['xdruple_site']['#access'] = FALSE;
  $build['drupalUserUuid']['#access'] = FALSE;
  $build['create_new_customer']['#access'] = FALSE;
  $build['contact']['#access'] = FALSE;
}

/**
 * Implements hook_theme_registry_alter()
 */
function xdruple_commerce_theme_registry_alter(&$theme_registry) {
  $module = drupal_get_path('module', 'xdruple_commerce');
  $theme_registry['commerce_checkout_review']['file'] = 'xdruple_commerce.module';
  $theme_registry['commerce_checkout_review']['theme path'] = $module;
  $theme_registry['commerce_checkout_review']['includes'][0] = "$module/xdruple_commerce.module";
  $theme_registry['commerce_checkout_review']['function'] = 'xdruple_commerce_checkout_review';
}

/**
 * Implements hook_user_view_alter()
 */
function xdruple_commerce_user_view_alter(&$build) {
  $build['summary']['#access'] = FALSE;
}

function xdruple_commerce_checkout_review($variables) {
  $rows = array();

  foreach ($variables['form']['#data'] as $pane_id => $pane) {
    $fieldset = theme('fieldset', array(
      'element' => array(
        '#title' => $pane['title'],
        '#value' => $pane['data'],
        '#children' => '',
        '#attributes' => array(
          'class' => array(
            'checkout-review-fieldset',
            'checkout-review-fieldset--' . drupal_clean_css_identifier($pane_id)
          ),
        ),
      ),
    ));

    $rows[] = theme('html_tag', array(
      'element' => array(
        '#tag' => 'div',
        '#value' => $fieldset,
        '#attributes' => array(
          'class' => array(
            'checkout-review-pane',
            'checkout-review-pane--' . drupal_clean_css_identifier($pane_id),
          ),
        ),
      )
    ));
  }

  return implode('', $rows);
}

function xdruple_commerce_field_display_alter(&$display, $context) {
  if ($context['entity_type'] == 'xtuple_xdruplecommerceshipto') {
    if ($context['field']['field_name'] == 'xd_ship_to') {
      $display['label'] = 'hidden';
    }
    if ($display['module'] == 'entityreference') {
      $display['type'] = 'entityreference_entity_view';
      $display['settings']['view_mode'] = 'default';
      $display['settings']['links'] = TRUE;
    }
    if ($context['field']['field_name'] == 'erp_xdruplecommerceshiptocontact') {
      $display['weight'] = 19;
    }
  }
}

function xdruple_commerce_entity_view_alter(&$build, $type) {
  if ($type == 'commerce_customer_profile') {
    if ($build['#bundle'] == 'shipping') {
      if (!empty($build['xd_ship_to']['#items'][0]['target_id'])) {
        $target_id = $build['xd_ship_to']['#items'][0]['target_id'];
        $ship_to = &$build['xd_ship_to'][0]['xtuple_xdruplecommerceshipto'][$target_id];
        if (!empty($ship_to['erp_xdruplecommerceshiptoaddress'])) {
          $field = $ship_to['erp_xdruplecommerceshiptoaddress'];
          $field['#field_name'] = 'xd_ship_to_address';
          $field['#field_type'] = 'entityreference';
          $field['#title'] = t('Ship To Address');
          $build['xd_ship_to_address'] = $field;
          $ship_to['erp_xdruplecommerceshiptoaddress']['#access'] = FALSE;
        }
        if (!empty($ship_to['erp_xdruplecommerceshiptocontact'])) {
          $field = $ship_to['erp_xdruplecommerceshiptocontact'];
          $field['#field_name'] = 'xd_ship_to_contact';
          $field['#field_type'] = 'entityreference';
          $field['#title'] = t('Ship To Contact');
          $build['xd_ship_to_contact'] = $field;
          $ship_to['erp_xdruplecommerceshiptocontact']['#access'] = FALSE;
        }
      }
      else {
        $name = '';
        if (!empty($build['xd_ship_to_contact']['#items'][0]['target_id'])) {
          $tid = $build['xd_ship_to_contact']['#items'][0]['target_id'];
          $name = $build['xd_ship_to_contact'][0]['xtuple_xdruplecommercecontact'][$tid]['firstName'][0]['#markup'];
        }

        $markup = '';
        $markup .= '<div class="field field-name-xd-ship-to field-type-entityreference field-label-above">';
        if ($name) {
          $markup .= '<div class="field-label">'. t('Ship to') .':&nbsp;</div>';
          $markup .= '<div class="field-items"><div class="field-item even">'. $name . '</div></div>';
        }
        $markup .= '</div>';
        $build['xd_ship_to'] = array(
          '#markup' => $markup,
          '#weight' => -30,
        );
      }
    }
  }
}

/**
 * Implements hook_commerce_checkout_pane_info()
 */
function xdruple_commerce_commerce_checkout_pane_info() {
  $checkout_panes = array();

  $checkout_panes['purchased_items'] = array(
    'title' => t('Purchased items'),
    'base' => 'xdruple_commerce_checkout_purchased_items_pane',
    'page' => 'complete',
    'fieldset' => TRUE,
    'locked' => FALSE,
    'weight' => 1,
  );

  return $checkout_panes;
}

/**
 * Implements hook_commerce_checkout_pane_info_alter()
 */
function xdruple_commerce_commerce_checkout_pane_info_alter(&$checkout_panes) {
  $checkout_panes['checkout_completion_message']['base'] = 'xdruple_commerce_checkout_completion_message_pane';
}

/**
 * Callback for checkout_completion_message pane settings form
 *
 * /admin/commerce/config/checkout/form/pane/checkout_completion_message
 */
function xdruple_commerce_checkout_completion_message_pane_settings_form($checkout_pane) {
  $form = array();

  $message = variable_get('commerce_checkout_completion_message', xdruple_commerce_checkout_completion_message_default());

  $form['container'] = array(
    '#type'   => 'container',
    '#access' => filter_access(filter_format_load($message['format'])),
  );

  $form['container']['commerce_checkout_completion_message'] = array(
    '#type'          => 'text_format',
    '#title'         => t('Checkout completion message'),
    '#default_value' => $message['value'],
    '#format'        => $message['format'],
  );

  $var_info = array(
    'site'           => array(
      'type'        => 'site',
      'label'       => t('Site information'),
      'description' => t('Site-wide settings and other global information.'),
    ),
    'commerce_order' => array(
      'label' => t('Order'),
      'type'  => 'commerce_order',
    ),
    'user'           => array(
      'label' => t('User'),
      'type'  => 'user',
    ),
  );

  $form['container']['commerce_checkout_completion_message_help'] = RulesTokenEvaluator::help($var_info);

  return $form;
}

/**
 * Callback for checkout_completion_message pane (checkout/%/complete page)
 */
function xdruple_commerce_checkout_completion_message_pane_checkout_form($form, &$form_state, $checkout_pane, $order) {
  $pane_form = array();
  global $user;

  $message = variable_get('commerce_checkout_completion_message', xdruple_commerce_checkout_completion_message_default());

  $message['value'] = commerce_i18n_string('commerce:checkout:complete:message', $message['value'], array(
    'sanitize' => FALSE,
  ));

  $message['value'] = token_replace($message['value'], array(
    'commerce-order' => $order,
    'user'           => $user,
  ), array(
    'clear' => TRUE,
  ));

  $message['value'] = check_markup($message['value'], $message['format']);

  $pane_form['message'] = array(
    '#markup' => '<div class="checkout-completion-message">' . $message['value'] . '</div>',
  );

  return $pane_form;
}

/**
 * Helper function, returns default checkout completion message
 */
function xdruple_commerce_checkout_completion_message_default() {
  $value  = '';
  $format = 'htmlpurifier_basic';
  if (filter_format_load($format)) {
    $value .= '<p>Your order number is <a href="[commerce-order:view-url]">[commerce-order:order-number]</a>.</p>';
    $value .= '<p>You can <a href="[commerce-order:url]">view your order</a> on your <a href="user/[user:uid]/pending-orders">pending orders page</a> when logged in.</p>';
    $value .= '<p>We sent confirmation e-mail to you on <strong>[user:mail]</strong>.</p>';
    $value .= '<p><a href="[site:url]">Return to the front page.</a></p>';
  }
  else {
    $value .= 'Your order number is [commerce-order:order-number]. You can view your order on your account page when logged in.';
    $format = filter_fallback_format();
  }

  return array(
    'value'  => $value,
    'format' => $format,
  );
}

/**
 * Callback for purchased_items pane (checkout/%/complete page)
 */
function xdruple_commerce_checkout_purchased_items_pane_checkout_form($form, &$form_state, $checkout_pane, $order) {
  $pane_form = array();

  module_load_include('inc', 'commerce_cart', 'includes/commerce_cart.checkout_pane');
  $pane_form['cart_contents'] = array(
    '#markup' => commerce_cart_contents_pane_review($form, $form_state, $checkout_pane, $order),
  );

  return $pane_form;
}


/**
 * Implements hook_commerce_authnet_billing_address_from_customer_alter()
 */
function xdruple_commerce_commerce_authnet_billing_address_from_customer_alter(&$billing_address, $order_wrapper) {
  try {
    if ($bill_to_address = $order_wrapper->commerce_customer_billing->xd_bill_to_address->value()) {
      $billing_address['thoroughfare'] = $bill_to_address->line1;
      $billing_address['locality'] = $bill_to_address->city;
      $billing_address['administrative_area'] = $bill_to_address->state;
      $billing_address['postal_code'] = $bill_to_address->postalCode;
      $billing_address['country'] = $bill_to_address->country;
    }
  } catch (\Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
    watchdog('xdruple_commerce', $e->getMessage(), array(), WATCHDOG_ERROR);
  }

  try {
    if ($bill_to_contact = $order_wrapper->commerce_customer_billing->xd_bill_to_contact->value()) {
      $billing_address['first_name'] = $bill_to_contact->firstName;
      $billing_address['last_name'] = $bill_to_contact->lastName;
    }
  } catch (\Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
    watchdog('xdruple_commerce', $e->getMessage(), array(), WATCHDOG_ERROR);
  }

  try {
    if ($customer = $order_wrapper->commerce_customer_billing->xd_customer->value()) {
      $billing_address['organisation_name'] = $customer->name;
    }
  } catch (\Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
    watchdog('xdruple_commerce', $e->getMessage(), array(), WATCHDOG_ERROR);
  }
}

/**
 * Implements hook_form_FORM_ID_alter for entity_operations_operation_form_xtuple_xdruplecommerceshipto
 */
function xdruple_commerce_form_entity_operations_operation_form_xtuple_xdruplecommerceshipto_edit_alter(&$form, $form_state) {
  $form['actions']['#weight'] = 100;
}

function xdruple_commerce_form_entity_operations_operation_form_alter(&$form, $form_state) {
  $form['actions']['#weight'] = 100;
}
