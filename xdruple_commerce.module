<?php

use Xtuple\REST\Resource\Customer\CustomerResource;
use Xtuple\REST\Resource\Site\SiteResource;

define('LABEL_INLINE', 'inline');
define('LABEL_ABOVE', 'above');
define('LABEL_HIDDEN', 'hidden');

/**
 * Implements hook_cpanel_alter()
 *
 * @param $form
 * @param $form_state
 */
function xdruple_commerce_cpanel_alter(&$form, &$form_state) {
  if (empty($form['xdruple_commerce_store_settings'])) {
    $form['xdruple_commerce_store_settings'] = [
      '#type' => 'fieldset',
      '#title' => t('Store settings'),
      '#group' => 'system_settings',
    ];
  }

  $form['xdruple_commerce_store_settings']['xdruple_commerce_filter_exclusive_items'] = [
    '#type' => 'checkbox',
    '#title' => t('Filter Product Lists against Customer Exclusive Items'),
    '#description' => t('When checked, all product lists are ran through the ' .
      'Customer Exclusive Items filter. This will restrict ' .
      'Product Lists to only those products a Customer is ' .
      'allowed to see based on their Pricing Schedules and ' .
      'the Exclusive Item flag set on an Item master. If ' .
      'you want to hide Exclusive Items from some Customers ' .
      ', you will need to check this box. '),
    '#default_value' => variable_get('xdruple_commerce_filter_exclusive_items', FALSE),
  ];

  $siteList = SiteResource::readAll(
    xdruple_commerce_application()->dataSource()
  );
  $sites = [];
  foreach ($siteList as $site) {
    $sites[$site->code()] = $site->description();
  }
  if (count($sites) === 1) {
    variable_set('xdruple_commerce_default_warehouse', array_shift(array_keys($sites)));
  }
  else {
    if (count($sites) > 1) {
      $form['xdruple_commerce_store_settings']['xdruple_commerce_default_warehouse'] = [
        '#type' => 'select',
        '#options' => $sites,
        '#default_value' => variable_get('xdruple_commerce_default_warehouse', '- None -'),
        '#empty_option' => '- None -',
        '#title' => t('Default Warehouse/Site'),
        '#description' => t("The default Warehouse/Site to use when none is set on a Customer's master in xTuple"),
        '#required' => TRUE,
      ];
    }
    else {
      drupal_set_message(t('Cannot find any Warehouse/Sites to set as default. Please contact the website administrator.'), 'warning');
    }
  }

  $form['xdruple_commerce_store_settings']['xdruple_commerce_default_warehouse_access'] = [
    '#type' => 'checkbox',
    '#title' => t('Restrict users from changing the Warehouse/Site orders are submitted for.'),
    '#description' => t('When checked, users will not be able to change the ' .
      "Warehouse/Site orders are submitted for. The Customer's" .
      'default warehouse will be used. If no Customer default ' .
      'is set, the default you set here will be used if you ' .
      'have more than one Warehouse/Site. If you only have one, ' .
      'it will be the default.'),
    '#default_value' => variable_get('xdruple_commerce_default_warehouse_access', FALSE),
  ];

  $form['xdruple_commerce_store_settings']['xdruple_commerce_login_redirect_page'] = [
    '#type' => 'textfield',
    '#size' => 60,
    '#title' => t('Redirect after log in'),
    '#description' => t('Redirect user to a certain page after logging in to the site. ' .
      'When filled out, users will be redirected to the path ' .
      'you enter here. e.g. node/123 For the home page, enter: &lt;front&gt;'),
    '#default_value' => variable_get('xdruple_commerce_login_redirect_page', FALSE),
  ];
}

/**
 * Implements hook_entity_property_info_alter()
 *
 * Add our custom xTuple properties.
 *
 * @param array $info The associative array of entity properties.
 */
function xdruple_commerce_entity_property_info_alter(&$info) {
  if (isset($info['commerce_order'], $info['commerce_order']['properties'])) {
    if (isset($info['commerce_order']['properties']['mail']['validation callback'])) {
      // Change this validation callback to our own that support multiple emails on one line.
      $info['commerce_order']['properties']['mail']['validation callback'] = 'xdruple_valid_multiple_email_address';
    }
  }
}

/**
 * Implements hook_form_alter()
 *
 * Resolve a problem with undefined commerce_checkout_form on AJAX calls
 * when using page_manager_existing_pages.
 *
 * @See: https://drupal.org/node/1773674
 * @See: https://drupal.org/node/1774770
 * @See: https://drupal.org/node/2134023
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function xdruple_commerce_form_alter(&$form, &$form_state, $form_id) {
  if (strpos($form_id, 'commerce_checkout_form') !== FALSE) {
    // Drupal has an automatic dependencies load when a menu item at hook_menu
    // declares an include file where the page callback is located. E.x.
    // $items['checkout/%commerce_order'] = array(
    //  'title' => 'Checkout',
    //  'page callback' => 'commerce_checkout_router',
    //  'page arguments' => array(1),
    //  'access arguments' => array('access checkout'),
    //  'type' => MENU_CALLBACK,
    //  'file' => 'includes/commerce_checkout.pages.inc',
    // );
    // The Form API store the path of the of an include in the cached $form_state
    // form to satisfy the dependency when for an element in a viewed page
    // has an AJAX behavior so when an AJAX call is received the function
    // form_get_cache look into $form_state['build_info']['files'] and do a
    // include of that specified file. Unfortunately at doing menu_alter of this
    // menu item:
    // $items['checkout/%commerce_order/%commerce_checkout_page']['file'] = $task['file'];
    // The Form API will include only the file referenced in the menu array and the
    // AJAX call will be broken. We resolve this altering the form to explicit
    // attach the commerce_checkout.pages.inc into the build_info files.

    $form_state['build_info']['files']['commerce_checkout'] = [
      'module' => 'commerce_checkout',
      'name' => 'includes/commerce_checkout.pages',
      'type' => 'inc',
    ];
  }

  // Wrap any 'access checkout' items in 'access xtuple checkout' so we can
  // dynamically grant it.
  // @See: commerce_checkout_form_alter()
  if (strpos($form_id, 'views_form_commerce_cart_form_') === 0 ||
    strpos($form_id, 'views_form_ft_commerce_cart_form_') === 0
  ) {

    // Only add the Checkout button if the cart form View shows line items.
    $view = reset($form_state['build_info']['args']);

    if (!empty($view->result)) {
      $form['actions']['checkout']['#access'] = user_access('access checkout');
    }
  }
}

/**
 * Implements hook_theme().
 */
function xdruple_commerce_theme() {
  $items = [
    'xdruple_commerce_cart_dropdown' => [
      'variables' => [
        'link' => NULL,
        'title' => NULL,
        'count' => NULL,
        'amount' => NULL,
      ],
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'file' => 'theme.inc',
      'template' => 'xdruple-commerce-cart-dropdown',
    ],
  ];

  $items += \CDD\OpenCDD\Theme\Block::themeDefinition('cart_dropdown', [
    'hide_empty_title' => TRUE,
    'hide_empty_content' => TRUE,
    'hide_empty_block' => TRUE,
  ]);


  return $items;
}

/**
 * Helper function to perform a Unit of Measure conversions on prices.
 *
 * @param float $price     The base price to convert.
 * @param float $uom_ratio The UOM ratio.
 *
 * @return float The converted price.
 */
function _xdruple_commerce_convert_uom_price($price, $uom_ratio) {
  $price = $price * $uom_ratio;
  $price = round($price * 100); // Drupal Commerce doesn't use decimals for prices.

  return $price;
}

/**
 * @param \stdClass $line_item
 * @param bool      $cache_only
 *
 * @return float|int|null
 */
function xdruple_commerce_get_customer_line_item_price($line_item, $cache_only = FALSE) {
  /** @var stdClass $user */
  global $user;

  $product = xdruple_product_entity_load($line_item->commerce_product[LANGUAGE_NONE]['0']['product_id']);
  $price = 0;
  // Do a conversion to the inventoryUnit.
  if (!empty($line_item->commerce_unit_price[LANGUAGE_NONE]['0']) &&
    isset($line_item->commerce_unit_price[LANGUAGE_NONE]['0']['amount']) &&
    is_numeric($line_item->commerce_unit_price[LANGUAGE_NONE]['0']['amount'])
  ) {
    $price = $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['amount'];
    // Drupal Commerce doesn't use decimals. When getting the price from the
    // line_item, convert to decimal first.
    $price = $price / 100;
    if ($xdProduct = $product->xdProduct()) {
      $price = _xdruple_commerce_convert_uom_price($price, $xdProduct->uomRatio());
    }
    $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['amount'] = $price;
    $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['data']['components']['0']['price']['amount'] = $price;
  }

  /** @var Xtuple\Xdruple\Session\RescuedSession $session */
  global $session;
  if ((!$session->getRescued('customer') || !$session->getRescued('site'))) {
    // We cannot get a price quote without all of these set.
    return $price;
  }

  if ($user->uid === 0 && !variable_get('xdruple_checkout_use_guest_customer_price_schedule', FALSE)) {
    // Do not get price quote from guest customer price schedule.
    return $price;
  }

  $price = _xdruple_commerce_load_customer_line_item_price($line_item, $cache_only);

  if (isset($price) && $price >= 0) {
    // Do a conversion to the inventoryUnit.
    if ($xdProduct = $product->xdProduct()) {
      $price = _xdruple_commerce_convert_uom_price($price, $xdProduct->uomRatio());
    }

    $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['amount'] = $price;
    $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['data']['components']['0']['price']['amount'] = $price;

    return $price;
  }
  else {
    return NULL;
  }
}

/**
 * @param $line_item
 * @param $cache_only
 *
 * @return float
 */
function _xdruple_commerce_load_customer_line_item_price($line_item, $cache_only = FALSE) {
  /** @var stdClass $user */
  global $user;

  /** @var Xtuple\Xdruple\Session\RescuedSession $session */
  global $session;

  if ($user->uid === 0) {
    // Get anonymous checkout defaults from control panel.
    $customer = variable_get('xdruple_checkout_guest_customer', NULL);
    $shipto = NULL;
    $site = variable_get('xdruple_commerce_default_warehouse', NULL);
  }
  else {
    $customer = $session->getRescued('customer');
    $shipto = $session->getRescued('ship_to');
    $site = $session->getRescued('site');
  }

  $date = xdruple_rescued_scheduled_date('tomorrow');

  $cid = 'xdruple_commerce_customer_line_item_price-' .
    $customer . '-' .
    $line_item->line_item_label . '-' .
    strval($line_item->quantity) . '-' .
    strval($date) . '-' .
    $shipto . '-' .
    $site;
  $cache = cache_get($cid, 'cache');

  if (empty($cache) || xdruple_cache_expired($cache)) {
    $options = [
      'asOf' => $date,
      // The scheduled date for the order.
      'siteId' => $site,
      'effective' => format_date(REQUEST_TIME, 'custom', 'Y-m-d'),
      // Always today.
    ];

    if (!empty($shipto)) {
      $options['shiptoId'] = $shipto;
    }


    // Make the itemPrice service request.
    if (!$cache_only) {
      $price = CustomerResource::readItemPrice(
        xdruple_commerce_application()->dataSource(),
        new \Xtuple\Persistence\Query\MethodQuery([
          $customer,
          $line_item->line_item_label,
          $line_item->quantity,
          $options,
        ])
      );
      cache_set($cid, $price, 'cache', REQUEST_TIME + 60 * 60 * 10);
      return $price;
    }
    else {
      return NULL;
    }
  }
  else {
    $price = $cache->data;

    return $price;
  }
}

/**
 * Implements hook_theme_registry_alter()
 *
 * @param $theme_registry
 */
function xdruple_commerce_theme_registry_alter(&$theme_registry) {
  $module = drupal_get_path('module', 'xdruple_commerce');
  $theme_registry['commerce_checkout_review']['file'] = 'xdruple_commerce.module';
  $theme_registry['commerce_checkout_review']['theme path'] = $module;
  $theme_registry['commerce_checkout_review']['includes'][0] = "$module/xdruple_commerce.module";
  $theme_registry['commerce_checkout_review']['function'] = 'xdruple_commerce_checkout_review';
}

/**
 * Implements hook_user_view_alter()
 *
 * @param $build
 */
function xdruple_commerce_user_view_alter(&$build) {
  $build['summary']['#access'] = FALSE;
}

function xdruple_commerce_checkout_review($variables) {
  $rows = [];

  foreach ($variables['form']['#data'] as $pane_id => $pane) {
    $vars = [
      'element' => [
        '#title' => $pane['title'],
        '#value' => $pane['data'],
        '#children' => '',
        '#attributes' => [
          'class' => [
            'checkout-review-fieldset',
            'checkout-review-fieldset--' . drupal_clean_css_identifier($pane_id),
          ],
        ],
      ],
    ];

    if ($pane_id == 'customer_profile_shipping' || $pane_id == 'customer_profile_billing') {
      $vars['element']['#wrapper_attributes'] = [
        'class' => 'row',
      ];
    }

    $fieldset = theme('fieldset', $vars);

    $rows[] = theme('html_tag', [
      'element' => [
        '#tag' => 'div',
        '#value' => $fieldset,
        '#attributes' => [
          'class' => [
            'checkout-review-pane',
            'checkout-review-pane--' . drupal_clean_css_identifier($pane_id),
          ],
        ],
      ],
    ]);
  }

  return implode('', $rows);
}

/**
 * Callback for checkout_completion_message pane settings form
 *
 * /admin/commerce/config/checkout/form/pane/checkout_completion_message
 *
 * @param $checkout_pane
 *
 * @return array
 */
function xdruple_commerce_checkout_completion_message_pane_settings_form($checkout_pane) {
  $form = [];

  $message = variable_get('commerce_checkout_completion_message', xdruple_commerce_checkout_completion_message_default());

  $form['container'] = [
    '#type' => 'container',
    '#access' => filter_access(filter_format_load($message['format'])),
  ];

  $form['container']['commerce_checkout_completion_message'] = [
    '#type' => 'text_format',
    '#title' => t('Checkout completion message'),
    '#default_value' => $message['value'],
    '#format' => $message['format'],
  ];

  $var_info = [
    'site' => [
      'type' => 'site',
      'label' => t('Site information'),
      'description' => t('Site-wide settings and other global information.'),
    ],
    'commerce_order' => [
      'label' => t('Order'),
      'type' => 'commerce_order',
    ],
    'user' => [
      'label' => t('User'),
      'type' => 'user',
    ],
  ];

  $form['container']['commerce_checkout_completion_message_help'] = RulesTokenEvaluator::help($var_info);

  return $form;
}

/**
 * Callback for checkout_completion_message pane (checkout/%/complete page)
 *
 * @param $form
 * @param $form_state
 * @param $checkout_pane
 * @param $order
 *
 * @return array
 */
function xdruple_commerce_checkout_completion_message_pane_checkout_form($form, &$form_state, $checkout_pane, $order) {
  /** @var \Xtuple\Drupal7\Proxy\User\CommerceUserProxy $user */
  global $user;
  $pane_form = [];
  $pane_form["message"] = [
    "#theme" => "xdruple_checkout_completion_message",
    "#order" => $order,
    "#account" => $user,
  ];
  return $pane_form;
}

/**
 * Helper function, returns default checkout completion message
 */
function xdruple_commerce_checkout_completion_message_default() {
  $value = '';
  $format = 'htmlpurifier_basic';
  if (filter_format_load($format)) {
    $value .= '<p>Your order number is <a href="[commerce-order:view-url]">[commerce-order:order-number]</a>.</p>';
    $value .= '<p>You can <a href="[commerce-order:url]">view your order</a> on your <a href="/user/[user:uid]/pending-orders">pending orders page</a> when logged in.</p>';
    $value .= '<p>We sent an order confirmation e-mail to you at <strong>[user:mail]</strong>.</p>';
    $value .= '<p><a href="[site:url]">Return to the front page.</a></p>';
  }
  else {
    $value .= 'Your order number is [commerce-order:order-number]. You can view your order on your account page when logged in.';
    $format = filter_fallback_format();
  }

  return [
    'value' => $value,
    'format' => $format,
  ];
}

/**
 * Callback for purchased_items pane (checkout/%/complete page)
 *
 * @param $form
 * @param $form_state
 * @param $checkout_pane
 * @param $order
 *
 * @return array
 */
function xdruple_commerce_checkout_purchased_items_pane_checkout_form($form, &$form_state, $checkout_pane, $order) {
  $pane_form = [];

  module_load_include('inc', 'commerce_cart', 'includes/commerce_cart.checkout_pane');
  list($view_id, $display_id) = explode('|', variable_get('commerce_cart_contents_pane_view', 'commerce_cart_summary|default'));
  if (views_get_view_result($view_id, $display_id, $order->order_id)) {
    $pane_form['cart_contents'] = [
      '#markup' => commerce_cart_contents_pane_review($form, $form_state, $checkout_pane, $order),
    ];
  }

  return $pane_form;
}

/**
 * Helper function
 *
 * @return array
 * @throws \EntityMetadataWrapperException
 */
function _xdruple_commerce_get_cart_summary() {
  $summary = [];
  /** @var \Xtuple\Drupal7\Proxy\User\UserProxyInterface $user */
  global $user;
  if ($order = commerce_cart_order_load($user->uid())) {
    try {
      /** @var \EntityDrupalWrapper $order_wrapper */
      $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
      /** @var \EntityDrupalWrapper $line_items_wrapper */
      $line_items_wrapper = $order_wrapper->get("commerce_line_items");
      $total = commerce_line_items_total($line_items_wrapper->value());
      $summary = [
        "count" => commerce_line_items_quantity($line_items_wrapper, commerce_product_line_item_types()),
        "total" => $total["amount"],
        "currency" => $total["currency_code"],
      ];
    } catch (\Exception $e) {
      watchdog_exception("xdruple", $e);
    }
  }
  return $summary;
}

function xdruple_commerce_cart_dropdown_block() {
  $output = '';

  $summary = _xdruple_commerce_get_cart_summary();
  if (!empty($summary['count']) && $summary['count'] > 0) {
    $output .= theme('xdruple_commerce_cart_dropdown', [
      'title' => t('My cart'),
      'count' => format_plural($summary['count'], '1 item', '@count items'),
      'amount' => commerce_currency_format($summary['total'], $summary['currency']),
    ]);
  }
  else {
    $output .= theme('xdruple_commerce_cart_dropdown', [
      'title' => t('My cart is empty'),
    ]);
  }

  return $output;
}

/**
 * Implements hook_module_implements_alter()
 *
 * @param $implementations
 * @param $hook
 */
function xdruple_commerce_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'modules_enabled') {
    $group = $implementations['xdruple_commerce'];
    unset($implementations['xdruple_commerce']);
    $implementations['xdruple_commerce'] = $group;
  }

  // Moves the xdruple_commerce_commerce_order_load() implementation to the start
  // of the array so it is invoked before all modules implementing the same hook.
  if ($hook == 'commerce_order_load') {
    $xdruple_commerce['xdruple_commerce'] = $implementations['xdruple_commerce'];
    unset($implementations['xdruple_commerce']);
    $modules = $implementations;
    $implementations = array_merge($xdruple_commerce, $modules);
  }
}

/**
 * Implements hook_modules_enabled()
 *
 * - commerce_customer_modules_enabled() calls commerce_customer_configure_customer_fields() to ensure that all
 * modules that implement hook_commerce_customer_profile_type_info() were invoked and all profile type have
 * commerce_customer_address field. xDruple Commerce provides own fields to handle that and so this field should
 * always be removed
 *
 * @see commerce_customer_modules_enabled()
 * @see commerce_customer_configure_customer_fields()
 * @see commerce_customer_profile_type_info()
 *
 * @param $modules
 */
function xdruple_commerce_modules_enabled($modules) {
  _xdruple_commerce_remove_commerce_customer_address();
}

/**
 * Helper functions. Removes all 'commerce_customer_address' fields.
 */
function _xdruple_commerce_remove_commerce_customer_address() {
  // Clear caches so xdruple_commerce module can override commerce module.
  drupal_flush_all_caches();
  drupal_static_reset();

  // Remove 'commerce_customer_address' fields on customer profiles. We use
  // xTuple integrated custom fields for this.
  $field_name = 'commerce_customer_address';
  foreach (commerce_customer_profile_types() as $profile_type) {
    $instance = field_info_instance('commerce_customer_profile', $field_name, $profile_type['type']);

    if (!empty($instance)) {
      // Delete the instance and field.
      // TODO: Do we really need to delete the field or just the instance?
      // This shouldn't be ran on an existing site that could have data in this
      // field, but that should never really happen. An existing site would
      // need to be migrated to an xTuple enabled site.
      field_delete_instance($instance, TRUE);
    }
  }

  field_purge_batch(10);
}

/**
 * Implements hook_views_default_views_alter()
 *
 * @param $views
 */
function xdruple_commerce_views_default_views_alter(&$views) {
  $commerce_orders = variable_get('commerce_orders_view_name', 'commerce_orders');
  if (isset($views[$commerce_orders])) {
    unset($views[$commerce_orders]->display['shopping_carts']);
    unset($views[$commerce_orders]->display['default']->display_options['filters']);
  }
}

/**
 * Implements hook_commerce_order_load().
 *
 * Because item could be deactivated in xTuple, we need to make sure the items
 * in an order (and cart) are valid when loading an order. If they are no
 * longer valid, we remove them from the order.
 *
 * @param $orders
 */
function xdruple_commerce_commerce_order_load($orders) {
  $refreshed = &drupal_static(__FUNCTION__, []);
  $orders_changed = [];

  foreach ($orders as $order) {
    // Refresh only if this order object represents the latest revision of a
    // shopping cart order, it hasn't been refreshed already in this request
    // and it meets the criteria in the shopping cart refresh settings.
    if (!isset($refreshed[$order->order_id]) &&
      commerce_cart_order_is_cart($order) &&
      commerce_order_is_latest_revision($order) &&
      commerce_cart_order_can_refresh($order)
    ) {

      // Refresh the order and add its ID to the refreshed array.
      $refreshed[$order->order_id] = TRUE;
      $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

      // Loop over every line item on the order...
      foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
        // If the current line item actually no longer exists...
        if (!$line_item_wrapper->value()) {
          // Remove the reference from the order and continue to the next value.
          $order_wrapper->commerce_line_items->offsetUnset($delta);
          continue;
        }

        // If the line item is a product line item, not shipping to tax.
        if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
          // If the current product is no longer active.
          try {
            $product_ids[] = $line_item_wrapper->commerce_product->raw();
            foreach ($product_ids as $id) {
              // Check if we can load the product.
              entity_load_single('commerce_product', $id);
            }
          } catch (Exception $e) {
            // Remove the product from this order.
            $line_item_id = $line_item_wrapper->raw();
            $order_wrapper->commerce_line_items->offsetUnset($delta);
            commerce_entity_reference_delete($order, 'commerce_line_items', 'line_item_id', $line_item_id);
            $orders_changed[] = $order->order_id;

            continue;
          }
        }
      }
    }
  }

  if (!empty($orders_changed)) {
    // Run the commerce_cart_commerce_order_load() version of this hook with
    // the updated orders data so it does it's thing without having to load
    // the inactive product and then save the order.
    commerce_cart_commerce_order_load($orders);
    foreach ($orders_changed as $order_id) {
      entity_save('commerce_order', $orders[$order_id]);
    }
  }
}

/**
 * Implements hook_features_exclude()
 *
 * @return array
 */
function xdruple_commerce_features_exclude() {
  return [
    'variable' => [
      // Commerce UPS
      'commerce_ups_access_key',
      'commerce_ups_account_id',
      'commerce_ups_log',
      'commerce_ups_password',
      'commerce_ups_user_id',
    ],
  ];
}
