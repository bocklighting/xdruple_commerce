<?php

define('LABEL_INLINE', 'inline');
define('LABEL_ABOVE', 'above');
define('LABEL_HIDDEN', 'hidden');

/**
 * Implements hook_compass_module()
 */
function xdruple_commerce_compass_module() {
  return new \CDD\Compass\DrupalModule('xdruple_commerce', array('xdruple_commerce'));
}

/**
 * Implements hook_user_login().
 *
 * @param $edit
 * @param $account
 */
function xdruple_commerce_user_login(&$edit, $account) {
  if (!isset($_POST['form_id']) || $_POST['form_id'] != 'user_pass_reset') {
    $redirect = variable_get('xdruple_commerce_login_redirect_page', FALSE);
    $frontpage = variable_get('site_frontpage');

    // Altering behavior only if redirect is set.
    // Redirect has to be not empty, as drupal_goto() used for redirect uses $_GET['destination'] as higher priority,
    // so if it is FALSE, but exists, than no redirect is happening.
    if (!empty($redirect)) {
      $edit['redirect'] = $redirect;

      // In some cases Drupal adds destination to the login form automatically
      if (!empty($_GET['destination']) && $frontpage === $_GET['destination']) {
        $_GET['destination'] = $redirect;
      }
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 *
 * Override Drupal Commerce's entities to use xTuple ones.
 *
 * @param $info
 */
function xdruple_commerce_entity_info_alter(&$info) {
  // TODO: Get wsclient name. Assuming 'xtuple_' here.

  if (isset($info['xtuple_xdproduct'], $info['commerce_product']) && TRUE) {
    // Cache original to reset some key settings.
    $original = $info['commerce_product'];

    // Override 'api-list-callback' to support exclusive items.
    $info['xtuple_xdproduct']['api-list-callback'] = 'xdruple_commerce_api_customer_exclusive_item_list'; // @todo: call rescued_api_resource_list statically

    // TODO: Break the reference: (array)clone(object)$operation_info['xtuple_xdproduct']
    $info['commerce_product'] = $info['xtuple_xdproduct'];
    $info['commerce_product']['entity keys']['bundle'] = 'type';
    $info['commerce_product']['entity keys']['name'] = 'product_id';

    // Preserve some of the original entity_info settings.
    $info['commerce_product']['label'] = $original['label'];
    $info['commerce_product']['bundles']['product'] = $original['bundles']['product'];
    $info['commerce_product']['view modes'] = $original['view modes'];
    $info['commerce_product']['uri callback'] = $original['uri callback'];
    $info['commerce_product']['access callback'] = $original['access callback'];
  }
}

/**
 * Implements hook_entity_operation_info_alter(().
 *
 * Override Drupal Commerce's entities to use the RESCUED entity operation handler.
 *
 * @param $operation_info
 *  The array of data provided by hook_entity_operation_info().
 */
function xdruple_commerce_entity_operation_info_alter(&$operation_info) {
  // Add a handler for commerce_product.
  if (isset($operation_info['xtuple_xdproduct'])) {
    // TODO: Break the reference: (array)clone(object)$operation_info['xtuple_xdproduct']
    $operation_info['commerce_product'] = $operation_info['xtuple_xdproduct'];
  }
}

/**
 * Implements hook_menu_alter().
 *
 * Wrap any 'access checkout' or 'access content' items in our custom callback
 * so we can dynamically grant it.
 *
 * @param $items
 */
function xdruple_commerce_menu_alter(&$items) {
  if (!empty($items['checkout'])) {
    array_unshift(
      $items['checkout']['access arguments'],
      'checkout',
      'create'
    );
    $items['checkout']['access callback'] = 'xdruple_access';
  }
  if (!empty($items['checkout/%commerce_order'])) {
    array_unshift(
      $items['checkout/%commerce_order']['access arguments'],
      'checkout/%commerce_order',
      'update'
    );
    $items['checkout/%commerce_order']['access callback'] = 'xdruple_access';
  }
  if (!empty($items['checkout/%commerce_order/%commerce_checkout_page'])) {
    array_unshift(
      $items['checkout/%commerce_order/%commerce_checkout_page']['access arguments'],
      'checkout/%commerce_order/%commerce_checkout_page',
      'update'
    );
    $items['checkout/%commerce_order/%commerce_checkout_page']['access callback'] = 'xdruple_access';
  }
  if (!empty($items['cart'])) {
    array_unshift(
      $items['cart']['access arguments'],
      'cart',
      'update'
    );
    $items['cart']['access callback'] = 'xdruple_access';
  }
  if (!empty($items['cart/my'])) {
    array_unshift(
      $items['cart/my']['access arguments'],
      'cart/my',
      'update'
    );
    $items['cart/my']['access callback'] = 'xdruple_access';
  }
}

/**
 * Implements hook_commerce_line_item_summary_link_info_alter().
 *
 * Wrap any 'access checkout' items in 'access xtuple checkout' so we can
 * dynamically grant it.
 *
 * @param $links
 */
function xdruple_commerce_commerce_line_item_summary_link_info_alter(&$links) {
  if (!empty($links['checkout'])) {
    $links['checkout']['access'] = xdruple_access(
      'commerce_line_item_summary_link_info',
      'view',
      'access checkout'
    );
  }
}

/**
 * Implements hook_rescued_resources().
 */
function xdruple_commerce_rescued_resources() {
  return array(
    "XdCustomerRelation",
    "Customer",
    "XdCustomer",
    "XdProduct",
    "XdCatalog",
    "XdCatalogGroup",
    "SalesOrder",
  );
}

/**
 * Implements hook_cpanel_alter()
 *
 * @param $form
 * @param $form_state
 */
function xdruple_commerce_cpanel_alter(&$form, &$form_state) {
  if (empty($form['xdruple_commerce_store_settings'])) {
    $form['xdruple_commerce_store_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Store settings'),
      '#group' => 'system_settings',
    );
  }

  $form['xdruple_commerce_store_settings']['xdruple_commerce_filter_exclusive_items'] = array(
    '#type' => 'checkbox',
    '#title' => t('Filter Product Lists against Customer Exclusive Items'),
    '#description' => t('When checked, all product lists are ran through the ' .
      'Customer Exclusive Items filter. This will restrict ' .
      'Product Lists to only those products a Customer is ' .
      'allowed to see based on their Pricing Schedules and ' .
      'the Exclusive Item flag set on an Item master. If ' .
      'you want to hide Exclusive Items from some Customers ' .
      ', you will need to check this box. '),
    '#default_value' => variable_get('xdruple_commerce_filter_exclusive_items', FALSE),
  );

  $sites = xdruple_fields_get_site_list();
  if (count($sites) === 1) {
    variable_set('xdruple_commerce_default_warehouse', array_shift(array_keys($sites)));
  }
  else {
    if (count($sites) > 1) {
      $form['xdruple_commerce_store_settings']['xdruple_commerce_default_warehouse'] = array(
        '#type' => 'select',
        '#options' => $sites,
        '#default_value' => variable_get('xdruple_commerce_default_warehouse', '- None -'),
        '#empty_option' => '- None -',
        '#title' => t('Default Warehouse/Site'),
        '#description' => t("The default Warehouse/Site to use when none is set on a Customer's master in xTuple"),
        '#required' => TRUE,
      );
    }
    else {
      drupal_set_message(t('Cannot find any Warehouse/Sites to set as default. Please contact the website administrator.'), 'warning');
    }
  }

  $form['xdruple_commerce_store_settings']['xdruple_commerce_default_warehouse_access'] = array(
    '#type' => 'checkbox',
    '#title' => t('Restrict users from changing the Warehouse/Site orders are submitted for.'),
    '#description' => t('When checked, users will not be able to change the ' .
      "Warehouse/Site orders are submitted for. The Customer's" .
      'default warehouse will be used. If no Customer default ' .
      'is set, the default you set here will be used if you ' .
      'have more than one Warehouse/Site. If you only have one, ' .
      'it will be the default.'),
    '#default_value' => variable_get('xdruple_commerce_default_warehouse_access', FALSE),
  );

  $form['xdruple_commerce_store_settings']['xdruple_commerce_login_redirect_page'] = array(
    '#type' => 'textfield',
    '#size' => 60,
    '#title' => t('Redirect after log in'),
    '#description' => t('Redirect user to a certain page after logging in to the site. ' .
      'When filled out, users will be redirected to the path ' .
      'you enter here. e.g. node/123 For the home page, enter: &lt;front&gt;'),
    '#default_value' => variable_get('xdruple_commerce_login_redirect_page', FALSE),
  );
}

/**
 * Implements hook_rescued_operation_entityform_alter().
 *
 * @param $form
 * @param $form_state
 * @param $context
 */
function xdruple_commerce_rescued_operation_entityform_alter(&$form, &$form_state, $context) {
  /** @var Xtuple\Xdruple\Session\RescuedSession $session */
  $session = extensions_get_session();

  if (isset($context['entity_type']) && $context['entity_type'] === 'xtuple_xdstdordproduct') {
    // Default this form to the customer and ship to in the user's session.
    if ($session->getRescued('customer')) {
      $customer = $session->getRescued('customer');
      $form['customer']['#default_value'] = $customer;
      $form['customer']['#options'] = array($customer => $customer);
    }
    else {
      $customer = NULL;
    }
    if ($session->getRescued('ship_to')) {
      $form['shipto']['#default_value'] = $session->getRescued('ship_to');
      $form['shipto']['#options'] = xdruple_fields_get_ship_to_list($customer);
    }
  }

  if (isset($context['entity_type']) &&
    ($context['entity_type'] === 'commerce_product' || $context['entity_type'] === 'XdProduct' || $context['entity_type'] === 'xtuple_xdproduct')
  ) {

    // Make 'weightUnit' read only.
    $form['weightUnit']['#attributes']['disabled'] = TRUE;
    $description = t("This field is derived from xTuple's Setup->Products->Units Of Measure with the 'Item Weight' flag set. It cannot be changed here.");
    $form['weightUnit']['#description'] = $description;
    // Make 'uomRatio' read only.
    $form['uomRatio']['#attributes']['disabled'] = TRUE;
    $description = t("This field is derived from xTuple's Units Of Measure Ratios. It cannot be changed here.");
    $form['uomRatio']['#description'] = $description;
  }
}

/**
 * Implements hook_entity_property_info_alter()
 *
 * Add our custom xTuple properties.
 *
 * @param array $info The associative array of entity properties.
 */
function xdruple_commerce_entity_property_info_alter(&$info) {
  if (isset($info['xtuple_xdproduct'], $info['xtuple_xdproduct']['properties'], $info['commerce_product'])) {
    foreach ($info['xtuple_xdproduct']['properties'] as $prop_name => $prop_value) {
      if (!isset($info['commerce_product']['properties'][$prop_name])) {
        // Set product property to match xTuple's entity.
        // TODO: Break the reference: (array)clone(object)$prop_value
        $info['commerce_product']['properties'][$prop_name] = $prop_value;
      }
    }
  }

  if (isset($info['commerce_order'], $info['commerce_order']['properties'])) {
    if (isset($info['commerce_order']['properties']['mail']['validation callback'])) {
      // Change this validation callback to our own that support multiple emails on one line.
      $info['commerce_order']['properties']['mail']['validation callback'] = 'xdruple_valid_multiple_email_address';
    }
  }
}

/**
 * Implements hook_field_extra_fields_alter()
 *
 * Expose our custom xTuple properties as fields.
 *
 * @param array $info The associative array of 'pseudo-field' components.
 */
function xdruple_commerce_field_extra_fields_alter(&$info) {
  if (isset($info['xtuple_xdproduct'],
    $info['xtuple_xdproduct']['xtuple_xdproduct'],
    $info['commerce_product'],
    $info['commerce_product']['product'])) {

    foreach ($info['xtuple_xdproduct']['xtuple_xdproduct'] as $view_name => $view_fields) {
      if (isset($info['commerce_product']['product'][$view_name])) {
        foreach ($view_fields as $field_name => $field_values) {
          if (!isset($info['commerce_product']['product'][$view_name][$field_name])) {
            // Set product fields to match xTuple's entity.
            // TODO: Break the reference: (array)clone(object)$field_values
            $info['commerce_product']['product'][$view_name][$field_name] = $field_values;
          }
        }
      }
    }
  }
}

/**
 * Lets modules add extra fields to product entities without using
 * hook_field_extra_field_alter because of how product_reference calls
 * commerce_product_field_extra_fields() directly instead of using
 * field_info_extra_fields().
 *
 * @See: commerce_product_reference_field_extra_fields()
 *
 * @param $extra
 *   Extra fields from commerce_product_field_extra_fields()
 *
 * @return
 *   Modified extra fields array with your additions/changes.
 */
function xdruple_commerce_commerce_product_add_extra_fields_alter(&$extra) {
  // Modify $extra here to add the extra xTuple specific entity properties.

  foreach (commerce_product_types() as $type => $product_type) {
    $form = array(
      'subTitle' => array(
        'label' => t('Product Sub-Title'),
        'description' => t('Product module sub-title form element'),
        'weight' => -4,
      ),
      'productWeight' => array(
        'label' => t('Product Weight'),
        'description' => t('Product module product weight form element'),
        'weight' => -4,
      ),
      'packageWeight' => array(
        'label' => t('Package Weight'),
        'description' => t('Product module package weight form element'),
        'weight' => -4,
      ),
      'prodLength' => array(
        'label' => t('Length'),
        'description' => t('Product module length form element'),
        'weight' => -4,
      ),
      'prodWidth' => array(
        'label' => t('Width'),
        'description' => t('Product module width form element'),
        'weight' => -4,
      ),
      'prodHeight' => array(
        'label' => t('Height'),
        'description' => t('Product module height form element'),
        'weight' => -4,
      ),
      'packLength' => array(
        'label' => t('Package Length'),
        'description' => t('Product module package length form element'),
        'weight' => -4,
      ),
      'packWidth' => array(
        'label' => t('Package Width'),
        'description' => t('Product module package width form element'),
        'weight' => -4,
      ),
      'packHeight' => array(
        'label' => t('Package Height'),
        'description' => t('Product module package height form element'),
        'weight' => -4,
      ),
      'classCode' => array(
        'label' => t('Class Code'),
        'description' => t('Product module class code form element'),
        'weight' => -4,
      ),
      'productCategory' => array(
        'label' => t('Product Category'),
        'description' => t('Product module product category form element'),
        'weight' => -4,
      ),
      'inventoryUnit' => array(
        'label' => t('Order Quantity UOM'),
        'description' => t('Product module inventory unit form element'),
        'weight' => -4,
      ),
      'priceUnit' => array(
        'label' => t('Unit Price UOM'),
        'description' => t('Product module price unit form element'),
        'weight' => -4,
      ),
      'uomRatio' => array(
        'label' => t('UOM Ratio'),
        'description' => t('Product module UOM ratio form element'),
        'weight' => -4,
      ),
      'weightUnit' => array(
        'label' => t('Weight Unit'),
        'description' => t('Product module weight unit form element'),
        'weight' => -4,
      ),
      'dimensionUnit' => array(
        'label' => t('Dimension Unit'),
        'description' => t('Product module dimension unit form element'),
        'weight' => -4,
      ),
      'physicalProdUnit' => array(
        'label' => t('Product Dimensions Unit'),
        'description' => t('Product module product dimensions unit form element'),
        'weight' => -4,
      ),
      'physicalPackUnit' => array(
        'label' => t('Package Dimensions Unit'),
        'description' => t('Product module package dimensions unit form element'),
        'weight' => -4,
      ),
      'notes' => array(
        'label' => t('Notes'),
        'description' => t('Product module notes form element'),
        'weight' => -3,
      ),
      'extDescrip' => array(
        'label' => t('Extended Description'),
        'description' => t('Product module extended description form element'),
        'weight' => -3,
      ),
      'urls' => array(
        'label' => t('URLs'),
        'description' => t('Product file URLs'),
        'weight' => -3,
      ),
    );

    $display = array(
      'subTitle' => array(
        'label' => t('Product Sub-Title'),
        'description' => t('Product sub-title'),
        'theme' => 'xdruple_commerce_sub_title',
        'weight' => -4,
      ),
      'productWeight' => array(
        'label' => t('Product Weight'),
        'description' => t('Weight of the product'),
        'theme' => 'xdruple_commerce_product_weight',
        'weight' => -4,
      ),
      'packageWeight' => array(
        'label' => t('Package Weight'),
        'description' => t('Weight of the empty package this product comes in'),
        'theme' => 'xdruple_commerce_package_weight',
        'weight' => -4,
      ),
      'prodLength' => array(
        'label' => t('Length'),
        'description' => t('Product module length form element'),
        'theme' => 'xdruple_commerce_length',
        'weight' => -4,
      ),
      'prodWidth' => array(
        'label' => t('Width'),
        'description' => t('Product module width form element'),
        'theme' => 'xdruple_commerce_width',
        'weight' => -4,
      ),
      'prodHeight' => array(
        'label' => t('Height'),
        'description' => t('Product module height form element'),
        'theme' => 'xdruple_commerce_height',
        'weight' => -4,
      ),
      'packLength' => array(
        'label' => t('Package Length'),
        'description' => t('Product module package length form element'),
        'theme' => 'xdruple_commerce_pack_length',
        'weight' => -4,
      ),
      'packWidth' => array(
        'label' => t('Package Width'),
        'description' => t('Product module package width form element'),
        'theme' => 'xdruple_commerce_pack_width',
        'weight' => -4,
      ),
      'packHeight' => array(
        'label' => t('Package Height'),
        'description' => t('Product module package height form element'),
        'theme' => 'xdruple_commerce_pack_height',
        'weight' => -4,
      ),
      'classCode' => array(
        'label' => t('Class Code'),
        'description' => t('Class Code the product belongs to'),
        'theme' => 'xdruple_commerce_class_code',
        'weight' => -4,
      ),
      'productCategory' => array(
        'label' => t('Product Category'),
        'description' => t('Product Category the product belongs to'),
        'theme' => 'xdruple_commerce_product_category',
        'weight' => -4,
      ),
      'inventoryUnit' => array(
        'label' => t('Order Quantity UOM'),
        'description' => t('Unit of measure used for inventory'),
        'theme' => 'xdruple_commerce_inventory_unit',
        'weight' => -4,
      ),
      'priceUnit' => array(
        'label' => t('Unit Price UOM'),
        'description' => t('Unit of measure used for the price calculation'),
        'theme' => 'xdruple_commerce_price_unit',
        'weight' => -4,
      ),
      'uomRatio' => array(
        'label' => t('UOM Ratio'),
        'description' => t('Unit of measure ratio between price and inventory'),
        'theme' => 'xdruple_commerce_uom_ratio',
        'weight' => -4,
      ),
      'weightUnit' => array(
        'label' => t('Weight Unit'),
        'description' => t('Unit of measure used for the weight calculation'),
        'theme' => 'xdruple_commerce_weight_unit',
        'weight' => -4,
      ),
      'dimensionUnit' => array(
        'label' => t('Dimension Unit'),
        'description' => t('Product module dimension unit form element'),
        'theme' => 'xdruple_commerce_dimension_unit',
        'weight' => -4,
      ),
      'physicalProdUnit' => array(
        'label' => t('Product Dimensions Unit'),
        'description' => t('Product module product dimensions unit form element'),
        'weight' => -4,
      ),
      'physicalPackUnit' => array(
        'label' => t('Package Dimensions Unit'),
        'description' => t('Product module package dimensions unit form element'),
        'weight' => -4,
      ),
      'notes' => array(
        'label' => t('Notes'),
        'description' => t('Additional notes for the product'),
        'theme' => 'xdruple_commerce_notes',
        'weight' => -3,
      ),
      'extDescrip' => array(
        'label' => t('Extended Description'),
        'description' => t('Extended description of the product'),
        'theme' => 'xdruple_commerce_ex_descrip',
        'weight' => -3,
      ),
      'urls' => array(
        'label' => t('URLs'),
        'description' => t('Product file URLs'),
        'weight' => -3,
      ),
    );

    $extra['commerce_product'][$type]['form'] = array_merge($extra['commerce_product'][$type]['form'], $form);
    $extra['commerce_product'][$type]['display'] = array_merge($extra['commerce_product'][$type]['display'], $display);
  }

  return $extra;
}

/**
 * Implements hook_form_alter()
 *
 * Resolve a problem with undefined commerce_checkout_form on AJAX calls
 * when using page_manager_existing_pages.
 *
 * @See: https://drupal.org/node/1773674
 * @See: https://drupal.org/node/1774770
 * @See: https://drupal.org/node/2134023
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function xdruple_commerce_form_alter(&$form, &$form_state, $form_id) {
  if (strpos($form_id, 'commerce_checkout_form') !== FALSE) {
    // Drupal has an automatic dependencies load when a menu item at hook_menu
    // declares an include file where the page callback is located. E.x.
    // $items['checkout/%commerce_order'] = array(
    //  'title' => 'Checkout',
    //  'page callback' => 'commerce_checkout_router',
    //  'page arguments' => array(1),
    //  'access arguments' => array('access checkout'),
    //  'type' => MENU_CALLBACK,
    //  'file' => 'includes/commerce_checkout.pages.inc',
    // );
    // The Form API store the path of the of an include in the cached $form_state
    // form to satisfy the dependency when for an element in a viewed page
    // has an AJAX behavior so when an AJAX call is received the function
    // form_get_cache look into $form_state['build_info']['files'] and do a
    // include of that specified file. Unfortunately at doing menu_alter of this
    // menu item:
    // $items['checkout/%commerce_order/%commerce_checkout_page']['file'] = $task['file'];
    // The Form API will include only the file referenced in the menu array and the
    // AJAX call will be broken. We resolve this altering the form to explicit
    // attach the commerce_checkout.pages.inc into the build_info files.

    $form_state['build_info']['files']['commerce_checkout'] = array(
      'module' => 'commerce_checkout',
      'name' => 'includes/commerce_checkout.pages',
      'type' => 'inc',
    );
  }

  // Wrap any 'access checkout' items in 'access xtuple checkout' so we can
  // dynamically grant it.
  // @See: commerce_checkout_form_alter()
  if (strpos($form_id, 'views_form_commerce_cart_form_') === 0 ||
    strpos($form_id, 'views_form_ft_commerce_cart_form_') === 0
  ) {

    // Only add the Checkout button if the cart form View shows line items.
    $view = reset($form_state['build_info']['args']);

    if (!empty($view->result)) {
      $form['actions']['checkout']['#access'] = xdruple_access(
        'views_form_commerce_cart_form',
        'view',
        'access checkout'
      );
    }
  }
}

/**
 * Implements hook_theme().
 */
function xdruple_commerce_theme() {
  $items = array(
    'xdruple_commerce_sub_title' => array(
      'variables' => array('subTitle' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'template' => 'xdruple-commerce-sub-title',
    ),
    'xdruple_commerce_product_weight' => array(
      'variables' => array('productWeight' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'template' => 'xdruple-commerce-product-weight',
    ),
    'xdruple_commerce_length' => array(
      'variables' => array('prodLength' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'template' => 'xdruple-commerce-length',
    ),
    'xdruple_commerce_width' => array(
      'variables' => array('prodWidth' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'template' => 'xdruple-commerce-width',
    ),
    'xdruple_commerce_height' => array(
      'variables' => array('prodHeight' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'template' => 'xdruple-commerce-height',
    ),
    'xdruple_commerce_package_weight' => array(
      'variables' => array('packageWeight' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'template' => 'xdruple-commerce-package-weight',
    ),
    'xdruple_commerce_pack_length' => array(
      'variables' => array('packLength' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'template' => 'xdruple-commerce-pack-length',
    ),
    'xdruple_commerce_pack_width' => array(
      'variables' => array('packWidth' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'template' => 'xdruple-commerce-pack-width',
    ),
    'xdruple_commerce_pack_height' => array(
      'variables' => array('packHeight' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'template' => 'xdruple-commerce-pack-height',
    ),
    'xdruple_commerce_class_code' => array(
      'variables' => array('classCode' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'template' => 'xdruple-commerce-class-code',
    ),
    'xdruple_commerce_product_category' => array(
      'variables' => array('productCategory' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'template' => 'xdruple-commerce-product-category',
    ),
    'xdruple_commerce_inventory_unit' => array(
      'variables' => array('inventoryUnit' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'template' => 'xdruple-commerce-inventory-unit',
    ),
    'xdruple_commerce_price_unit' => array(
      'variables' => array('priceUnit' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'template' => 'xdruple-commerce-price-unit',
    ),
    'xdruple_commerce_uom_ratio' => array(
      'variables' => array('uomRatio' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'template' => 'xdruple-commerce-uom-ratio',
    ),
    'xdruple_commerce_dimension_unit' => array(
      'variables' => array('dimensionUnit' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'template' => 'xdruple-commerce-dimension-unit',
    ),
    'xdruple_commerce_weight_unit' => array(
      'variables' => array('weightUnit' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'template' => 'xdruple-commerce-weight-unit',
    ),
    'xdruple_commerce_physical_prod_unit' => array(
      'variables' => array('physicalProdUnit' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'template' => 'xdruple-commerce-physical-prod-unit',
    ),
    'xdruple_commerce_physical_pack_unit' => array(
      'variables' => array('physicalPackUnit' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'template' => 'xdruple-commerce-physical-pack-unit',
    ),
    'xdruple_commerce_notes' => array(
      'variables' => array('notes' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'template' => 'xdruple-commerce-notes',
    ),
    'xdruple_commerce_ex_descrip' => array(
      'variables' => array('extDescrip' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'template' => 'xdruple-commerce-ext-descrip',
    ),
    'xdruple_commerce_cart_dropdown' => array(
      'variables' => array(
        'link' => NULL,
        'title' => NULL,
        'count' => NULL,
        'amount' => NULL,
      ),
      'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
      'file' => 'theme.inc',
      'template' => 'xdruple-commerce-cart-dropdown',
    ),
  );

  $items['xdruple_commerce_similar_product_link_default'] = array(
    'variables' => array(
      'product_id' => 0,
      'style' => '',
    ),
    'path' => drupal_get_path('module', 'xdruple_commerce') . '/theme',
    'file' => 'theme.inc',
    'template' => 'xdruple-commerce-similar-product-link-default',
  );

  $items += \CDD\OpenCDD\Theme\Block::themeDefinition('cart_dropdown', array(
    'hide_empty_title' => TRUE,
    'hide_empty_content' => TRUE,
    'hide_empty_block' => TRUE,
  ));


  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * The Product UI module instantiates the Product add/edit form alter the
 * form here to xTuple properties as fields.
 *
 * @see commerce_product_ui_product_form()
 *
 * @param $form
 * @param $form_state
 */
function xdruple_commerce_form_commerce_product_ui_product_form_alter(&$form, &$form_state) {
  $product = $form_state['commerce_product'];
  $op = 'edit';
  $entityType = 'commerce_product';
  $entityInfo = entity_get_info($entityType);
  $handler_class = $entityInfo['operations ui']['operations'][$op]['handler'];

  // Break the reference to $form_state.
  $foo_state = (array) clone ((object) $form_state);

  $excluded_fields = array(
    'product_id',
    'revision_id',
    'sku',
    'title',
    'type',
    'language',
    'uid',
    'status',
    'created',
    'changed',
    'data',
    'commerce_price',
    'urls', // URLs are loaded through the 'erp_xdproducturls' field.
    'characteristics', // Characteristics are loaded through the 'erp_xdproductcharacteristics' field.
  );

  // Get the xtuple form version from our controller and loop over our fields in that
  // form and add to the commerce_product from.
  $xdruple_form = entity_operations_operation_form(array(), $foo_state, 'XdProduct', $handler_class, $op, $product);
  foreach ($entityInfo['json-schema']['XdProduct']['properties'] as $prop_name => $prop_value) {
    // Skip the fields that are already handled or should not be shown.
    if (!in_array($prop_name, $excluded_fields)) {
      $form[$prop_name] = $xdruple_form[$prop_name];
      if (in_array($prop_name, array('notes', 'extDescrip'))) {
        $form[$prop_name]['#type'] = 'textarea';
        $form[$prop_name]['#rows'] = 4;
      }
      $form[$prop_name]['#weight'] = -3;
    }
  }
}

/**
 * Implements hook_field_attach_submit.
 *
 * @param $entity_type
 * @param $entity
 * @param $form
 * @param $form_state
 */
function xdruple_commerce_field_attach_submit($entity_type, $entity, $form, $form_state) {
  if ($entity_type === 'commerce_product') {
    // Save xTuple parameters back into the product entity object.
    $entity->subTitle = $form_state['values']['subTitle'];
    $entity->notes = $form_state['values']['notes'];
    $entity->extDescrip = $form_state['values']['extDescrip'];
    $entity->productWeight = $form_state['values']['productWeight'];
    $entity->prodLength = $form_state['values']['prodLength'];
    $entity->prodWidth = $form_state['values']['prodWidth'];
    $entity->prodHeight = $form_state['values']['prodHeight'];
    $entity->packageWeight = $form_state['values']['packageWeight'];
    $entity->packLength = $form_state['values']['packLength'];
    $entity->packWidth = $form_state['values']['packWidth'];
    $entity->packHeight = $form_state['values']['packHeight'];
    $entity->classCode = $form_state['values']['classCode'];
    $entity->productCategory = $form_state['values']['productCategory'];
    $entity->priceUnit = $form_state['values']['priceUnit'];
    $entity->uomRatio = $form_state['values']['uomRatio'];
    $entity->inventoryUnit = $form_state['values']['inventoryUnit'];
    $entity->weightUnit = $form_state['values']['weightUnit'];
    $entity->dimensionUnit = $form_state['values']['dimensionUnit'];
    $entity->physicalProdUnit = $form_state['values']['physicalProdUnit'];
    $entity->physicalPackUnit = $form_state['values']['physicalPackUnit'];
  }
}

/**
 * Implements hook_entity_query_alter.
 *
 * EntityFieldQuery used in _commerce_product_match_products_standard() does not
 * allow OR clauses. Alter the query to string match on sku OR title.
 *
 * @param EntityFieldQuery $query
 */
function xdruple_commerce_entity_query_alter(&$query) {
  if (isset($query->tags['commerce_sku_or_title_match'])) {
    $string = $query->metaData['commerce_sku_or_title_match']->string;
    $match = $query->metaData['commerce_sku_or_title_match']->match;

    if (isset($string, $match)) {
      // Build a where clause matching on either the SKU or title.

      // TODO: xTuple doesn't currently support an operator.
      switch ($match) {
        case 'contains':
          $query->propertyCondition('q', $string, 'CONTAINS');
          break;

        case 'starts_with':
          $query->propertyCondition('q', $string, 'CONTAINS');
          break;

        case 'equals':
        default:
          $query->propertyCondition('q', $string, '=');
          break;
      }
    }
  }
}

/**
 * XM.XdProduct.XdProductFetch POST query.
 *
 * Query the dispatch function XM.XdProduct.XdProductFetch to
 * get a filtered list of items that a Customer is allowed to see.
 *
 * @param string $resource_name The API resource name. e.g. 'ItemSiteListItem'
 * @param array  $opt_params    The structured query to perform.
 *
 * @param bool   $data_only
 *
 * @return array The query result response.
 */
function xdruple_commerce_api_customer_exclusive_item_list($resource_name = 'XdProduct', $opt_params = array(), $data_only = TRUE) {
  // When exclusive_items setting is off, just query rescued_api_resource_list().
  if (!variable_get('xdruple_commerce_filter_exclusive_items', FALSE)) {
    $result = rescued_api_resource_list($resource_name, $opt_params, FALSE);
  }
  else {
    $client = rescued_api_get_client();

    $customer = xdruple_rescued_session_get('customer');
    $shipto = xdruple_rescued_session_get('ship_to');
    $scheduled_date = xdruple_rescued_scheduled_date();

    if (!empty($customer)) {
      $opt_params['query']['customer'] = array(
        'EQUALS' => $customer,
      );
    }
    if (!empty($shipto)) {
      $opt_params['query']['shipto'] = array(
        'EQUALS' => $shipto,
      );
    }
    if (!empty($scheduled_date)) {
      $opt_params['query']['effectiveDate'] = array(
        'EQUALS' => $scheduled_date,
      );
    }

    $postBody = array(
      'attributes' => array(
        rescued_format_post_query_options($opt_params),
      ),
    );

    $params = array('postBody' => $postBody);
    if ($resource_name = $client->resource($resource_name)) {
      $result = $resource_name->__call("xdProductFetch", [$params]);
    }
  }

  if ($data_only) {
    return isset($result['data']) ? $result['data'] : array();
  }
  else {
    return isset($result) ? $result : array();
  }
}

/**
 * Helper function to perform a Unit of Measure conversions on prices.
 *
 * @param float $price     The base price to convert.
 * @param float $uom_ratio The UOM ratio.
 *
 * @return float The converted price.
 */
function _xdruple_commerce_convert_uom_price($price, $uom_ratio) {
  $price = $price * $uom_ratio;
  $price = round($price * 100); // Drupal Commerce doesn't use decimals for prices.

  return $price;
}

/**
 * XM.Customer.itemPrice POST query.
 *
 * Query the dispatch function XM.Customer.itemPrice to get a item price quote.
 *
 * @param string $resource_name The API resource name. e.g. 'Customer'
 * @param array  $postBody      The structured query to perform.
 * @param array  $optParams     Additional option parameters.
 *
 * @return array The query result response.
 * @internal param string $discovery_client The API client name. e.g. 'xtuple'
 */
function xdruple_commerce_api_customer_item_price($resource_name = 'Customer', $postBody, $optParams = array()) {
  $client = rescued_api_get_client();

  $params = array('postBody' => $postBody);
  $params = array_merge($params, $optParams);

  $result = NULL;
  if ($resource_name = $client->resource($resource_name)) {
    $result = $resource_name->__call("itemPrice", [$params]);
  }
  return !empty($result["price"]) ? $result["price"] : NULL;
}

function xdruple_commerce_get_customer_line_item_price($line_item, $cache_only = FALSE) {
  /** @var stdClass $user */
  global $user;

  // Load the product so we can do a UOM conversion to inventoryUnit.
  $product = entity_load_single('commerce_product', $line_item->commerce_product[LANGUAGE_NONE]['0']['product_id']);

  $price = 0;

  // Do a conversion to the inventoryUnit.
  if (!empty($line_item->commerce_unit_price[LANGUAGE_NONE]['0']) &&
    isset($line_item->commerce_unit_price[LANGUAGE_NONE]['0']['amount']) &&
    is_numeric($line_item->commerce_unit_price[LANGUAGE_NONE]['0']['amount'])
  ) {
    $price = $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['amount'];
    // Drupal Commerce doesn't use decimals. When getting the price from the
    // line_item, convert to decimal first.
    $price = $price / 100;
    $price = _xdruple_commerce_convert_uom_price($price, $product->uomRatio);
    $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['amount'] = $price;
    $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['data']['components']['0']['price']['amount'] = $price;
  }

  /** @var Xtuple\Xdruple\Session\RescuedSession $session */
  $session = extensions_get_session();
  if ((!$session->getRescued('customer') || !$session->getRescued('ship_to') || !$session->getRescued('site'))
    && $user->uid !== 0
  ) {
    // We cannot get a price quote without all of these set.
    return $price;
  }

  if ($user->uid === 0 && !variable_get('xdruple_checkout_use_guest_customer_price_schedule', FALSE)) {
    // Do not get price quote from guest customer price schedule.
    return $price;
  }

  $price = _xdruple_commerce_load_customer_line_item_price($line_item, $cache_only);

  if (isset($price) && $price >= 0) {
    // Do a conversion to the inventoryUnit.
    $price = _xdruple_commerce_convert_uom_price($price, $product->uomRatio);

    $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['amount'] = $price;
    $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['data']['components']['0']['price']['amount'] = $price;

    return $price;
  }
  else {
    return NULL;
  }
}

/**
 * @param $line_item
 * @param $cache_only
 *
 * @return array
 */
function _xdruple_commerce_load_customer_line_item_price($line_item, $cache_only = FALSE) {
  /** @var stdClass $user */
  global $user;

  /** @var Xtuple\Xdruple\Session\RescuedSession $session */
  $session = extensions_get_session();

  if ($user->uid === 0) {
    // Get anonymous checkout defaults from control panel.
    $customer = variable_get('xdruple_checkout_guest_customer', NULL);
    $shipto = NULL;
    $site = variable_get('xdruple_commerce_default_warehouse', NULL);
  }
  else {
    $customer = $session->getRescued('customer');
    $shipto = $session->getRescued('ship_to');
    $site = $session->getRescued('site');
  }

  $date = xdruple_rescued_scheduled_date('tomorrow');

  $cid = 'xdruple_commerce_customer_line_item_price-' .
    $customer . '-' .
    $line_item->line_item_label . '-' .
    strval($line_item->quantity) . '-' .
    strval($date) . '-' .
    $shipto . '-' .
    $site;
  $cache = cache_get($cid, 'cache');

  if (empty($cache) || xdruple_cache_expired($cache)) {
    $options = array(
      'asOf' => $date,
      // The scheduled date for the order.
      'siteId' => $site,
      'effective' => format_date(REQUEST_TIME, 'custom', 'Y-m-d'),
      // Always today.
    );

    if (!empty($shipto)) {
      $options['shiptoId'] = $shipto;
    }

    $postBody = array(
      'attributes' => array(
        $customer,
        $line_item->line_item_label,
        $line_item->quantity,
        $options,
      ),
    );

    // Make the itemPrice service request.
    if (!$cache_only) {
      $price = xdruple_commerce_api_customer_item_price('Customer', $postBody);

      cache_set($cid, $price, 'cache', REQUEST_TIME + 60 * 60 * 10);

      return $price;
    }
    else {
      return NULL;
    }
  }
  else {
    $price = $cache->data;

    return $price;
  }
}

/**
 * Implements hook_commerce_product_calculate_sell_price_line_item_alter().
 *
 * @param $line_item
 *   The product line item used for sell price calculation.
 */
function xdruple_commerce_commerce_product_calculate_sell_price_line_item_alter($line_item) {
  // Alter the list price.
  if ($line_item->type === 'product') {
    xdruple_commerce_get_customer_line_item_price($line_item);
  }
}


/**
 * Implements hook_commerce_cart_line_item_refresh().
 *
 * @param $line_item
 *   The product line item used for sell price calculation.
 *
 * @param $order_wrapper
 *   The order.
 */
function xdruple_commerce_commerce_cart_line_item_refresh($line_item, $order_wrapper) {
  // Alter the list price.
  if ($line_item->type === 'product') {
    xdruple_commerce_get_customer_line_item_price($line_item);
  }
}

/**
 * Helper function to format the Currency for this field.
 *
 * @param float  $amount
 *   The amount to format.
 * @param object $currency
 *   The Currency object.
 *
 * @return string $format - Formatted amount.
 */
function _xdruple_commerce_currency_format($amount, $currency) {
  // Add commas and round to two places.
  $amount = number_format(round($amount, 2), 2);

  $format = $currency->symbol . $amount;

  return $format;
}

/**
 * Helper function to format a link to the product page.
 *
 * @param $item
 *
 * @return string - Formatted link to the product page.
 */
function _xdruple_commerce_product_format($item) {
  $query = new EntityFieldQuery();
  $product = $query->entityCondition('entity_type', 'commerce_product')
                   ->propertyCondition('sku', $item['number'], '=')
                   ->execute();

  if (count($product['commerce_product']) > 0) {
    $product_id = key($product['commerce_product']);
    // Create link to product page.
    $format = l($product['commerce_product'][$product_id]->sku, 'products/' . $product_id);
  }
  else {
    $format = $item['number'];
  }

  return $format;
}

/**
 * Implements hook_theme_registry_alter()
 *
 * @param $theme_registry
 */
function xdruple_commerce_theme_registry_alter(&$theme_registry) {
  $module = drupal_get_path('module', 'xdruple_commerce');
  $theme_registry['commerce_checkout_review']['file'] = 'xdruple_commerce.module';
  $theme_registry['commerce_checkout_review']['theme path'] = $module;
  $theme_registry['commerce_checkout_review']['includes'][0] = "$module/xdruple_commerce.module";
  $theme_registry['commerce_checkout_review']['function'] = 'xdruple_commerce_checkout_review';
}

/**
 * Implements hook_user_view_alter()
 *
 * @param $build
 */
function xdruple_commerce_user_view_alter(&$build) {
  $build['summary']['#access'] = FALSE;
}

function xdruple_commerce_checkout_review($variables) {
  $rows = array();

  foreach ($variables['form']['#data'] as $pane_id => $pane) {
    $vars = array(
      'element' => array(
        '#title' => $pane['title'],
        '#value' => $pane['data'],
        '#children' => '',
        '#attributes' => array(
          'class' => array(
            'checkout-review-fieldset',
            'checkout-review-fieldset--' . drupal_clean_css_identifier($pane_id)
          ),
        ),
      ),
    );

    if ($pane_id == 'customer_profile_shipping' || $pane_id == 'customer_profile_billing') {
      $vars['element']['#wrapper_attributes'] = array(
        'class' => 'row',
      );
    }

    $fieldset = theme('fieldset', $vars);

    $rows[] = theme('html_tag', array(
      'element' => array(
        '#tag' => 'div',
        '#value' => $fieldset,
        '#attributes' => array(
          'class' => array(
            'checkout-review-pane',
            'checkout-review-pane--' . drupal_clean_css_identifier($pane_id),
          ),
        ),
      )
    ));
  }

  return implode('', $rows);
}

// @TODO This code is trash. It's used to "theme" checkout review page, which is extremely hard to do due to the
// fact, that the page itself build poorly (hard to theme) and the structure of the entity to render is enormous due
// to usage of entity references
function xdruple_commerce_entity_view_alter(&$build, $type) {
  if ($type == 'commerce_product' && $build['#view_mode'] == 'full') {
    _xdruple_commerce_product_entity_view_alter($build);
  }
}

/**
 * Implements hook_commerce_checkout_pane_info()
 */
function xdruple_commerce_commerce_checkout_pane_info() {
  $checkout_panes = array();

  $checkout_panes['purchased_items'] = array(
    'title' => t('Purchased items'),
    'base' => 'xdruple_commerce_checkout_purchased_items_pane',
    'page' => 'complete',
    'fieldset' => TRUE,
    'locked' => FALSE,
    'weight' => 1,
  );

  return $checkout_panes;
}

/**
 * Implements hook_commerce_checkout_pane_info_alter()
 *
 * @param $checkout_panes
 */
function xdruple_commerce_commerce_checkout_pane_info_alter(&$checkout_panes) {
  $checkout_panes['checkout_completion_message']['base'] = 'xdruple_commerce_checkout_completion_message_pane';
}

/**
 * Callback for checkout_completion_message pane settings form
 *
 * /admin/commerce/config/checkout/form/pane/checkout_completion_message
 *
 * @param $checkout_pane
 *
 * @return array
 */
function xdruple_commerce_checkout_completion_message_pane_settings_form($checkout_pane) {
  $form = array();

  $message = variable_get('commerce_checkout_completion_message', xdruple_commerce_checkout_completion_message_default());

  $form['container'] = array(
    '#type' => 'container',
    '#access' => filter_access(filter_format_load($message['format'])),
  );

  $form['container']['commerce_checkout_completion_message'] = array(
    '#type' => 'text_format',
    '#title' => t('Checkout completion message'),
    '#default_value' => $message['value'],
    '#format' => $message['format'],
  );

  $var_info = array(
    'site' => array(
      'type' => 'site',
      'label' => t('Site information'),
      'description' => t('Site-wide settings and other global information.'),
    ),
    'commerce_order' => array(
      'label' => t('Order'),
      'type' => 'commerce_order',
    ),
    'user' => array(
      'label' => t('User'),
      'type' => 'user',
    ),
  );

  $form['container']['commerce_checkout_completion_message_help'] = RulesTokenEvaluator::help($var_info);

  return $form;
}

/**
 * Callback for checkout_completion_message pane (checkout/%/complete page)
 *
 * @param $form
 * @param $form_state
 * @param $checkout_pane
 * @param $order
 *
 * @return array
 */
function xdruple_commerce_checkout_completion_message_pane_checkout_form($form, &$form_state, $checkout_pane, $order) {
  $pane_form = array();
  /** @var \stdClass $user */
  global $user;

  $message = variable_get('commerce_checkout_completion_message', xdruple_commerce_checkout_completion_message_default());

  $message['value'] = commerce_i18n_string('commerce:checkout:complete:message', $message['value'], array(
    'sanitize' => FALSE,
  ));

  // TODO: Add anonymous email template.
  if ($user->uid === 0) {
    $user->mail = $order->mail;
  }

  $message['value'] = token_replace($message['value'], array(
    'commerce-order' => $order,
    'user' => $user,
  ), array(
    'clear' => TRUE,
  ));

  if ($user->uid === 0) {
    unset($user->mail);
  }

  $message['value'] = check_markup($message['value'], $message['format']);

  $pane_form['message'] = array(
    '#markup' => '<div class="checkout-completion-message">' . $message['value'] . '</div>',
  );

  return $pane_form;
}

/**
 * Helper function, returns default checkout completion message
 */
function xdruple_commerce_checkout_completion_message_default() {
  $value = '';
  $format = 'htmlpurifier_basic';
  if (filter_format_load($format)) {
    $value .= '<p>Your order number is <a href="[commerce-order:view-url]">[commerce-order:order-number]</a>.</p>';
    $value .= '<p>You can <a href="[commerce-order:url]">view your order</a> on your <a href="user/[user:uid]/pending-orders">pending orders page</a> when logged in.</p>';
    $value .= '<p>We sent an order confirmation e-mail to you at <strong>[user:mail]</strong>.</p>';
    $value .= '<p><a href="[site:url]">Return to the front page.</a></p>';
  }
  else {
    $value .= 'Your order number is [commerce-order:order-number]. You can view your order on your account page when logged in.';
    $format = filter_fallback_format();
  }

  return array(
    'value' => $value,
    'format' => $format,
  );
}

/**
 * Callback for purchased_items pane (checkout/%/complete page)
 *
 * @param $form
 * @param $form_state
 * @param $checkout_pane
 * @param $order
 *
 * @return array
 */
function xdruple_commerce_checkout_purchased_items_pane_checkout_form($form, &$form_state, $checkout_pane, $order) {
  $pane_form = array();

  module_load_include('inc', 'commerce_cart', 'includes/commerce_cart.checkout_pane');
  if (user_access('view own commerce_order entities')) {
    $pane_form['cart_contents'] = array(
      '#markup' => commerce_cart_contents_pane_review($form, $form_state, $checkout_pane, $order),
    );
  }

  return $pane_form;
}

function xdruple_commerce_form_entity_operations_operation_form_alter(&$form, $form_state) {
  $form['actions']['#weight'] = 100;
}

/**
 * Helper function
 *
 * @return array
 * @throws \EntityMetadataWrapperException
 */
function _xdruple_commerce_get_cart_summary() {
  $summary = array();
  $user = extensions_get_user();
  if ($order = commerce_cart_order_load($user->getUserId())) {
    try {
      /** @var \EntityDrupalWrapper $order_wrapper */
      $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
      /** @var \EntityDrupalWrapper $line_items_wrapper */
      $line_items_wrapper = $order_wrapper->get("commerce_line_items");
      $total = commerce_line_items_total($line_items_wrapper->value());
      $summary = array(
        "count" => commerce_line_items_quantity($line_items_wrapper, commerce_product_line_item_types()),
        "total" => $total["amount"],
        "currency" => $total["currency_code"],
      );
    } catch (\Exception $e) {
      watchdog_exception("xdruple", $e);
    }
  }
  return $summary;
}

function xdruple_commerce_cart_dropdown_block() {
  $output = '';

  $summary = _xdruple_commerce_get_cart_summary();
  if (!empty($summary['count']) && $summary['count'] > 0) {
    $output .= theme('xdruple_commerce_cart_dropdown', array(
      'title' => t('My cart'),
      'count' => format_plural($summary['count'], '1 item', '@count items'),
      'amount' => commerce_currency_format($summary['total'], $summary['currency']),
    ));
  }
  else {
    $output .= theme('xdruple_commerce_cart_dropdown', array(
      'title' => t('My cart is empty'),
    ));
  }

  return $output;
}

/**
 * Implements hook_module_implements_alter()
 *
 * @param $implementations
 * @param $hook
 */
function xdruple_commerce_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'modules_enabled') {
    $group = $implementations['xdruple_commerce'];
    unset($implementations['xdruple_commerce']);
    $implementations['xdruple_commerce'] = $group;
  }

  // Moves the xdruple_commerce_commerce_order_load() implementation to the start
  // of the array so it is invoked before all modules implementing the same hook.
  if ($hook == 'commerce_order_load') {
    $xdruple_commerce['xdruple_commerce'] = $implementations['xdruple_commerce'];
    unset($implementations['xdruple_commerce']);
    $modules = $implementations;
    $implementations = array_merge($xdruple_commerce, $modules);
  }
}

/**
 * Implements hook_modules_enabled()
 *
 * - commerce_customer_modules_enabled() calls commerce_customer_configure_customer_fields() to ensure that all
 * modules that implement hook_commerce_customer_profile_type_info() were invoked and all profile type have
 * commerce_customer_address field. xDruple Commerce provides own fields to handle that and so this field should
 * always be removed
 *
 * @see commerce_customer_modules_enabled()
 * @see commerce_customer_configure_customer_fields()
 * @see commerce_customer_profile_type_info()
 *
 * @param $modules
 */
function xdruple_commerce_modules_enabled($modules) {
  _xdruple_commerce_remove_commerce_customer_address();
}

/**
 * Helper functions. Removes all 'commerce_customer_address' fields.
 */
function _xdruple_commerce_remove_commerce_customer_address() {
  // Clear caches so xdruple_commerce module can override commerce module.
  drupal_flush_all_caches();
  drupal_static_reset();

  // Remove 'commerce_customer_address' fields on customer profiles. We use
  // xTuple integrated custom fields for this.
  $field_name = 'commerce_customer_address';
  foreach (commerce_customer_profile_types() as $profile_type) {
    $instance = field_info_instance('commerce_customer_profile', $field_name, $profile_type['type']);

    if (!empty($instance)) {
      // Delete the instance and field.
      // TODO: Do we really need to delete the field or just the instance?
      // This shouldn't be ran on an existing site that could have data in this
      // field, but that should never really happen. An existing site would
      // need to be migrated to an xTuple enabled site.
      field_delete_instance($instance, TRUE);
    }
  }

  field_purge_batch(10);
}

/**
 * Implements hook_views_default_views_alter()
 *
 * @param $views
 */
function xdruple_commerce_views_default_views_alter(&$views) {
  $commerce_orders = variable_get('commerce_orders_view_name', 'commerce_orders');
  if (isset($views[$commerce_orders])) {
    unset($views[$commerce_orders]->display['shopping_carts']);
    unset($views[$commerce_orders]->display['default']->display_options['filters']);
  }
}

/**
 * Builds configuration for Product entity full display.
 *
 * @return array
 */
function xdruple_commerce_get_product_display_config() {
  $config = array(
    'title' => array(
      'title' => 'Description',
      'label' => LABEL_INLINE,
    ),
    'classCode' => array(
      'title' => 'Manufacturer',
      'label' => LABEL_INLINE,
    ),
    'productCategory' => array(
      'title' => 'Category',
      'label' => LABEL_INLINE,
    ),
    'sku' => array(
      'title' => 'Part #',
      'label' => LABEL_INLINE,
    ),
    'priceUnit' => array(
      'title' => 'Unit Price UOM',
      'label' => LABEL_INLINE,
    ),
    'inventoryUnit' => array(
      'title' => 'Order Quantity UOM',
      'label' => LABEL_INLINE,
    ),
    'prodWidth' => array(
      'title' => 'Width',
      'label' => LABEL_INLINE,
    ),
    'prodLength' => array(
      'title' => 'Length',
      'label' => LABEL_INLINE,
    ),
    'prodHeight' => array(
      'title' => 'Height',
      'label' => LABEL_INLINE,
    ),
    'dimensionUnit' => array(
      'title' => '',
      'label' => LABEL_INLINE,
    ),
    'barcode' => array(
      'title' => 'UPC Code',
      'label' => LABEL_INLINE,
    ),
    'xt_physical_weight' => array(
      'title' => 'Weight',
      'label' => LABEL_INLINE,
    ),
    'xt_physical_dimension' => array(
      'title' => 'Dimension',
      'label' => LABEL_INLINE,
    ),
    'extDescrip' => array(
      'title' => 'Extended description',
      'label' => LABEL_ABOVE,
    ),
    'xt_url_image_field' => array(
      'label' => LABEL_HIDDEN,
    ),
    'xt_url_file_field' => array(
      'title' => 'Product files',
      'label' => LABEL_ABOVE,
    ),
    'xt_url_link_field' => array(
      'title' => 'Additional references',
      'label' => LABEL_ABOVE,
    ),
    'substitutes' => array(
      'title' => 'Related products',
      'label' => LABEL_ABOVE,
    ),
  );

  // Add default weight value
  $weight = 0;
  foreach ($config as &$item) {
    $item += array(
      'title' => '',
      'label' => LABEL_INLINE,
      'weight' => $weight,
    );
    $weight++;
  }

  return $config;
}

/**
 * Helper function. Process hook_entity_view_alter() for product entity, full mode
 *
 * @see xdruple_commerce_entity_view_alter()
 * @see hook_entity_view_alter()
 *
 * @param $build
 */
function _xdruple_commerce_product_entity_view_alter(&$build) {
  $config = xdruple_commerce_get_product_display_config();

  foreach ($build as $key => &$item) {
    if (is_array($item) && !empty($item['#theme']) && $item['#theme'] == 'field') {
      $item['#access'] = FALSE;

      if (!empty($config[$key])) {
        $field_config = $config[$key];

        if (!empty($field_config['title'])) {
          $item['#title'] = t($field_config['title']);
        }

        $item['#label_display'] = $field_config['label'];
        $item['#weight'] = $field_config['weight'];

        $item['#access'] = TRUE;
      }
    }
  }

  // Overriding any current value for xt_url_image_field display
  if (!empty($build['xt_url_image_field']['#items']) && $build['xt_url_image_field']['#access']) {
    $img_field = &$build['xt_url_image_field'];
    $img_field['#formatter'] = 'fancybox';
    foreach ($img_field['#items'] as $i => $item) {
      $img_field[$i] = array(
        '#theme' => 'fancybox_formatter_default',
        '#settings' => array(
          'cyclic' => TRUE,
          'full' => 'large',
          'preview' => 'ft_commerce_product_page_thumb_small',
          'title_position' => 'over',
          'title_show' => TRUE,
        ),
        '#item' => array(
          'path' => $item['uri'],
          'width' => $item['width'],
          'height' => $item['height'],
          'alt' => $item['alt'],
          'title' => $item['title'],
        ),
        '#class' => array('fancybox-commerce-product-product-xt-url-image-field'),
        '#rel' => 'fancybox-commerce-product-product-xt-url-image-field',
      );
    }
  }

  // Overriding default substitutes property to be themed
  if (!empty($build['substitutes']['#items'])) {
    foreach ($build['substitutes']['#items'] as $i => $product_id) {
      $build['substitutes'][$i] = array(
        '#theme' => 'xdruple_commerce_similar_product_link_default',
        '#product_id' => $product_id,
        '#style' => 'ft_commerce_product_thumb',
      );
    }
  }
  else {
    $build['substitutes']['#access'] = FALSE;
  }
}

/**
 * Implements hook_commerce_order_load().
 *
 * Because item could be deactivated in xTuple, we need to make sure the items
 * in an order (and cart) are valid when loading an order. If they are no
 * longer valid, we remove them from the order.
 *
 * @param $orders
 */
function xdruple_commerce_commerce_order_load($orders) {
  $refreshed = &drupal_static(__FUNCTION__, array());
  $orders_changed = array();

  foreach ($orders as $order) {
    // Refresh only if this order object represents the latest revision of a
    // shopping cart order, it hasn't been refreshed already in this request
    // and it meets the criteria in the shopping cart refresh settings.
    if (!isset($refreshed[$order->order_id]) &&
      commerce_cart_order_is_cart($order) &&
      commerce_order_is_latest_revision($order) &&
      commerce_cart_order_can_refresh($order)
    ) {

      // Refresh the order and add its ID to the refreshed array.
      $refreshed[$order->order_id] = TRUE;
      $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

      // Loop over every line item on the order...
      foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
        // If the current line item actually no longer exists...
        if (!$line_item_wrapper->value()) {
          // Remove the reference from the order and continue to the next value.
          $order_wrapper->commerce_line_items->offsetUnset($delta);
          continue;
        }

        // If the line item is a product line item, not shipping to tax.
        if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
          // If the current product is no longer active.
          try {
            $product_ids[] = $line_item_wrapper->commerce_product->raw();
            foreach ($product_ids as $id) {
              // Check if we can load the product.
              entity_load_single('commerce_product', $id);
            }
          } catch (Exception $e) {
            // Remove the product from this order.
            $line_item_id = $line_item_wrapper->raw();
            $order_wrapper->commerce_line_items->offsetUnset($delta);
            commerce_entity_reference_delete($order, 'commerce_line_items', 'line_item_id', $line_item_id);
            $orders_changed[] = $order->order_id;

            continue;
          }
        }
      }
    }
  }

  if (!empty($orders_changed)) {
    // Run the commerce_cart_commerce_order_load() version of this hook with
    // the updated orders data so it does it's thing without having to load
    // the inactive product and then save the order.
    commerce_cart_commerce_order_load($orders);
    foreach ($orders_changed as $order_id) {
      entity_save('commerce_order', $orders[$order_id]);
    }
  }
}

/**
 * Implements hook_features_exclude()
 *
 * @return array
 */
function xdruple_commerce_features_exclude() {
  return array(
    'variable' => array(
      // Commerce UPS
      'commerce_ups_access_key',
      'commerce_ups_account_id',
      'commerce_ups_log',
      'commerce_ups_password',
      'commerce_ups_user_id',
    ),
  );
}
